<?xml version='1.0'?>
<datamodel version="3.0"
           xmlns="http://www.tresos.de/_projects/DataModel2/08/root.xsd"
           xmlns:a="http://www.tresos.de/_projects/DataModel2/08/attribute.xsd"
           xmlns:v="http://www.tresos.de/_projects/DataModel2/06/schema.xsd"
           xmlns:d="http://www.tresos.de/_projects/DataModel2/06/data.xsd">
<!--
*   @file    Mcu.xdm
*   @version 4.0.0
*
*   @brief   AUTOSAR Mcu - Tresos Studio plugin schema file
*   @details This file contains the schema configuration for and Mcu Tresos Studio plugin.
-->
<!--
====================================================================================================
*   Project              : RTD AUTOSAR 4.4
*   Platform             : CORTEXM
*   Peripheral           : 
*   Dependencies         : none
*
*   Autosar Version      : 4.4.0
*   Autosar Revision     : ASR_REL_4_4_REV_0000
*   Autosar Conf.Variant :
*   SW Version           : 4.0.0
*   Build Version        : S32_RTD_4_0_0_D2210_ASR_REL_4_4_REV_0000_20221031

*   (c) Copyright 2022 NXP Semiconductors
*   All Rights Reserved.
====================================================================================================
-->
    <d:ctr type="AUTOSAR" factory="autosar"
        xmlns:ad="http://www.tresos.de/_projects/DataModel2/08/admindata.xsd"
        xmlns:icc="http://www.tresos.de/_projects/DataModel2/08/implconfigclass.xsd"
        xmlns:mt="http://www.tresos.de/_projects/DataModel2/11/multitest.xsd" >
        <d:lst type="TOP-LEVEL-PACKAGES">
            <!-- /** @implements  Mcu_Object */ -->
            <d:ctr name="TS_T40D11M40I0R0" type="AR-PACKAGE">
                <a:a name="UUID" value="ECUC:27a441fa-9e80-11eb-a8b3-0242ac130003"/>
                <d:lst type="ELEMENTS">
                    <d:chc name="Mcu" type="AR-ELEMENT" value="MODULE-DEF">
                        <v:ctr type="MODULE-DEF">
                            <a:a name="DESC">
                                <a:v>
                                    <![CDATA[EN:<html>
                                        Configuration of the MicroController Unit (MCU) module.
                                    </html>]]>
                                </a:v>
                            </a:a>
                            <a:a name="LOWER-MULTIPLICITY" value="1" />
                            <a:a name="UPPER-MULTIPLICITY" value="1" />
                            <a:a name="RELEASE" value="asc:4.4"/>
                            <a:a name="ADMIN-DATA" type="ADMIN-DATA">
                                <ad:ADMIN-DATA>
                                    <ad:LANGUAGE>EN</ad:LANGUAGE>
                                    <ad:DOC-REVISIONS>
                                        <ad:DOC-REVISION>
                                            <ad:REVISION-LABEL>4.0.0</ad:REVISION-LABEL>
                                            <ad:ISSUED-BY>AUTOSAR</ad:ISSUED-BY>
                                            <ad:DATE>2010-12-03</ad:DATE>
                                        </ad:DOC-REVISION>
                                    </ad:DOC-REVISIONS>
                                </ad:ADMIN-DATA>
                            </a:a>
                            <d:ref type="REFINED_MODULE_DEF" value="ASPath:/AUTOSAR/EcucDefs/Mcu"/>
                            <a:a name="POSTBUILDVARIANTSUPPORT" value="true"/>
                            <a:a name="UUID" value="ECUC:b510368b-ff12-4d58-aaad-a5e9c1cb3e2b"/>

                            <v:var name="POST_BUILD_VARIANT_USED" type="BOOLEAN">
                                <a:a name="DESC"
                                     value="Indicates whether a module implementation has or plans to have (i.e., introduced at link or post-build time) new post-build variation points."/>
                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                </a:a>
                                <a:a name="LABEL" value="Post Build Variant Used"/>
                                <a:a name="ORIGIN" value="EB"/>
                                <a:a name="POSTBUILDVARIANTVALUE" value="false"/>
                                <a:da name="DEFAULT" value="false"/>
                                <a:da name="READONLY" value="false"/>
                                <a:da name="TOOLTIP"
                                    value="Indicates whether a module implementation has or plans to have (i.e., introduced at link or post-build time) new post-build variation points."/>
                            </v:var>

                            <!-- /** @implements  IMPLEMENTATION_CONFIG_VARIANT_Object */ -->
                            <v:var name="IMPLEMENTATION_CONFIG_VARIANT" type="ENUMERATION">
                                <a:a name="LABEL" value="Config Variant"/>
                                <a:a name="UUID" value="ECUC:e2d81221-d902-4f85-bd93-578fada9dc3f"/>
                                <a:a name="DESC">
                                    <a:v>
                                        <![CDATA[EN:<html>
                                            VariantPreCompile: Only precompile time configuration parameters. Only one set of parameters. <br />
                                            VariantPostBuild: Mix of precompile and postbuild time configuration parameters. Only one set of parameters. <br />
                                            VariantPostBuildSelectable: Mix of precompile and postbuild time configuration parameters. More sets of parameters. <br />
                                        </html>]]>
                                    </a:v>
                                </a:a>
                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                </a:a>
                                <a:da name="DEFAULT" value="VariantPostBuild"/>
                                <a:da name="RANGE">
                                    <a:v>VariantPostBuild</a:v>
                                    <a:v>VariantPreCompile</a:v>
                                </a:da>
                            </v:var>

                            <!-- /** @implements  McuGeneralConfiguration_Object */ -->
                            <v:ctr name="McuGeneralConfiguration" type="IDENTIFIABLE">
                                <a:a name="DESC">
                                    <a:v>
                                        <![CDATA[EN:<html>
                                            This container contains the general configuration for the MCU driver.
                                        </html>]]>
                                    </a:v>
                                </a:a>
                                <a:a name="UUID" value="ECUC:b91249b0-4a29-496c-86b9-4cf3ec281e92"/>


                                <!-- /** @implements McuDevErrorDetect_Object */ -->
                                <v:var name="McuDevErrorDetect" type="BOOLEAN">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Pre-processor switch for enabling the default error detection and reporting to the DET.  <br />
                                                The switch McuDevErrorDetect shall switch the Default Error Tracer (Det) detection and notification ON or OFF.  <br />
                                                The detection of default errors is configurable (ON/OFF) at precompile time. <br />
                                                #define MCU_DEV_ERROR_DETECT (STD_ON)/(STD_OFF) will be generated in Mcu_Cfg.h file.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="LABEL" value="Default Error Detect"/>
                                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:564e05d8-8922-4a7d-b112-ebfa5e67d2d8"/>
                                    <a:da name="DEFAULT" value="false"/>
                                </v:var>


                                <!-- /** @implements McuVersionInfoApi_Object */ -->
                                <v:var name="McuVersionInfoApi" type="BOOLEAN">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Pre-processor switch to enable/disable the API to read out the modules version information. <br />
                                                #define MCU_VERSION_INFO_API (STD_ON)/(STD_OFF) will be generated in Mcu_Cfg.h file.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="LABEL" value="Version Info API"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:7ea93c38-3acb-4571-a374-c6c67d6746b1"/>
                                    <a:da name="DEFAULT" value="false"/>
                                </v:var>

                                <!-- /** @implements McuGetRamStateApi_Object */ -->
                                <v:var name="McuGetRamStateApi" type="BOOLEAN">
                                    <a:a name="LABEL" value="Mcu Get Ram State API" />
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Pre-processor switch to enable/disable the API Mcu_GetRamState. <br />
                                                #define MCU_GET_RAM_STATE_API (STD_ON)/(STD_OFF) will be generated in Mcu_Cfg.h file.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:0ca12151-32c7-4f1f-a161-9c18ae70acb1"/>
                                    <a:da name="DEFAULT" value="false" />
                                    <a:da name="READONLY" value="false"/>
                                </v:var>

                                <!-- /** @implements McuInitClock_Object */ -->
                                <v:var name="McuInitClock" type="BOOLEAN">
                                    <a:a name="LABEL" value="Mcu Init Clock API" />
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                If this parameter is set to FALSE, the clock initialization has to be disabled from the MCU driver. This concept applies when there are some write once clock registers and a bootloader is present. If this parameter is set to TRUE, the MCU driver is responsible with the clock initialization. <br />
                                                #define MCU_INIT_CLOCK (STD_ON)/(STD_OFF) will be generated in Mcu_Cfg.h file.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:0f51cb81-7dcd-4510-a24d-317bc194aaed"/>
                                    <a:da name="DEFAULT" value="true"/>
                                </v:var>

                                <!-- /** @implements McuNoPll_Object */ -->
                                <v:var name="McuNoPll" type="BOOLEAN">
                                    <a:a name="LABEL" value="Mcu No PLL" />
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                This parameter shall be set True, if the H/W does not have a PLL or the PLL circuitry is enabled after the power on without S/W intervention. In this case MCU_DistributePllClock has to be disabled and  MCU_GetPllStatus has to return MCU_PLL_STATUS_UNDEFINED. Otherwise this parameters has to be set False. <br />
                                                #define MCU_NO_PLL (STD_ON)/(STD_OFF) will be generated in Mcu_Cfg.h file.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:6d9b74b1-4bf5-4cea-820d-53f6326975fd"/>
                                    <a:da name="DEFAULT" value="false"/>
                                </v:var>

                                <!-- /** @implements McuEnterLowPowerMode_Object */ -->
                                <v:var name="McuEnterLowPowerMode" type="BOOLEAN">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                If this parameter has been configured to 'TRUE', the function 'Mcu_SetMode()' shall not be impacted and behave as specified. <br />
                                                If this parameter has been configured to 'FALSE', the function 'Mcu_SetMode()' shall not perform the transition to any low power modes as are 'STOP' or 'HALT' or any other mode, where the core stops execution. <br />
                                                #define MCU_ENTER_LOW_POWER_MODE (STD_ON)/(STD_OFF) will be generated in Mcu_Cfg.h file. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="LABEL" value="Mcu Enter Low-Power Mode" />
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:4121632d-b60e-4d48-8e66-480991dbde5d"/>
                                    <a:da name="DEFAULT" value="false"/>
                                    <a:da name="EDITABLE" type="XPath" expr="text:tolower(ecu:get('MCU.MC_ME.StandbySupported')) = 'true'"/>
                                </v:var>

                                <v:var name="McuTimeout" type="INTEGER">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                This parameter represents the maximum number of loops for blocking functionality. <br />
                                                The maximum time needed for a MC_ME transition from DRUN to DRUN with keeping PLL running is 3 ms. <br />
                                                Please take this into consideration when choosing the value for this parameter. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:3b8b947e-d4c1-492b-b866-c8d140d0866f"/>
                                    <a:da name="DEFAULT" value="50000"/>
                                    <a:a name="LABEL" value="Mcu Loops TimeOut"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&gt;=1"/>
                                        <a:tst expr="&lt;=4294967295"/>
                                    </a:da>
                                </v:var>

                                <!-- @implements McuEnableUserModeSupport_Object -->
                                <v:var name="McuEnableUserModeSupport" type="BOOLEAN">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                When this parameter is enabled, the MDL module will adapt to run from User Mode, with the following measures: <br />
                                                a) configuring REG_PROT for ABC1, ABC2 IPs so that the registers under protection can be accessed from user mode by setting UAA bit in REG_PROT_GCR to 1 <br />
                                                b) using 'call trusted function' stubs for all internal function calls that access registers requiring supervisor mode. <br />
                                                c) other module specific measures <br />
                                                for more information, please see chapter 5.7 User Mode Support in IM  <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="LABEL" value="Mcu Enable User Mode Support"/>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="UUID" value="ECUC:fdf29f79-dbae-4cd2-abf2-c0941851a05e"/>
                                    <a:da name="DEFAULT" value="false"/>
                                </v:var>

                                <!-- /** @implements McuPerformResetApi_Object */ -->
                                <v:var name="McuPerformResetApi" type="BOOLEAN">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Pre-processor switch to enable/disable the use the Mcu_PerformReset() API. <br />
                                                OFF - Mcu_PerformReset() API is not used. <br />
                                                ON - Mcu_PerformReset() API is used. <br />
                                                #define MCU_PERFORM_RESET_API (STD_ON)/(STD_OFF) will be generated in Mcu_Cfg.h file.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="LABEL" value="Mcu Perform Reset API"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:8c6ec070-2607-49d0-96f1-35d02c4a62ef"/>
                                    <a:da name="DEFAULT" value="false"/>
                                </v:var>

                                <v:var name="McuCalloutBeforePerformReset" type="BOOLEAN">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Check this if you want a callout function, called by MCU right before Mcu_PerformReset(). <br />
                                                This parameter is available for configuration only if "McuPerformResetApi" is ON. <br />
                                                #define MCU_RESET_CALLOUT_USED (STD_ON)/(STD_OFF) will be generated in Mcu_Cfg.h file. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:fa43da28-01e8-4ca1-aeca-2cb72d9bd132"/>
                                    <a:da name="DEFAULT" value="false"/>
                                    <a:a name="EDITABLE" type="XPath">
                                        <a:tst expr="node:fallback(../McuPerformResetApi, 'true') = 'true'"/>
                                    </a:a>
                                </v:var>

                                <!-- /** @implements McuPerformResetCallout_Object */ -->
                                <v:var name="McuPerformResetCallout" type="FUNCTION-NAME">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Function name of callout. <br />
                                                The field is editable only if "McuCalloutBeforePerformReset" is ON. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="UUID" value="ECUC:025e1b74-4c6e-4a1a-aef0-c03a979bbd0a"/>
                                    <a:da name="DEFAULT" value="NULL_PTR"/>
                                    <a:da name="INVALID" type="XPath">
                                        <a:tst expr="(
                                                      node:fallback(../McuCalloutBeforePerformReset, 'true') = 'true' and
                                                      node:fallback(../McuPerformResetApi, 'true') = 'true'
                                                     ) and
                                                     (  (node:fallback(., '') = 'NULL') or
                                                        (node:fallback(., '') = 'Null') or
                                                        (node:fallback(., '') = 'false') or
                                                        (node:fallback(., '') = 'FALSE') or
                                                        (node:fallback(., '') = 'null') or
                                                        (node:fallback(., '') = 'null_ptr') or
                                                        (node:fallback(., '') = 'Null_Ptr') or
                                                        (node:fallback(., '') = 'NULL_PTR')
                                                     )"
                                            true="Invalid identifier. The field must specify a valid C function identifier (i.e. an arbitrarily long sequence of digits, underscores, lowercase and uppercase Latin letters, that must begin with a non-digit character)."/>
                                        <a:tst expr="(normalize-space(node:fallback(., '')) = '&quot;NULL_PTR&quot;') or
                                                     (normalize-space(node:fallback(., '')) = 'NULL_PTR') or
                                                     (normalize-space(node:fallback(., '')) = '&quot;NULL&quot;') or
                                                     (normalize-space(node:fallback(., '')) = 'NULL') or
                                                     (text:match(normalize-space(.),'^[_a-zA-Z]+[_0-9a-zA-Z]*$'))"
                                           false="Invalid identifier. The field must specify a valid C function identifier (i.e. an arbitrarily long sequence of digits, underscores, lowercase and uppercase Latin letters, that must begin with a non-digit character)."/>
                                    </a:da>
                                    <a:da name="EDITABLE" type="XPath">
                                        <a:tst expr="node:fallback(../McuCalloutBeforePerformReset, 'true') = 'true' and node:fallback(../McuPerformResetApi, 'true') = 'true'"/>
                                    </a:da>
                                </v:var>

                                <v:var name="McuCmuNotification" type="FUNCTION-NAME">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Function pointer to callback function. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                    <icc:v class="PreCompile">VariantPreCompile</icc:v>
                                    <icc:v class="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="OPTIONAL" value="true"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="UUID" value="ECUC:d762bbe9-6025-4f80-a407-2c680a2d3231"/>
                                    <a:da name="DEFAULT" value="NULL_PTR"/>
                                    <a:da name="INVALID" type="XPath">
                                        <a:tst expr="(
                                                        (normalize-space(node:fallback(., '')) = 'NULL') or
                                                        (normalize-space(node:fallback(., '')) = 'Null') or
                                                        (normalize-space(node:fallback(., '')) = 'false') or
                                                        (normalize-space(node:fallback(., '')) = 'FALSE') or
                                                        (normalize-space(node:fallback(., '')) = 'null') or
                                                        (normalize-space(node:fallback(., '')) = 'null_ptr') or
                                                        (normalize-space(node:fallback(., '')) = 'Null_Ptr') or
                                                        (normalize-space(node:fallback(., '')) = 'NULL_PTR')
                                                     )"
                                            true="Invalid identifier. The field must specify a valid C function identifier (i.e. an arbitrarily long sequence of digits, underscores, lowercase and uppercase Latin letters, that must begin with a non-digit character)."/>
                                        <a:tst expr="(normalize-space(node:fallback(., '')) = '&quot;NULL_PTR&quot;') or
                                                     (normalize-space(node:fallback(., '')) = '&quot;NULL&quot;') or
                                                     (normalize-space(node:fallback(., '')) = 'NULL') or
                                                     (text:match(normalize-space(.),'^[_a-zA-Z]+[_0-9a-zA-Z]*$'))"
                                           false="Invalid identifier. The field must specify a valid C function identifier (i.e. an arbitrarily long sequence of digits, underscores, lowercase and uppercase Latin letters, that must begin with a non-digit character)."/>
                                    </a:da>
                                </v:var>

                                <v:var name="McuAlternateResetIsrUsed" type="BOOLEAN">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Check this if you have any reset source demoted to IRQ (i.e. at least one McuModuleConfiguration/McuResetConfig/*/McuDisableReset = 'true'). <br />
                                                #define POWER_IP_RESET_ALTERNATE_ISR_USED (STD_ON)/(STD_OFF) will be generated in Power_Ip_Cfg_Defines.h file.<br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:fa43da28-01e8-4ca1-aeca-2cb32d9db116"/>
                                    <a:da name="DEFAULT" value="false"/>
                                    <a:da name="READONLY" value="false"/>
                                </v:var>

                                <v:var name="McuCmuErrorIsrUsed" type="BOOLEAN">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Check this if clock source failure notifications are enabled (i.e. McuModuleConfiguration/McuClockSrcFailureNotification = 'ENABLED'). <br />
                                                #define MCU_CMU_ERROR_ISR_USED (STD_ON)/(STD_OFF) will be generated in Mcu_Cfg.h file.<br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:fa43da28-01e8-4ca1-aeca-2cb32ad9c116"/>
                                    <a:da name="DEFAULT" value="false"/>
                                </v:var>

                                <!-- /** @implements McuErrorIsrNotification_Object */ -->
                                <v:var name="McuErrorIsrNotification" type="FUNCTION-NAME">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Function name of callout. This function will be called by the error ISR. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v class="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v class="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="UUID" value="ECUC:17291a1c-163b-4343-87d0-f1ed80367f5b"/>
                                    <a:a name="OPTIONAL" value="true"/>
                                    <a:da name="DEFAULT" value="NULL_PTR"/>
                                    <a:da name="INVALID" type="XPath">
                                        <a:tst expr="(  (node:fallback(., '') = 'NULL') or
                                                        (node:fallback(., '') = 'Null') or
                                                        (node:fallback(., '') = 'false') or
                                                        (node:fallback(., '') = 'FALSE') or
                                                        (node:fallback(., '') = 'null') or
                                                        (node:fallback(., '') = 'null_ptr') or
                                                        (node:fallback(., '') = 'Null_Ptr') or
                                                        (node:fallback(., '') = 'NULL_PTR')
                                                     )"
                                            true="Invalid identifier. The field must specify a valid C function identifier (i.e. an arbitrarily long sequence of digits, underscores, lowercase and uppercase Latin letters, that must begin with a non-digit character)."/>
                                        <a:tst expr="(normalize-space(node:fallback(., '')) = '&quot;NULL_PTR&quot;') or
                                                     (normalize-space(node:fallback(., '')) = 'NULL_PTR') or
                                                     (normalize-space(node:fallback(., '')) = '&quot;NULL&quot;') or
                                                     (normalize-space(node:fallback(., '')) = 'NULL') or
                                                     (text:match(normalize-space(.),'^[_a-zA-Z]+[_0-9a-zA-Z]*$'))"
                                           false="Invalid identifier. The field must specify a valid C function identifier (i.e. an arbitrarily long sequence of digits, underscores, lowercase and uppercase Latin letters, that must begin with a non-digit character)."/>
                                    </a:da>
                                </v:var>

                                <!-- /** @implements McuDisableRgmInit_Object */ -->
                                <v:var name="McuDisableRgmInit" type="BOOLEAN">
                                    <a:a name="LABEL" value="Mcu Disable Reset Generation Module Initialization" />
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                If this parameter is set to TRUE, the Reset Generation Module (MC_RGM) initialization will be disabled in the MCU driver. <p/>
                                                If this parameter is set to FALSE, the MCU driver is responsible for the Reset Generation Module (MC_RGM) initialization. <p/>
                                                #define MCU_DISABLE_RGM_INIT (STD_ON)/(STD_OFF) will be generated in Mcu_Cfg.h file.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v class="PreCompile">VariantPostBuild</icc:v>
                                        <icc:v class="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:884f320d-7ba4-479e-a4c9-67dcb82e2bee"/>
                                    <a:da name="DEFAULT" value="false"/>
                                </v:var>

                                <!-- /** @implements McuDisablePmcInit_Object */ -->
                                <v:var name="McuDisablePmcInit" type="BOOLEAN">
                                    <a:a name="LABEL" value="Mcu Disable Power Management Controller Initialization" />
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                If this parameter is set to TRUE, the Power Management Controller (PMC) initialization will be disabled in the MCU driver. <p/>
                                                If this parameter is set to FALSE, the MCU driver is responsible for the Power Management Controller (PMC) initialization. <p/>
                                                #define MCU_DISABLE_PMC_INIT (STD_ON)/(STD_OFF) will be generated in Mcu_Cfg.h file.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v class="PreCompile">VariantPostBuild</icc:v>
                                        <icc:v class="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:884f320d-7ba4-479e-a4c9-ec6da82ecb27"/>
                                    <a:da name="DEFAULT" value="false"/>
                                </v:var>

                                <!-- /** @implements McuDisableRamWaitStatesConfig_Object */ -->
                                <v:var name="McuDisableRamWaitStatesConfig" type="BOOLEAN">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Check this if you want the SRAMC configuration to be bypassed.<br />
                                                If this is checked, the settings configured in McuRam(from McuClockSettingConfig) will not be used.<br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="LABEL" value="Mcu Disable Ram Wait States Config"/>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="UUID" value="ECUC:133a1136-9fb7-40ee-be19-8599edfef487"/>
                                    <a:da name="DEFAULT" value="false"/>
                                </v:var>

                                <!-- /** @implements McuPrepareMemoryConfig_Object */ -->
                                <v:var name="McuPrepareMemoryConfig" type="FUNCTION-NAME">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Function name of a callout that will be called before and after configuring
                                                the SRAM controller. It will have a parameter that will specify if it is
                                                the entry or the exit point of the controllers configuration.<br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v class="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v class="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="LABEL" value="Memory Configuration Notification"/>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="UUID" value="ECUC:17291a1c-163b-4ec3-87d0-f1ed80312f5b"/>
                                    <a:a name="OPTIONAL" value="true"/>
                                    <a:da name="DEFAULT" value="NULL_PTR"/>
                                    <a:da name="INVALID" type="XPath">
                                        <a:tst expr="(  (node:fallback(., '') = 'NULL') or
                                                        (node:fallback(., '') = 'Null') or
                                                        (node:fallback(., '') = 'false') or
                                                        (node:fallback(., '') = 'FALSE') or
                                                        (node:fallback(., '') = 'null') or
                                                        (node:fallback(., '') = 'null_ptr') or
                                                        (node:fallback(., '') = 'Null_Ptr') or
                                                        (node:fallback(., '') = 'NULL_PTR')
                                                     )"
                                            true="Invalid identifier. The field must specify a valid C function identifier (i.e. an arbitrarily long sequence of digits, underscores, lowercase and uppercase Latin letters, that must begin with a non-digit character)."/>
                                        <a:tst expr="(normalize-space(node:fallback(., '')) = '&quot;NULL_PTR&quot;') or
                                                     (normalize-space(node:fallback(., '')) = 'NULL_PTR') or
                                                     (normalize-space(node:fallback(., '')) = '&quot;NULL&quot;') or
                                                     (normalize-space(node:fallback(., '')) = 'NULL') or
                                                     (text:match(normalize-space(.),'^[_a-zA-Z]+[_0-9a-zA-Z]*$'))"
                                           false="Invalid identifier. The field must specify a valid C function identifier (i.e. an arbitrarily long sequence of digits, underscores, lowercase and uppercase Latin letters, that must begin with a non-digit character)."/>
                                        <a:tst expr="node:fallback(../McuDisableRamWaitStatesConfig, 'false') = 'true'"
                                               true="This notification cannot be configured as long as RAM configuration is disabled (i.e. McuDisableRamWaitStatesConfig is true)."/>
                                    </a:da>
                                </v:var>

                                <v:var name="McuTimeoutMethod" type="ENUMERATION">
                                    <a:a name="LABEL" value="Mcu Timeout Method"/>
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:
                                                <html>
                                                    <p>McuTimeoutMethod</p>
                                                    <p>Configures the timeout method.</p>
                                                    <p>Based on this selection a certain timeout method from OsIf will be used in the driver.</p>
                                                    <p>Note: If OSIF_COUNTER_SYSTEM or OSIF_COUNTER_CUSTOM are selected make sure the corresponding timer is enabled in OsIf General configuration. </p>
                                                    Note: Implementation Specific Parameter. <p/>
                                                </html>
                                            ]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v class="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v class="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:859399b9-f6b8-45e1-9897-07dd73e76cc4"/>
                                    <a:a name="DEFAULT" value="OSIF_COUNTER_DUMMY"/>
                                    <a:da name="INVALID" type="XPath">
                                        <a:tst expr="node:refs('ASPathDataOfSchema:/TS_T40D11M40I0R0/Base/OsIfGeneral/OsIfUseCustomTimer') = 'false' and node:fallback(.,'OSIF_COUNTER_DUMMY') = 'OSIF_COUNTER_CUSTOM'" true="Custom Timer is not enabled in OsIf (OsIfGeneral/OsIfUseCustomTimer checkbox)"/>
                                        <a:tst expr="node:refs('ASPathDataOfSchema:/TS_T40D11M40I0R0/Base/OsIfGeneral/OsIfUseSystemTimer') = 'false' and node:fallback(.,'OSIF_COUNTER_DUMMY') = 'OSIF_COUNTER_SYSTEM'" true="System Timer is not enabled in OsIf (OsIfGeneral/OsIfUseSystemTimer checkbox)"/>
                                    </a:da>
                                    <a:da name="RANGE">
                                        <a:v>OSIF_COUNTER_DUMMY</a:v>
                                        <a:v>OSIF_COUNTER_SYSTEM</a:v>
                                        <a:v>OSIF_COUNTER_CUSTOM</a:v>
                                    </a:da>
                                </v:var>

                                <v:var name="McuHardwareVersion" type="ENUMERATION">
                                    <a:a name="LABEL" value="Mcu Hardware Version"/>
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:
                                                <html>
                                                    <p>McuHardwareVersion</p>
                                                    <p>Configures the hardware version.</p>
                                                    <p>For S32G274:</p>
                                                    <p>Cut 1.0: PS32G274ABVUC 0N92V SBAB 1937C</p>
                                                    <p>Cut 2.0: PS32G274ABVUC 0P77B SBAA 2030A</p>
                                                    <p>Note: Implementation Specific Parameter. <p/>
                                                </html>
                                            ]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v class="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v class="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:859399b9-f6b8-45e1-3a54-07dd73e76cc4"/>
                                    <a:a name="DEFAULT" value="Rev2"/>
                                    <a:a name="VISIBLE" type="XPath">
                                        <a:tst expr="(text:tolower(text:contains(ecu:list('MCU.HARDWAREVERSION.SUPPORT'),'true'))='true')"/>
                                    </a:a>
                                    <a:da name="RANGE">
                                        <a:v>Rev1</a:v>
                                        <a:v>Rev2</a:v>
                                    </a:da>
                                </v:var>
                                <v:var name="A53CoreFlavour" type="ENUMERATION">
                                    <a:a name="LABEL" value="A53 Core Flavour"/>
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:
                                                <html>
                                                    <p>A53CoreFlavour</p>
                                                    <p>Configures the A53 CORE FLAVOUR.</p>
                                                    <p>1.0GHZ Core frequency</p>
                                                    <p>1.1GHZ Core frequency</p>
                                                    <p>1.3GHZ Core frequency</p>
                                                    <p>Note: Implementation Specific Parameter. <p/>
                                                </html>
                                            ]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v class="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v class="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:859399b9-f3b8-45e1-3a54-07dd73e76cc4"/>
                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.SysClock.A53_CORE_CLK.Default')"/>
                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.SysClock.A53_CORE_CLK.List')"/>
                                </v:var>

                                <!-- /** @implements McuEcucPartitionRef_Object */ -->
                                <v:lst name="McuEcucPartitionRef" type="">
                                  <v:ref name="McuEcucPartitionRef" type="REFERENCE">
                                    <a:a name="DESC">
                                     <a:v>
                                        <![CDATA[EN:
                                            <html>
                                                Maps the MCU driver to zero or multiple ECUC partitions to make the
                                                modules API available in this partition. <p/>
                                                Tags: atp.Status=draft<p/>
                                                Note: Implementation Specific Parameter.<p/>
                                            </html>
                                        ]]>
                                     </a:v>
                                    </a:a>
                                    <a:a name="LABEL" value="McuEcucPartitionRef" />
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                      <icc:v class="PreCompile">VariantPreCompile</icc:v>
                                      <icc:v class="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                    <a:a name="SCOPE" value="ECU"/>
                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                    <a:a name="POSTBUILDVARIANTMULTIPLICITY" value="true"/>
                                    <a:a name="UUID" value="ECUC:f8d45bee-2afd-48db-a0ef-f1cf3d47cd8b"/>
                                    <a:a name="INVALID" type="XPath">
                                      <a:tst expr="node:empty(.)"
                                             true="Field is empty (Suggestion: Select an EcucPartition reference)."/>
                                      <a:tst expr="not(node:refvalid(.))"
                                             true="Invalid EcucPartition reference (Suggestion: Select an EcucPartition reference)."/>
                                    </a:a>
                                    <a:da name="REF" value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/EcuC/EcucPartitionCollection/EcucPartition"/>
                                  </v:ref>
                                </v:lst>

                                <v:ctr name="McuControlledClocksConfiguration" type="IDENTIFIABLE">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                This container contains pre-compile options for all the clock sources under MCU control. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="UUID" value="ECUC:2634afa2-e3c1-4e96-bf1c-e1c2d16761db"/>

                                    <v:var name="McuFxoscUnderMcuControl" type="BOOLEAN">
                                        <a:a name="DESC">
                                            <a:v>
                                                <![CDATA[EN:<html>
                                                    Check this if FXOSC is under MCU control in any of the Mcu Clock Setting Configurations
                                                    (i.e. at least one McuClockSettingConfig/*/McuFXOSC/McuFxoscUnderMcuControl = 'true'). <br />
                                                    #define MCU_FXOSC_UNDER_MCU_CONTROL (STD_ON)/(STD_OFF) will be generated in Mcu_Cfg.h file.<br />
                                                    Note: Implementation Specific Parameter.
                                                </html>]]>
                                            </a:v>
                                        </a:a>
                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                            <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                        </a:a>
                                        <a:a name="LABEL" value="FXOSC Under MCU Control"/>
                                        <a:a name="ORIGIN" value="NXP"/>
                                        <a:a name="SCOPE" value="LOCAL"/>
                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                        <a:a name="UUID" value="ECUC:fa43da28-01e8-4ca1-aeca-2cd7a5d2c325"/>
                                        <a:da name="DEFAULT" value="true"/>
                                    </v:var>

                                    <!-- /** @implements McuPll0UnderMcuControl_Object */ -->
                                    <v:var name="McuPll0UnderMcuControl" type="BOOLEAN">
                                        <a:a name="DESC">
                                            <a:v>
                                                <![CDATA[EN:<html>
                                                    Check this if CorePLL is under MCU control in any of the Mcu Clock Setting Configurations
                                                    (i.e. at least one McuClockSettingConfig/*/McuPll_0/McuPLLUnderMcuControl = 'true'). <br />
                                                    #define MCU_PLL0_UNDER_MCU_CONTROL (STD_ON)/(STD_OFF) will be generated in Mcu_Cfg.h file.<br />
                                                    Note: Implementation Specific Parameter.
                                                </html>]]>
                                            </a:v>
                                        </a:a>
                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                            <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                        </a:a>
                                        <a:a name="LABEL" value="CorePLL Under MCU Control"/>
                                        <a:a name="ORIGIN" value="NXP"/>
                                        <a:a name="SCOPE" value="LOCAL"/>
                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                        <a:a name="UUID" value="ECUC:fa43da28-01e8-4ca1-aeca-2cd7e6cd8165"/>
                                        <a:da name="DEFAULT" value="true"/>
                                        <a:da name="INVALID" type="XPath">
                                            <a:tst expr="
                                                (
                                                    (node:fallback(., 'false') = 'true') and
                                                    (node:fallback(../../McuNoPll, 'true') = 'true')
                                                )"
                                                   true="CorePLL cannot be under MCU control if McuNoPll is enabled (i.e. McuGeneralConfiguration/McuNoPll = 'true')."/>
                                        </a:da>
                                    </v:var>

                                    <!-- /** @implements McuPll1UnderMcuControl_Object */ -->
                                    <v:var name="McuPll1UnderMcuControl" type="BOOLEAN">
                                        <a:a name="DESC">
                                            <a:v>
                                                <![CDATA[EN:<html>
                                                    Check this if PeriphPLL is under MCU control in any of the Mcu Clock Setting Configurations
                                                    (i.e. at least one McuClockSettingConfig/*/McuPll_1/McuPLLUnderMcuControl = 'true'). <br />
                                                    #define MCU_PLL1_UNDER_MCU_CONTROL (STD_ON)/(STD_OFF) will be generated in Mcu_Cfg.h file.<br />
                                                    Note: Implementation Specific Parameter.
                                                </html>]]>
                                            </a:v>
                                        </a:a>
                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                            <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                        </a:a>
                                        <a:a name="LABEL" value="PeriphPLL Under MCU Control"/>
                                        <a:a name="ORIGIN" value="NXP"/>
                                        <a:a name="SCOPE" value="LOCAL"/>
                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                        <a:a name="UUID" value="ECUC:fa43da28-01e8-4ca1-aeca-2c7db3cd8165"/>
                                        <a:da name="DEFAULT" value="true"/>
                                        <a:da name="INVALID" type="XPath">
                                            <a:tst expr="
                                                (
                                                    (node:fallback(., 'false') = 'true') and
                                                    (node:fallback(../../McuNoPll, 'true') = 'true')
                                                )"
                                                   true="PeriphPLL cannot be under MCU control if McuNoPll is enabled (i.e. McuGeneralConfiguration/McuNoPll = 'true')."/>
                                        </a:da>
                                    </v:var>

                                    <!-- /** @implements McuPll2UnderMcuControl_Object */ -->
                                    <v:var name="McuPll2UnderMcuControl" type="BOOLEAN">
                                        <a:a name="DESC">
                                            <a:v>
                                                <![CDATA[EN:<html>
                                                    Check this if PeriphPLL is under MCU control in any of the Mcu Clock Setting Configurations
                                                    (i.e. at least one McuClockSettingConfig/*/McuPll_2/McuPLLUnderMcuControl = 'true'). <br />
                                                    #define MCU_PLL2_UNDER_MCU_CONTROL (STD_ON)/(STD_OFF) will be generated in Mcu_Cfg.h file.<br />
                                                    Note: Implementation Specific Parameter.
                                                </html>]]>
                                            </a:v>
                                        </a:a>
                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                            <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                        </a:a>
                                        <a:a name="LABEL" value="ACCEL PLL Under MCU Control"/>
                                        <a:a name="ORIGIN" value="NXP"/>
                                        <a:a name="SCOPE" value="LOCAL"/>
                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                        <a:a name="UUID" value="ECUC:fa42ca28-01e8-4ca1-aeca-2c7db3cd8165"/>
                                        <a:da name="DEFAULT" value="true"/>
                                        <a:da name="INVALID" type="XPath">
                                            <a:tst expr="
                                                (
                                                    (node:fallback(., 'false') = 'true') and
                                                    (node:fallback(../../McuNoPll, 'true') = 'true')
                                                )"
                                                   true="ACCEL PLL cannot be under MCU control if McuNoPll is enabled (i.e. McuGeneralConfiguration/McuNoPll = 'true')."/>
                                        </a:da>
                                    </v:var>

                                    <!-- /** @implements McuPll3UnderMcuControl_Object */ -->
                                    <v:var name="McuPll3UnderMcuControl" type="BOOLEAN">
                                        <a:a name="DESC">
                                            <a:v>
                                                <![CDATA[EN:<html>
                                                    Check this if PeriphPLL is under MCU control in any of the Mcu Clock Setting Configurations
                                                    (i.e. at least one McuClockSettingConfig/*/McuPll_3/McuPLLUnderMcuControl = 'true'). <br />
                                                    #define MCU_PLL3_UNDER_MCU_CONTROL (STD_ON)/(STD_OFF) will be generated in Mcu_Cfg.h file.<br />
                                                    Note: Implementation Specific Parameter.
                                                </html>]]>
                                            </a:v>
                                        </a:a>
                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                            <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                        </a:a>
                                        <a:a name="LABEL" value="DDR PLL Under MCU Control"/>
                                        <a:a name="ORIGIN" value="NXP"/>
                                        <a:a name="SCOPE" value="LOCAL"/>
                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                        <a:a name="UUID" value="ECUC:fa43d7b8-01e8-4ca1-aeca-2c7db3cd8165"/>
                                        <a:da name="DEFAULT" value="true"/>
                                        <a:da name="INVALID" type="XPath">
                                            <a:tst expr="
                                                (
                                                    (node:fallback(., 'false') = 'true') and
                                                    (node:fallback(../../McuNoPll, 'true') = 'true')
                                                )"
                                                   true="DDR PLL cannot be under MCU control if McuNoPll is enabled (i.e. McuGeneralConfiguration/McuNoPll = 'true')."/>
                                        </a:da>
                                    </v:var>

                                    <!-- /** @implements McuDfs0UnderMcuControl_Object */ -->
                                    <v:var name="McuDfs0UnderMcuControl" type="BOOLEAN">
                                        <a:a name="DESC">
                                            <a:v>
                                                <![CDATA[EN:<html>
                                                    Check this if CoreDFS is under MCU control in any of the Mcu Clock Setting Configurations
                                                    (i.e. at least one McuClockSettingConfig/*/McuCoreDfs/McuDfs_x/McuDFSUnderMcuControl = 'true'). <br />
                                                    #define MCU_DFS0_UNDER_MCU_CONTROL (STD_ON)/(STD_OFF) will be generated in Mcu_Cfg.h file.<br />
                                                    Note: Implementation Specific Parameter.
                                                </html>]]>
                                            </a:v>
                                        </a:a>
                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                            <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                        </a:a>
                                        <a:a name="LABEL" value="CoreDFS Under MCU Control"/>
                                        <a:a name="ORIGIN" value="NXP"/>
                                        <a:a name="SCOPE" value="LOCAL"/>
                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                        <a:a name="UUID" value="ECUC:fa43da28-01e8-4ca1-aeca-2c7db1dc1865"/>
                                        <a:da name="DEFAULT" value="true"/>
                                        <a:da name="INVALID" type="XPath">
                                            <a:tst expr="
                                                (
                                                    (node:fallback(., 'false') = 'true') and
                                                    (node:fallback(../../McuNoPll, 'true') = 'true')
                                                )"
                                                   true="CoreDFS cannot be under MCU control if McuNoPll is enabled (i.e. McuGeneralConfiguration/McuNoPll = 'true')."/>
                                        </a:da>
                                    </v:var>

                                    <!-- /** @implements McuDfs1UnderMcuControl_Object */ -->
                                    <v:var name="McuDfs1UnderMcuControl" type="BOOLEAN">
                                        <a:a name="DESC">
                                            <a:v>
                                                <![CDATA[EN:<html>
                                                    Check this if PeriphDFS is under MCU control in any of the Mcu Clock Setting Configurations
                                                    (i.e. at least one McuClockSettingConfig/*/McuPeriphDfs/McuDfs_x/McuDFSUnderMcuControl = 'true'). <br />
                                                    #define MCU_DFS1_UNDER_MCU_CONTROL (STD_ON)/(STD_OFF) will be generated in Mcu_Cfg.h file.<br />
                                                    Note: Implementation Specific Parameter.
                                                </html>]]>
                                            </a:v>
                                        </a:a>
                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                            <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                        </a:a>
                                        <a:a name="LABEL" value="PeriphDFS Under MCU Control"/>
                                        <a:a name="ORIGIN" value="NXP"/>
                                        <a:a name="SCOPE" value="LOCAL"/>
                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                        <a:a name="UUID" value="ECUC:fa43da28-01e8-4ca1-aeca-2cd7c5dc1765"/>
                                        <a:da name="DEFAULT" value="true"/>
                                        <a:da name="INVALID" type="XPath">
                                            <a:tst expr="
                                                (
                                                    (node:fallback(., 'false') = 'true') and
                                                    (node:fallback(../../McuNoPll, 'true') = 'true')
                                                )"
                                                   true="PeriphDFS cannot be under MCU control if McuNoPll is enabled (i.e. McuGeneralConfiguration/McuNoPll = 'true')."/>
                                        </a:da>
                                    </v:var>
                                </v:ctr>
                            </v:ctr>

                            <v:ctr name="McuDebugConfiguration" type="IDENTIFIABLE">
                                <a:a name="DESC">
                                    <a:v>
                                        <![CDATA[EN:<html>
                                            This container contains option for non-ASR APIs used for debug or extra-implementation. <br />
                                            Note: Implementation Specific Parameter.
                                        </html>]]>
                                    </a:v>
                                </a:a>
                                <a:a name="UUID" value="ECUC:2634afa2-e3c1-4e96-bf1c-e1c2d61861fc"/>

                                <!-- /** @implements McuDisableDemReportErrorStatus_Object */ -->
                                <v:var name="McuDisableDemReportErrorStatus" type="BOOLEAN">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Enable/Disable the API for reporting the Dem Error. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="LABEL" value="Mcu Disable Production Error Reporting"/>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:fdf29f79-dbae-4cd7-bbf7-c0941851a05e"/>
                                    <a:da name="DEFAULT" value="false"/>
                                </v:var>

                                <v:var name="McuGetSystemStateApi" type="BOOLEAN">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Enable/Disable the API for System state information: Mcu_GetSystem_State(). <br />
                                                Information extracted from SSCM hw IP. <br />
                                                Note: Implementation Specific Parameter. <br />
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="LABEL" value="Mcu Get System State API"/>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="UUID" value="ECUC:90ecc49c-a22b-4391-9a58-8d5fcdcd4fc7"/>
                                    <a:da name="DEFAULT" value="false"/>
                                    <a:da name="READONLY" value="true"/>
                                </v:var>

                                <v:var name="McuGetPowerModeStateApi" type="BOOLEAN">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Enable/Disable the API for MC_ME state: Mcu_GetPowerMode_State(). <br />
                                                Get information regarding current power mode, enabled clocks, etc (content of ME_GS register). <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="LABEL" value="Mcu Get PowerMode State API"/>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="UUID" value="ECUC:a43c3aa1-3bd9-4a8e-aefc-bddf5d9508db"/>
                                    <a:da name="DEFAULT" value="false"/>
                                    <a:da name="READONLY" value="true"/>
                                </v:var>

                                <v:var name="McuGetPowerDomainApi" type="BOOLEAN">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Enable/Disable the API for MC_PCU state: Mcu_GetPowerDomain_Status(). <br />
                                                Get information from PCU_STAT register. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="LABEL" value="Mcu Get Power Domain State API"/>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="UUID" value="ECUC:6e3cba6f-d704-4fea-9611-fc001713d1da"/>
                                    <a:da name="DEFAULT" value="false"/>
                                    <a:da name="READONLY" value="true"/>
                                </v:var>

                                <v:var name="McuSscmGetMemConfigApi" type="BOOLEAN">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Enable/Disable the API for Mcu_SscmGetMemConfig(). <br />
                                                Get information from SSCM_MEMCONFIG register. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="LABEL" value="Mcu Sscm Get MemConfig API"/>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="UUID" value="ECUC:1358731c-e26e-4134-b80d-a08d078c51a4"/>
                                    <a:da name="DEFAULT" value="false"/>
                                    <a:da name="READONLY" value="true"/>
                                </v:var>

                                <v:var name="McuSscmGetStatusApi" type="BOOLEAN">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Enable/Disable the API for Mcu_SscmGetStatus(). <br />
                                                Get information from SSCM_STATUS register. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="LABEL" value="Mcu Sscm Get Status API"/>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="UUID" value="ECUC:f7bb3084-cf7b-40e5-b705-8781f2ac9b85"/>
                                    <a:da name="DEFAULT" value="false"/>
                                    <a:da name="READONLY" value="true"/>
                                </v:var>

                                <v:var name="McuSscmGetUoptApi" type="BOOLEAN">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Enable/Disable the API for Mcu_SscmGetUopt(). <br />
                                                Get information from SSCM_UOPT register. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="LABEL" value="Mcu Sscm Get Uopt API"/>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="UUID" value="ECUC:279ac3de-275b-44b3-af21-5718275e277d"/>
                                    <a:da name="DEFAULT" value="false"/>
                                    <a:da name="READONLY" value="true"/>
                                </v:var>

                                <v:var name="McuGetMidrStructureApi" type="BOOLEAN">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Enable/Disable the API for Mcu_GetMidrStructure(). <br />
                                                Get information from SIUL2 MIDRn registers. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="LABEL" value="Mcu Get MIDRn API"/>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="UUID" value="ECUC:3b7d0da5-6a6c-4c9f-bfbb-7bead7870b5f"/>
                                    <a:da name="DEFAULT" value="false"/>
                                    <a:da name="READONLY" value="false"/>
                                </v:var>

                                <v:var name="McuDisableCmuApi" type="BOOLEAN">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Enable/Disable the API for disabling the clock monitoring unit. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="LABEL" value="Mcu Disable CMU API"/>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="UUID" value="ECUC:a42a1cde-ec51-44ba-9d88-0c5142cbb5fc"/>
                                    <a:da name="DEFAULT" value="false"/>
                                </v:var>

                                <v:var name="McuEmiosConfigureGprenApi" type="BOOLEAN">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Enable/Disable the API for Mcu_EmiosConfigureGpren(). <br />
                                                Changes the GPREN bit of the EMIOS_MCR register of an addressed eMIOS instance. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="LABEL" value="Mcu Emios Configure GPREN API"/>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="UUID" value="ECUC:11d5f12b-197e-471b-9ee2-c9af2af5ffb1"/>
                                    <a:da name="DEFAULT" value="false"/>
                                    <a:da name="READONLY" value="true"/>
                                </v:var>

                                <v:var name="McuGetClockFrequencyApi" type="BOOLEAN">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Enable/Disable the API for Mcu_GetClockFrequency(). <br />
                                                Return the frequency of a given clock. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="LABEL" value="Mcu Get Clock Frequency API"/>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="UUID" value="ECUC:11d5f12b-197e-471b-9ee2-c9af2af5ff32"/>
                                    <a:da name="DEFAULT" value="false"/>
                                    <a:da name="READONLY" value="false"/>
                                </v:var>

                            </v:ctr>

                            <v:ctr name="McuCoreControlConfiguration" type="IDENTIFIABLE">
                                <a:a name="DESC">
                                    <a:v>
                                        <![CDATA[EN:<html>
                                            This configuration holds global control over the partition specific core control features.<br />
                                            This container is implementation specific.<br />
                                        </html>]]>
                                    </a:v>
                                </a:a>
                                <a:a name="UUID" value="ECUC:5f440d84-b54c-4ec9-acff-64b302aef45c"/>

                                <v:var name="McuCoreBootAddressControl" type="BOOLEAN">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Global ENABLE / DISABLE of the code that writes the PRTNm_COREn_ADDR registers. <br />
                                                These registers give the boot addresses for the cores in their corresponding partitions. <br />
                                                If this check box is ON, the registers will be written during each Mcu_SetMode() call. <br />
                                                #define MCU_CONFIGURE_CADDRN (STD_ON)/(STD_OFF) will be generated in Mcu_Cfg.h file. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="LABEL" value="Core Boot Address Control"/>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:f959e43f-7aa1-4623-b5dd-b4868f2944fd"/>
                                    <a:da name="DEFAULT" value="false"/>
                                </v:var>
                            </v:ctr>
                            <!-- /** @implements  McuPublishedInformation_Object */ -->
                            <v:ctr name="McuPublishedInformation" type="IDENTIFIABLE">
                                <a:a name="DESC">
                                    <a:v>
                                        <![CDATA[EN:<html>
                                            Container holding all MCU specific published information parameters. <br />
                                        </html>]]>
                                    </a:v>
                                </a:a>
                                <a:a name="UUID" value="ECUC:2c646e7d-747c-457d-8b7b-26fb61c052e2"/>
                                <v:lst name="McuResetReasonConf" type="MAP">
                                    <a:da name="MIN" value="1"/>

                                    <!-- /** @implements  McuResetReasonConf_Object */ -->
                                    <v:ctr name="McuResetReasonConf" type="IDENTIFIABLE">
                                        <a:a name="DESC">
                                            <a:v>
                                                <![CDATA[EN:<html>
                                                    This container contains the configuration for the different type of reset reason that can be retrieved from Mcu_GetResetReason Api. <br />
                                                </html>]]>
                                            </a:v>
                                        </a:a>
                                        <a:a name="UUID" value="ECUC:247f42f0-055a-404e-aba2-130d0887fffc"/>
                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                            <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                                            <icc:v mclass="PreCompile">VariantPostBuild</icc:v>
                                        </a:a>

                                        <!-- /** @implements McuResetReason_Object */ -->
                                        <v:var name="McuResetReason" type="INTEGER_LABEL">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        The parameter represents the different type of reset that a Micro supports. This parameter is referenced by the parameter EcuMResetReason in the ECU State manager module. <br />
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                            <a:a name="SCOPE" value="ECU"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:b58895cf-c4c7-4d07-a0be-7180c8b57a5e"/>
                                            <a:da name="DEFAULT" type="XPath" expr="string(text:split('0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28')[var:set('idx',position()) and
                                            normalize-space(text:split('MCU_POWER_ON_RESET MCU_NC_SPD_RST_RESET MCU_FCCU_FTR_RESET MCU_STCU_URF_RESET MCU_MC_RGM_FRE_RESET MCU_FXOSC_FAIL_RESET MCU_CORE_LOL_RESET MCU_PERIPH_LOL_RESET MCU_DDR_LOL_RESET MCU_ACC_LOL_RESET MCU_XBAR_DIV3_CLK_FAIL_RESET MCU_HSE_LC_RST_RESET MCU_HSE_SNVS_RST_RESET MCU_HSE_SWT_RST_RESET MCU_SW_DEST_RESET MCU_DEBUG_DEST_RESET MCU_EXT_RESET MCU_FCCU_RST_RESET MCU_ST_DONE_RESET MCU_SWT0_RST_RESET MCU_HSE_RAM_ECC_RST_RESET MCU_HSE_BOOT_ERR_RST_RESET MCU_HSE_CORE_LOCK_RST_RESET MCU_SW_FUNC_RESET MCU_DEBUG_FUNC_RESET MCU_WAKEUP_REASON MCU_NO_RESET_REASON MCU_MULTIPLE_RESET_REASON MCU_RESET_UNDEFINED')[position() = $idx]) = node:when((node:fallback(node:current()/.., 'EPD_MODE') = 'EPD_MODE'), 'MCU_POWER_ON_RESET', string(name(node:fallback(node:current()/.., ''))))])"/>
                                            <a:da name="INVALID" type="Range">
                                                <a:tst expr="&lt;=255"/>
                                                <a:tst expr="&gt;=0"/>
                                            </a:da>
                                        </v:var>
                                    </v:ctr>
                                </v:lst>
                            </v:ctr>

                            <!-- /** @implements CommonPublishedInformation_Object */ -->
                            <v:ctr name="CommonPublishedInformation" type="IDENTIFIABLE">
                                <a:a name="DESC">
                                    <a:v>
                                        <![CDATA[EN:<html>
                                            Common container, aggregated by all modules.
                                            It contains published information about vendor and versions.
                                        </html>]]>
                                    </a:v>
                                </a:a>
                                <a:a name="UUID" value="ECUC:acb0123b-4400-4cf6-9048-3b802ed2c755"/>

                                <v:var name="ArReleaseMajorVersion" type="INTEGER_LABEL">
                                    <a:a name="LABEL" value="Ar Release Major Version" />
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Major version number of AUTOSAR specification on which the appropriate implementation is based on.  <br />
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PublishedInformation">VariantPostBuild</icc:v>
                                        <icc:v vclass="PublishedInformation">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:1a61b436-b723-47b1-8f4d-b568b3c77bce"/>
                                    <a:da name="DEFAULT" value="4"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&gt;=4"/>
                                        <a:tst expr="&lt;=4"/>
                                    </a:da>
                                </v:var>

                                <v:var name="ArReleaseMinorVersion" type="INTEGER_LABEL">
                                    <a:a name="LABEL" value="Ar Release Minor Version" />
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Minor version number of AUTOSAR specification on which the appropriate implementation is based on.  <br />
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PublishedInformation">VariantPostBuild</icc:v>
                                        <icc:v vclass="PublishedInformation">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:6b04c7cc-fcf4-40d5-b589-579f3b690bca"/>
                                    <a:da name="DEFAULT" value="4"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&gt;=4"/>
                                        <a:tst expr="&lt;=4"/>
                                    </a:da>
                                </v:var>

                                <v:var name="ArReleaseRevisionVersion" type="INTEGER_LABEL">
                                    <a:a name="LABEL" value="Ar Release Revision Version" />
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Revision version number of AUTOSAR specification on which the appropriate implementation is based on.  <br />
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PublishedInformation">VariantPostBuild</icc:v>
                                        <icc:v vclass="PublishedInformation">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:856eb3f2-36bf-4d6f-b404-6a873fbbe0e7"/>
                                    <a:da name="DEFAULT" value="0"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&gt;=0"/>
                                        <a:tst expr="&lt;=0"/>
                                    </a:da>
                                </v:var>

                                <v:var name="ModuleId" type="INTEGER_LABEL">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Module ID of this module from Module List.
                                                Note: Implementation Specific Parameter
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PublishedInformation">VariantPostBuild</icc:v>
                                        <icc:v vclass="PublishedInformation">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:c8d8c033-3334-459e-b45c-705a3ff4787d"/>
                                    <a:da name="DEFAULT" value="101"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&gt;=101"/>
                                        <a:tst expr="&lt;=101"/>
                                    </a:da>
                                </v:var>

                                <v:var name="SwMajorVersion" type="INTEGER_LABEL">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Major version number of the vendor specific implementation of the module. The numbering is vendor specific.
                                                Note: Implementation Specific Parameter
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PublishedInformation">VariantPostBuild</icc:v>
                                        <icc:v vclass="PublishedInformation">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:9dd0879c-f26b-4ea9-bf0e-013bfa0f3584"/>
                                    <a:da name="DEFAULT" value="4"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&gt;=4"/>
                                        <a:tst expr="&lt;=4"/>
                                    </a:da>
                                </v:var>

                                <v:var name="SwMinorVersion" type="INTEGER_LABEL">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Minor version number of the vendor specific implementation of the module. The numbering is vendor specific.
                                                Note: Implementation Specific Parameter
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PublishedInformation">VariantPostBuild</icc:v>
                                        <icc:v vclass="PublishedInformation">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:18ede1df-ceac-4080-a4c8-1eb4cf4cd276"/>
                                    <a:da name="DEFAULT" value="0"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&gt;=0"/>
                                        <a:tst expr="&lt;=0"/>
                                    </a:da>
                                </v:var>

                                <v:var name="SwPatchVersion" type="INTEGER_LABEL">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Patch level version number of the vendor specific implementation of the module. The numbering is vendor specific.
                                                Note: Implementation Specific Parameter
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PublishedInformation">VariantPostBuild</icc:v>
                                        <icc:v vclass="PublishedInformation">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:f5563407-a9bd-4cae-810d-cf4327c59a88"/>
                                    <a:da name="DEFAULT" value="0"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&gt;=0"/>
                                        <a:tst expr="&lt;=0"/>
                                    </a:da>
                                </v:var>

                                <v:var name="VendorApiInfix" type="STRING_LABEL">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                             In driver modules which can be instantiated several times on a single ECU, BSW00347 requires that the name of APIs is extended by the VendorId and a vendor specific name.
                                               This parameter is used to specify the vendor specific name. In total, the Implementation specific name is generated as follows:
                                               &lt;ModuleName&gt;_&lt;VendorId&gt;_&lt;VendorApiInfix&gt;&lt;Api name from SWS&gt;.
                                               E.g. assuming that the VendorId of the implementor is 123 and the implementer chose a VendorApiInfix of "v11r456" a api name
                                               Can_Write defined in the SWS will translate to Can_123_v11r456Write.
                                               This parameter is mandatory for all modules with upper multiplicity &gt;
                                               1. It shall not be used for modules with upper multiplicity =1.
                                               Note: Implementation Specific Parameter
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PublishedInformation">VariantPostBuild</icc:v>
                                        <icc:v vclass="PublishedInformation">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:dd6060f6-7040-4479-a64c-802197581a72"/>
                                    <a:da name="DEFAULT" value=""/>
                                </v:var>

                                <v:var name="VendorId" type="INTEGER_LABEL">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Vendor ID of the dedicated implementation of this module according to the AUTOSAR vendor list.
                                                Note: Implementation Specific Parameter
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PublishedInformation">VariantPostBuild</icc:v>
                                        <icc:v vclass="PublishedInformation">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:ccb6488d-97c2-478c-bcc7-3146549af0ef"/>
                                    <a:da name="DEFAULT" value="43"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&gt;=43"/>
                                        <a:tst expr="&lt;=43"/>
                                    </a:da>
                                </v:var>
                            </v:ctr>


                            <!-- /** @implements McuModuleConfiguration_Object */ -->
                            <v:ctr name="McuModuleConfiguration" type="IDENTIFIABLE">
                                <a:a name="DESC">
                                    <a:v>
                                        <![CDATA[EN:<html>
                                            This container contains the configuration for the MCU driver.
                                        </html>]]>
                                    </a:v>
                                </a:a>
                                <a:a name="UUID" value="ECUC:cd185304-074e-4397-8451-4704f1dc38fc"/>

                                <!-- /** @implements McuNumberOfMcuModes_Object */ -->
                                <v:var name="McuNumberOfMcuModes" type="INTEGER">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                This parameter shall represent the number of Modes available for the MCU (from "McuModeSettingConf" list). <br />
                                                CalculationFormula = Number of configured "McuModeSettingConf". <br />
                                                This parameter is not used.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                    <a:a name="LABEL" value="Mcu Number of Mode Settings"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:06fdcdfb-522d-4b35-bd5c-b377b9b373e1"/>
                                    <a:da name="DEFAULT" type="XPath">
                                        <a:tst expr="num:i( count( node:fallback( ../McuModeSettingConf/*, num:i(1) ) ) )"/>
                                    </a:da>
                                    <a:da name="RANGE" type="XPath">
                                        <a:tst expr="node:fallback( ., num:i(1)) = num:i( count( node:fallback( ../McuModeSettingConf/*, num:i(1))) )"
                                            false="The value for the McuNumberOfMcuModes must match with the McuModeSettingConf. For calculating the correct value use the CALCULATE button"/>
                                    </a:da>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=255"/>
                                        <a:tst expr="&gt;=1"/>
                                    </a:da>
                                </v:var>

                                <!-- /** @implements McuRamSectors_Object */ -->
                                <v:var name="McuRamSectors" type="INTEGER">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                This parameter shall represent the number of RAM sectors available for the MCU (from "McuRamSectorSettingConf" list). <br />
                                                CalculationFormula = Number of configured "McuRamSectorSettingConf". <br />
                                                This parameter is not used.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="LABEL" value="Mcu Number of RAM Sectors"/>
                                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                    <a:a name="UUID" value="ECUC:45d0e94c-b26f-46b9-9c42-a5f5da89f2ca"/>
                                    <a:da name="DEFAULT" type="XPath">
                                        <a:tst expr="num:i( count( node:fallback( ../McuRamSectorSettingConf/*, num:i(1))))"/>
                                    </a:da>
                                    <a:da name="RANGE" type="XPath">
                                        <a:tst expr="node:fallback( ., num:i(1)) = num:i( count( node:fallback( ../McuRamSectorSettingConf/*, num:i(1))) )"
                                            false="The value for the McuRamSector must match with the McuRamSectorSettingConf. For calculating the correct value use the CALCULATE button"/>
                                    </a:da>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=4294967295"/>
                                        <a:tst expr="&gt;=0"/>
                                    </a:da>
                                </v:var>

                                <!-- /** @implements McuResetSetting_Object */ -->
                                <v:var name="McuResetSetting" type="INTEGER">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                This parameters applies to the function Mcu_PerformReset(), which performs a microcontroller reset using the hardware feature of the microcontroller. <br />
                                                 Note: This parameter is not used by the current Implementation. <br />
                                                Software Reset occurs when Mcu_PerformReset() function is called. <br />
                                                This parameter is not used.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v class="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v class="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="OPTIONAL" value="true"/>
                                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="LABEL" value="Reset Setting"/>
                                    <a:a name="UUID" value="ECUC:72a01813-8739-43f1-9d02-87a0ab579374"/>
                                    <a:da name="DEFAULT" value="1"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=255"/>
                                        <a:tst expr="&gt;=1"/>
                                    </a:da>
                                </v:var>

                                <v:var name="McuCrystalFrequencyHz" type="FLOAT">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Crystal Frequency or External Reference Frequency [Hz]. <br />
                                                For S32G2XX, the valid range is [20 ... 40] MHz. <br />
                                                For S32R45, the valid value is 40 MHz. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                    <a:a name="LABEL" value="External Crystal Frequency [Hz]"/>
                                    <a:a name="UUID" value="ECUC:cb7e14da-da73-4b07-9487-a8c17d4a5baf"/>
                                    <a:da name="DEFAULT" value="40000000"/>
                                    <a:a name="EDITABLE" type="XPath">
                                        <a:tst expr="(text:tolower(text:contains(ecu:list('MCU.XTAL.ChangeableSupport'),'true'))='true')"/>
                                    </a:a>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=ecu:get('MCU.FXOSC.Limits.XTAL.High')"/>
                                        <a:tst expr="&gt;=ecu:get('MCU.FXOSC.Limits.XTAL.Low')"/>
                                    </a:da>
                                </v:var>

                                <v:var name="McuExternalPAD_RTC_EXT_REF_CLK_FrequencyHz" type="FLOAT">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                RTC external reference clock (RTC_EXT_REF_CLK) [Hz]. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                    <a:a name="LABEL" value="RTC External Reference Frequency [Hz]"/>
                                    <a:a name="UUID" value="ECUC:729554c6-f143-4644-924b-a9d6984489eb"/>
                                    <a:a name="VISIBLE" type="XPath">
                                        <a:tst expr="contains(ecu:get('MCU.ExtClock.List'), 'RTC_EXT_REF_CLK')" />
                                    </a:a>
                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.ExtClock.Limits.RTC_EXT_REF_CLK.Default')"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=ecu:get('MCU.ExtClock.Limits.RTC_EXT_REF_CLK.High')"/>
                                        <a:tst expr="&gt;=ecu:get('MCU.ExtClock.Limits.RTC_EXT_REF_CLK.Low')"/>
                                    </a:da>
                                </v:var>

                                <v:var name="McuExternalPAD_FTM_0_EXT_REF_CLK_FrequencyHz" type="FLOAT">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                FTM0 external reference clock (FTM_0_EXT_REF_CLK) [Hz]. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                    <a:a name="LABEL" value="FTM0 External Reference Frequency [Hz]"/>
                                    <a:a name="UUID" value="ECUC:729554c6-f143-4644-924a-a9d6984489eb"/>
                                    <a:a name="VISIBLE" type="XPath">
                                        <a:tst expr="contains(ecu:get('MCU.ExtClock.List'), 'FTM_0_EXT_REF_CLK')" />
                                    </a:a>
                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.ExtClock.Limits.FTM_0_EXT_REF_CLK.Default')"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=ecu:get('MCU.ExtClock.Limits.FTM_0_EXT_REF_CLK.High')"/>
                                        <a:tst expr="&gt;=ecu:get('MCU.ExtClock.Limits.FTM_0_EXT_REF_CLK.Low')"/>
                                    </a:da>
                                </v:var>

                                <v:var name="McuExternalPAD_FTM_1_EXT_REF_CLK_FrequencyHz" type="FLOAT">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                FTM1 external reference clock (FTM_1_EXT_REF_CLK) [Hz]. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                    <a:a name="LABEL" value="FTM1 External Reference Frequency [Hz]"/>
                                    <a:a name="UUID" value="ECUC:729544c6-f1a3-4644-92ca-a9d6984489eb"/>
                                    <a:a name="VISIBLE" type="XPath">
                                        <a:tst expr="contains(ecu:get('MCU.ExtClock.List'), 'FTM_1_EXT_REF_CLK')" />
                                    </a:a>
                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.ExtClock.Limits.FTM_1_EXT_REF_CLK.Default')"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=ecu:get('MCU.ExtClock.Limits.FTM_1_EXT_REF_CLK.High')"/>
                                        <a:tst expr="&gt;=ecu:get('MCU.ExtClock.Limits.FTM_1_EXT_REF_CLK.Low')"/>
                                    </a:da>
                                </v:var>

                                <v:var name="McuExternalPAD_GMAC_EXT_TS_CLK_FrequencyHz" type="FLOAT">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Ethernet timestamp clock (GMAC_EXT_TS_CLK) Reference Frequency [Hz]. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                    <a:a name="LABEL" value="GMAC_EXT_TS_CLK External Reference Frequency [Hz]"/>
                                    <a:a name="UUID" value="ECUC:72954dc6-f1aa-4644-92ca-a9d8953351ac"/>
                                    <a:a name="VISIBLE" type="XPath">
                                        <a:tst expr="contains(ecu:get('MCU.ExtClock.List'), 'GMAC_EXT_TS_CLK')" />
                                    </a:a>
                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.ExtClock.Limits.GMAC_0_EXT_TS_CLK.Default')"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=ecu:get('MCU.ExtClock.Limits.GMAC_0_EXT_TS_CLK.High')"/>
                                        <a:tst expr="&gt;=ecu:get('MCU.ExtClock.Limits.GMAC_0_EXT_TS_CLK.Low')"/>
                                    </a:da>
                                </v:var>

                                <v:var name="McuExternalPAD_GMAC_0_EXT_TX_CLK_FrequencyHz" type="FLOAT">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Ethernet TX clock (GMAC_0_EXT_TX_CLK) Reference Frequency [Hz]. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                    <a:a name="LABEL" value="GMAC_0_EXT_TX_CLK External Reference Frequency [Hz]"/>
                                    <a:a name="UUID" value="ECUC:72954dc6-f1aa-4644-92ca-a9d6984489eb"/>
                                    <a:a name="VISIBLE" type="XPath">
                                        <a:tst expr="contains(ecu:get('MCU.ExtClock.List'), 'GMAC_0_EXT_TX_CLK')" />
                                    </a:a>
                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.ExtClock.Limits.GMAC_0_EXT_TX_CLK.Default')"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=ecu:get('MCU.ExtClock.Limits.GMAC_0_EXT_TX_CLK.High')"/>
                                        <a:tst expr="&gt;=ecu:get('MCU.ExtClock.Limits.GMAC_0_EXT_TX_CLK.Low')"/>
                                    </a:da>
                                </v:var>

                                <v:var name="McuExternalPAD_GMAC_0_EXT_RX_CLK_FrequencyHz" type="FLOAT">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Ethernet RX clock (GMAC_0_EXT_RX_CLK) Reference Frequency [Hz]. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                    <a:a name="LABEL" value="GMAC_0_EXT_RX_CLK External Reference Frequency [Hz]"/>
                                    <a:a name="UUID" value="ECUC:72f54dc6-f1aa-46b4-92ca-a9d6984489eb"/>
                                    <a:a name="VISIBLE" type="XPath">
                                        <a:tst expr="contains(ecu:get('MCU.ExtClock.List'), 'GMAC_0_EXT_RX_CLK')" />
                                    </a:a>
                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.ExtClock.Limits.GMAC_0_EXT_RX_CLK.Default')"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=ecu:get('MCU.ExtClock.Limits.GMAC_0_EXT_RX_CLK.High')"/>
                                        <a:tst expr="&gt;=ecu:get('MCU.ExtClock.Limits.GMAC_0_EXT_RX_CLK.Low')"/>
                                    </a:da>
                                </v:var>

                                <v:var name="McuExternalPAD_GMAC_0_EXT_REF_CLK_FrequencyHz" type="FLOAT">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Ethernet RMII REF Clock (GMAC_0_EXT_REF_CLK) Reference Frequency [Hz]. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                    <a:a name="LABEL" value="GMAC_0_EXT_REF_CLK External Reference Frequency [Hz]"/>
                                    <a:a name="UUID" value="ECUC:76f54dc6-f1aa-40b4-92ca-a9c6984489eb"/>
                                    <a:a name="VISIBLE" type="XPath">
                                        <a:tst expr="contains(ecu:get('MCU.ExtClock.List'), 'GMAC_0_EXT_REF_CLK')" />
                                    </a:a>
                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.ExtClock.Limits.GMAC_0_EXT_REF_CLK.Default')"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=ecu:get('MCU.ExtClock.Limits.GMAC_0_EXT_REF_CLK.High')"/>
                                        <a:tst expr="&gt;=ecu:get('MCU.ExtClock.Limits.GMAC_0_EXT_REF_CLK.Low')"/>
                                    </a:da>
                                </v:var>

                                <v:var name="McuExternalPAD_GMAC_1_EXT_TX_CLK_FrequencyHz" type="FLOAT">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Ethernet TX clock (GMAC_1_EXT_TX_CLK) Reference Frequency [Hz]. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                    <a:a name="LABEL" value="GMAC_1_EXT_TX_CLK External Reference Frequency [Hz]"/>
                                    <a:a name="UUID" value="ECUC:72954dc6-f1aa-5664-92ca-a9d6984489eb"/>
                                    <a:a name="VISIBLE" type="XPath">
                                        <a:tst expr="contains(ecu:get('MCU.ExtClock.List'), 'GMAC_1_EXT_TX_CLK')" />
                                    </a:a>
                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.ExtClock.Limits.GMAC_1_EXT_TX_CLK.Default')"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=ecu:get('MCU.ExtClock.Limits.GMAC_1_EXT_TX_CLK.High')"/>
                                        <a:tst expr="&gt;=ecu:get('MCU.ExtClock.Limits.GMAC_1_EXT_TX_CLK.Low')"/>
                                    </a:da>
                                </v:var>

                                <v:var name="McuExternalPAD_GMAC_1_EXT_RX_CLK_FrequencyHz" type="FLOAT">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Ethernet RX clock (GMAC_1_EXT_RX_CLK) Reference Frequency [Hz]. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                    <a:a name="LABEL" value="GMAC_1_EXT_RX_CLK External Reference Frequency [Hz]"/>
                                    <a:a name="UUID" value="ECUC:72f54dc6-f1aa-46b4-92ca-a9d6985555eb"/>
                                    <a:a name="VISIBLE" type="XPath">
                                        <a:tst expr="contains(ecu:get('MCU.ExtClock.List'), 'GMAC_1_EXT_RX_CLK')" />
                                    </a:a>
                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.ExtClock.Limits.GMAC_1_EXT_RX_CLK.Default')"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=ecu:get('MCU.ExtClock.Limits.GMAC_1_EXT_RX_CLK.High')"/>
                                        <a:tst expr="&gt;=ecu:get('MCU.ExtClock.Limits.GMAC_1_EXT_RX_CLK.Low')"/>
                                    </a:da>
                                </v:var>

                                <v:var name="McuExternalPAD_GMAC_1_EXT_REF_CLK_FrequencyHz" type="FLOAT">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Ethernet RMII REF Clock (GMAC_1_EXT_REF_CLK) Reference Frequency [Hz]. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                    <a:a name="LABEL" value="GMAC_1_EXT_REF_CLK External Reference Frequency [Hz]"/>
                                    <a:a name="UUID" value="ECUC:76f54dc6-f1aa-40b4-92ca-bc96984489eb"/>
                                    <a:a name="VISIBLE" type="XPath">
                                        <a:tst expr="contains(ecu:get('MCU.ExtClock.List'), 'GMAC_1_EXT_REF_CLK')" />
                                    </a:a>
                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.ExtClock.Limits.GMAC_1_EXT_REF_CLK.Default')"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=ecu:get('MCU.ExtClock.Limits.GMAC_1_EXT_REF_CLK.High')"/>
                                        <a:tst expr="&gt;=ecu:get('MCU.ExtClock.Limits.GMAC_1_EXT_REF_CLK.Low')"/>
                                    </a:da>
                                </v:var>

                                <v:var name="McuExternalPAD_PFE_MAC_0_EXT_TX_CLK_FrequencyHz" type="FLOAT">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Packet Forwarding Engine Ethernet Port 0 TX clock (PFE_MAC_0_EXT_TX_CLK) Reference Frequency [Hz]. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                    <a:a name="LABEL" value="PFE_MAC_0_EXT_TX_CLK External Reference Frequency [Hz]"/>
                                    <a:a name="UUID" value="ECUC:72354dc6-f1aa-4644-92ca-a2d6984489eb"/>
                                    <a:a name="VISIBLE" type="XPath">
                                        <a:tst expr="contains(ecu:get('MCU.ExtClock.List'), 'PFE_MAC_0_EXT_TX_CLK')" />
                                    </a:a>
                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.ExtClock.Limits.PFE_MAC_0_EXT_TX_CLK.Default')"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=ecu:get('MCU.ExtClock.Limits.PFE_MAC_0_EXT_TX_CLK.High')"/>
                                        <a:tst expr="&gt;=ecu:get('MCU.ExtClock.Limits.PFE_MAC_0_EXT_TX_CLK.Low')"/>
                                    </a:da>
                                </v:var>

                                <v:var name="McuExternalPAD_PFE_MAC_0_EXT_RX_CLK_FrequencyHz" type="FLOAT">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Packet Forwarding Engine Ethernet Port 0 RX clock (PFE_MAC_0_EXT_RX_CLK) Reference Frequency [Hz]. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                    <a:a name="LABEL" value="PFE_MAC_0_EXT_RX_CLK External Reference Frequency [Hz]"/>
                                    <a:a name="UUID" value="ECUC:12f54dc8-f1aa-46b4-92ca-a9d6984489eb"/>
                                    <a:a name="VISIBLE" type="XPath">
                                        <a:tst expr="contains(ecu:get('MCU.ExtClock.List'), 'PFE_MAC_0_EXT_RX_CLK')" />
                                    </a:a>
                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.ExtClock.Limits.PFE_MAC_0_EXT_RX_CLK.Default')"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=ecu:get('MCU.ExtClock.Limits.PFE_MAC_0_EXT_RX_CLK.High')"/>
                                        <a:tst expr="&gt;=ecu:get('MCU.ExtClock.Limits.PFE_MAC_0_EXT_RX_CLK.Low')"/>
                                    </a:da>
                                </v:var>

                                <v:var name="McuExternalPAD_PFE_MAC_0_EXT_REF_CLK_FrequencyHz" type="FLOAT">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Packet Forwarding Engine Ethernet Port 0 RMII REF Clock (PFE_MAC_0_EXT_REF_CLK) Reference Frequency [Hz]. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                    <a:a name="LABEL" value="PFE_MAC_0_EXT_REF_CLK External Reference Frequency [Hz]"/>
                                    <a:a name="UUID" value="ECUC:76f54dc6-f1aa-90b4-92ca-a9c6984489eb"/>
                                    <a:a name="VISIBLE" type="XPath">
                                        <a:tst expr="contains(ecu:get('MCU.ExtClock.List'), 'PFE_MAC_0_EXT_REF_CLK')" />
                                    </a:a>
                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.ExtClock.Limits.PFE_MAC_0_EXT_REF_CLK.Default')"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=ecu:get('MCU.ExtClock.Limits.PFE_MAC_0_EXT_REF_CLK.High')"/>
                                        <a:tst expr="&gt;=ecu:get('MCU.ExtClock.Limits.PFE_MAC_0_EXT_REF_CLK.Low')"/>
                                    </a:da>
                                </v:var>

                                <v:var name="McuExternalPAD_PFE_MAC_1_EXT_TX_CLK_FrequencyHz" type="FLOAT">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Packet Forwarding Engine Ethernet Port 1 TX clock (PFE_MAC_1_EXT_TX_CLK) Reference Frequency [Hz]. <br />
                                                Note: This field is not used on S32R45 platforms. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                    <a:a name="LABEL" value="PFE_MAC_1_EXT_TX_CLK External Reference Frequency [Hz]"/>
                                    <a:a name="UUID" value="ECUC:72954dc6-f1aa-4644-92ca-a9d6904489eb"/>
                                    <a:a name="VISIBLE" type="XPath">
                                        <a:tst expr="contains(ecu:get('MCU.ExtClock.List'), 'PFE_MAC_1_EXT_TX_CLK')" />
                                    </a:a>
                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.ExtClock.Limits.PFE_MAC_1_EXT_TX_CLK.Default')"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=ecu:get('MCU.ExtClock.Limits.PFE_MAC_1_EXT_TX_CLK.High')"/>
                                        <a:tst expr="&gt;=ecu:get('MCU.ExtClock.Limits.PFE_MAC_1_EXT_TX_CLK.Low')"/>
                                    </a:da>
                                </v:var>

                                <v:var name="McuExternalPAD_PFE_MAC_1_EXT_RX_CLK_FrequencyHz" type="FLOAT">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Packet Forwarding Engine Ethernet Port 1 RX clock (PFE_MAC_1_EXT_RX_CLK) Reference Frequency [Hz]. <br />
                                                Note: This field is not used on S32R45 platforms. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                    <a:a name="LABEL" value="PFE_MAC_1_EXT_RX_CLK External Reference Frequency [Hz]"/>
                                    <a:a name="UUID" value="ECUC:72f54dc6-f1aa-46b4-92ca-a9d6984482eb"/>
                                    <a:a name="VISIBLE" type="XPath">
                                        <a:tst expr="contains(ecu:get('MCU.ExtClock.List'), 'PFE_MAC_1_EXT_RX_CLK')" />
                                    </a:a>
                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.ExtClock.Limits.PFE_MAC_1_EXT_RX_CLK.Default')"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=ecu:get('MCU.ExtClock.Limits.PFE_MAC_1_EXT_RX_CLK.High')"/>
                                        <a:tst expr="&gt;=ecu:get('MCU.ExtClock.Limits.PFE_MAC_1_EXT_RX_CLK.Low')"/>
                                    </a:da>
                                </v:var>

                                <v:var name="McuExternalPAD_PFE_MAC_1_EXT_REF_CLK_FrequencyHz" type="FLOAT">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Packet Forwarding Engine Ethernet Port 1 RMII REF Clock (PFE_MAC_1_EXT_REF_CLK) Reference Frequency [Hz]. <br />
                                                Note: This field is not used on S32R45 platforms. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                    <a:a name="LABEL" value="PFE_MAC_1_EXT_REF_CLK External Reference Frequency [Hz]"/>
                                    <a:a name="UUID" value="ECUC:96f54dc6-f1aa-40b4-92ca-a9c6984489eb"/>
                                    <a:a name="VISIBLE" type="XPath">
                                        <a:tst expr="contains(ecu:get('MCU.ExtClock.List'), 'PFE_MAC_1_EXT_REF_CLK')" />
                                    </a:a>
                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.ExtClock.Limits.PFE_MAC_1_EXT_REF_CLK.Default')"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=ecu:get('MCU.ExtClock.Limits.PFE_MAC_1_EXT_REF_CLK.High')"/>
                                        <a:tst expr="&gt;=ecu:get('MCU.ExtClock.Limits.PFE_MAC_1_EXT_REF_CLK.Low')"/>
                                    </a:da>
                                </v:var>

                                <v:var name="McuExternalPAD_PFE_MAC_2_EXT_TX_CLK_FrequencyHz" type="FLOAT">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Packet Forwarding Engine Ethernet Port 2 TX clock (PFE_MAC_2_EXT_TX_CLK) Reference Frequency [Hz]. <br />
                                                Note: This field is not used on S32R45 platforms. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                    <a:a name="LABEL" value="PFE_MAC_2_EXT_TX_CLK External Reference Frequency [Hz]"/>
                                    <a:a name="UUID" value="ECUC:72954dc6-f1aa-4644-12ca-a9d6984489eb"/>
                                    <a:a name="VISIBLE" type="XPath">
                                        <a:tst expr="contains(ecu:get('MCU.ExtClock.List'), 'PFE_MAC_2_EXT_TX_CLK')" />
                                    </a:a>
                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.ExtClock.Limits.PFE_MAC_2_EXT_TX_CLK.Default')"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=ecu:get('MCU.ExtClock.Limits.PFE_MAC_2_EXT_TX_CLK.High')"/>
                                        <a:tst expr="&gt;=ecu:get('MCU.ExtClock.Limits.PFE_MAC_2_EXT_TX_CLK.Low')"/>
                                    </a:da>
                                </v:var>

                                <v:var name="McuExternalPAD_PFE_MAC_2_EXT_RX_CLK_FrequencyHz" type="FLOAT">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Packet Forwarding Engine Ethernet Port 2 RX clock (PFE_MAC_2_EXT_RX_CLK) Reference Frequency [Hz]. <br />
                                                Note: This field is not used on S32R45 platforms. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                    <a:a name="LABEL" value="PFE_MAC_2_EXT_RX_CLK External Reference Frequency [Hz]"/>
                                    <a:a name="UUID" value="ECUC:72f84dc6-f1aa-46b4-92ca-a9d6984489eb"/>
                                    <a:a name="VISIBLE" type="XPath">
                                        <a:tst expr="contains(ecu:get('MCU.ExtClock.List'), 'PFE_MAC_2_EXT_RX_CLK')" />
                                    </a:a>
                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.ExtClock.Limits.PFE_MAC_2_EXT_RX_CLK.Default')"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=ecu:get('MCU.ExtClock.Limits.PFE_MAC_2_EXT_RX_CLK.High')"/>
                                        <a:tst expr="&gt;=ecu:get('MCU.ExtClock.Limits.PFE_MAC_2_EXT_RX_CLK.Low')"/>
                                    </a:da>
                                </v:var>

                                <v:var name="McuExternalPAD_PFE_MAC_2_EXT_REF_CLK_FrequencyHz" type="FLOAT">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Packet Forwarding Engine Ethernet Port 2 RMII REF Clock (PFE_MAC_2_EXT_REF_CLK) Reference Frequency [Hz]. <br />
                                                Note: This field is not used on S32R45 platforms. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                    <a:a name="LABEL" value="PFE_MAC_2_EXT_REF_CLK External Reference Frequency [Hz]"/>
                                    <a:a name="UUID" value="ECUC:76f54dc6-f1aa-40b4-92ca-a5c6984489eb"/>
                                    <a:a name="VISIBLE" type="XPath">
                                        <a:tst expr="contains(ecu:get('MCU.ExtClock.List'), 'PFE_MAC_2_EXT_REF_CLK')" />
                                    </a:a>
                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.ExtClock.Limits.PFE_MAC_2_EXT_REF_CLK.Default')"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=ecu:get('MCU.ExtClock.Limits.PFE_MAC_2_EXT_REF_CLK.High')"/>
                                        <a:tst expr="&gt;=ecu:get('MCU.ExtClock.Limits.PFE_MAC_2_EXT_REF_CLK.Low')"/>
                                    </a:da>
                                </v:var>

                                <v:var name="McuInternalPAD_SERDES_0_LANE_0_TX_FrequencyHz" type="FLOAT">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                SerDes 0 Lane 0 TX Reference Frequency [Hz]. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                    <a:a name="LABEL" value="SERDES_0_LANE_0_TX Internal Reference Frequency [Hz]"/>
                                    <a:a name="UUID" value="ECUC:cb7e14da-da73-4b07-9487-b2e71d43dafb"/>
                                    <a:a name="VISIBLE" type="XPath">
                                        <a:tst expr="contains(ecu:get('MCU.ExtClock.List'), 'SERDES_0_LANE_0_TX')" />
                                    </a:a>
                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.IntClock.Limits.SERDES_0_LANE_0_TX_CLK.Default')"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=ecu:get('MCU.IntClock.Limits.SERDES_0_LANE_0_TX_CLK.High')"/>
                                        <a:tst expr="&gt;=ecu:get('MCU.IntClock.Limits.SERDES_0_LANE_0_TX_CLK.Low')"/>
                                    </a:da>
                                </v:var>

                                <v:var name="McuInternalPAD_SERDES_0_LANE_0_CDR_FrequencyHz" type="FLOAT">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                SerDes 0 Lane 0 CDR (Clock and Data Recovery) Reference Frequency [Hz]. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                    <a:a name="LABEL" value="SERDES_0_LANE_0_CDR Internal Reference Frequency [Hz]"/>
                                    <a:a name="UUID" value="ECUC:cb7e14da-da73-4b07-9487-b2e354d1adbf"/>
                                    <a:a name="VISIBLE" type="XPath">
                                        <a:tst expr="contains(ecu:get('MCU.ExtClock.List'), 'SERDES_0_LANE_0_CDR')" />
                                    </a:a>
                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.IntClock.Limits.SERDES_0_LANE_0_CDR_CLK.Default')"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=ecu:get('MCU.IntClock.Limits.SERDES_0_LANE_0_CDR_CLK.High')"/>
                                        <a:tst expr="&gt;=ecu:get('MCU.IntClock.Limits.SERDES_0_LANE_0_CDR_CLK.Low')"/>
                                    </a:da>
                                </v:var>

                                <v:var name="McuInternalPAD_SERDES_0_LANE_1_TX_FrequencyHz" type="FLOAT">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                SerDes 0 Lane 1 TX Reference Frequency [Hz]. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                    <a:a name="LABEL" value="SERDES_0_LANE_1_TX Internal Reference Frequency [Hz]"/>
                                    <a:a name="UUID" value="ECUC:cb7e54da-da73-4b07-9487-b2e71d43dafb"/>
                                    <a:a name="VISIBLE" type="XPath">
                                        <a:tst expr="contains(ecu:get('MCU.ExtClock.List'), 'SERDES_0_LANE_1_TX')" />
                                    </a:a>
                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.IntClock.Limits.SERDES_0_LANE_1_TX_CLK.Default')"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=ecu:get('MCU.IntClock.Limits.SERDES_0_LANE_1_TX_CLK.High')"/>
                                        <a:tst expr="&gt;=ecu:get('MCU.IntClock.Limits.SERDES_0_LANE_1_TX_CLK.Low')"/>
                                    </a:da>
                                </v:var>

                                <v:var name="McuInternalPAD_SERDES_0_LANE_1_CDR_FrequencyHz" type="FLOAT">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                SerDes 0 Lane 1 CDR (Clock and Data Recovery) Reference Frequency [Hz]. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                    <a:a name="LABEL" value="SERDES_0_LANE_1_CDR Internal Reference Frequency [Hz]"/>
                                    <a:a name="UUID" value="ECUC:cb7e14da-da73-4b07-9477-b2e354d1adbf"/>
                                    <a:a name="VISIBLE" type="XPath">
                                        <a:tst expr="contains(ecu:get('MCU.ExtClock.List'), 'SERDES_0_LANE_1_CDR')" />
                                    </a:a>
                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.IntClock.Limits.SERDES_0_LANE_1_CDR_CLK.Default')"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=ecu:get('MCU.IntClock.Limits.SERDES_0_LANE_1_CDR_CLK.High')"/>
                                        <a:tst expr="&gt;=ecu:get('MCU.IntClock.Limits.SERDES_0_LANE_1_CDR_CLK.Low')"/>
                                    </a:da>
                                </v:var>

                                <v:var name="McuInternalPAD_SERDES_1_LANE_0_TX_FrequencyHz" type="FLOAT">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                SerDes 1 Lane 0 TX Reference Frequency [Hz]. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                    <a:a name="LABEL" value="SERDES_1_LANE_0_TX Internal Reference Frequency [Hz]"/>
                                    <a:a name="UUID" value="ECUC:cb4e14da-da73-4b07-9487-b2e71d43dafb"/>
                                    <a:a name="VISIBLE" type="XPath">
                                        <a:tst expr="contains(ecu:get('MCU.ExtClock.List'), 'SERDES_1_LANE_0_TX')" />
                                    </a:a>
                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.IntClock.Limits.SERDES_1_LANE_0_TX_CLK.Default')"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=ecu:get('MCU.IntClock.Limits.SERDES_1_LANE_0_TX_CLK.High')"/>
                                        <a:tst expr="&gt;=ecu:get('MCU.IntClock.Limits.SERDES_1_LANE_0_TX_CLK.Low')"/>
                                    </a:da>
                                </v:var>

                                <v:var name="McuInternalPAD_SERDES_1_LANE_0_CDR_FrequencyHz" type="FLOAT">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                SerDes 1 Lane 0 CDR (Clock and Data Recovery) Reference Frequency [Hz]. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                    <a:a name="LABEL" value="SERDES_1_LANE_0_CDR Internal Reference Frequency [Hz]"/>
                                    <a:a name="UUID" value="ECUC:cb7e14da-da73-4b27-9487-b2e354d1adbf"/>
                                    <a:a name="VISIBLE" type="XPath">
                                        <a:tst expr="contains(ecu:get('MCU.ExtClock.List'), 'SERDES_1_LANE_0_CDR')" />
                                    </a:a>
                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.IntClock.Limits.SERDES_1_LANE_0_CDR_CLK.Default')"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=ecu:get('MCU.IntClock.Limits.SERDES_1_LANE_0_CDR_CLK.High')"/>
                                        <a:tst expr="&gt;=ecu:get('MCU.IntClock.Limits.SERDES_1_LANE_0_CDR_CLK.Low')"/>
                                    </a:da>
                                </v:var>

                                <v:var name="McuInternalPAD_SERDES_1_LANE_1_TX_FrequencyHz" type="FLOAT">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                SerDes 1 Lane 1 TX Reference Frequency [Hz]. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                    <a:a name="LABEL" value="SERDES_1_LANE_1_TX Internal Reference Frequency [Hz]"/>
                                    <a:a name="UUID" value="ECUC:cb7e14da-da73-4b07-9687-b2e71d43dafb"/>
                                    <a:a name="VISIBLE" type="XPath">
                                        <a:tst expr="contains(ecu:get('MCU.ExtClock.List'), 'SERDES_1_LANE_1_TX')" />
                                    </a:a>
                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.IntClock.Limits.SERDES_1_LANE_1_TX_CLK.Default')"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=ecu:get('MCU.IntClock.Limits.SERDES_1_LANE_1_TX_CLK.High')"/>
                                        <a:tst expr="&gt;=ecu:get('MCU.IntClock.Limits.SERDES_1_LANE_1_TX_CLK.Low')"/>
                                    </a:da>
                                </v:var>

                                <v:var name="McuInternalPAD_SERDES_1_LANE_1_CDR_FrequencyHz" type="FLOAT">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                SerDes 1 Lane 1 CDR (Clock and Data Recovery) Reference Frequency [Hz]. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                    <a:a name="LABEL" value="SERDES_1_LANE_1_CDR Internal Reference Frequency [Hz]"/>
                                    <a:a name="UUID" value="ECUC:cb7e14da-da73-4b07-9387-b2e354d1adbf"/>
                                    <a:a name="VISIBLE" type="XPath">
                                        <a:tst expr="contains(ecu:get('MCU.ExtClock.List'), 'SERDES_1_LANE_1_CDR')" />
                                    </a:a>
                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.IntClock.Limits.SERDES_1_LANE_1_CDR_CLK.Default')"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=ecu:get('MCU.IntClock.Limits.SERDES_1_LANE_1_CDR_CLK.High')"/>
                                        <a:tst expr="&gt;=ecu:get('MCU.IntClock.Limits.SERDES_1_LANE_1_CDR_CLK.Low')"/>
                                    </a:da>
                                </v:var>

                                <v:var name="McuInternalPAD_SERDES_0_XPCS_0_TX_FrequencyHz" type="FLOAT">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                SerDes 0 Xpcs 0 TX Reference Frequency [Hz]. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                    <a:a name="LABEL" value="SERDES_0_XPCS_0_TX Internal Reference Frequency [Hz]"/>
                                    <a:a name="UUID" value="ECUC:cb7e14da-da73-4b07-9487-a3b81d43dafb"/>
                                    <a:a name="VISIBLE" type="XPath">
                                        <a:tst expr="contains(ecu:get('MCU.ExtClock.List'), 'SERDES_0_XPCS_0_TX')" />
                                    </a:a>
                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.IntClock.Limits.SERDES_0_XPCS_0_TX_CLK.Default')"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=ecu:get('MCU.IntClock.Limits.SERDES_0_XPCS_0_TX_CLK.High')"/>
                                        <a:tst expr="&gt;=ecu:get('MCU.IntClock.Limits.SERDES_0_XPCS_0_TX_CLK.Low')"/>
                                    </a:da>
                                </v:var>

                                <v:var name="McuInternalPAD_SERDES_0_XPCS_0_CDR_FrequencyHz" type="FLOAT">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                SerDes 0 Xpcs 0 CDR (Clock and Data Recovery) Reference Frequency [Hz]. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                    <a:a name="LABEL" value="SERDES_0_XPCS_0_CDR Internal Reference Frequency [Hz]"/>
                                    <a:a name="UUID" value="ECUC:cb7e14da-da73-4b07-9487-a3b854d1adbf"/>
                                    <a:a name="VISIBLE" type="XPath">
                                        <a:tst expr="contains(ecu:get('MCU.ExtClock.List'), 'SERDES_0_XPCS_0_CDR')" />
                                    </a:a>
                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.IntClock.Limits.SERDES_0_XPCS_0_CDR_CLK.Default')"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=ecu:get('MCU.IntClock.Limits.SERDES_0_XPCS_0_CDR_CLK.High')"/>
                                        <a:tst expr="&gt;=ecu:get('MCU.IntClock.Limits.SERDES_0_XPCS_0_CDR_CLK.Low')"/>
                                    </a:da>
                                </v:var>

                                <v:var name="McuInternalPAD_SERDES_0_XPCS_1_TX_FrequencyHz" type="FLOAT">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                SerDes 0 Xpcs 1 TX Reference Frequency [Hz]. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                    <a:a name="LABEL" value="SERDES_0_XPCS_1_TX Internal Reference Frequency [Hz]"/>
                                    <a:a name="UUID" value="ECUC:cb7e54da-da73-4b07-9487-a3b81d43dafb"/>
                                    <a:a name="VISIBLE" type="XPath">
                                        <a:tst expr="contains(ecu:get('MCU.ExtClock.List'), 'SERDES_0_XPCS_1_TX')" />
                                    </a:a>
                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.IntClock.Limits.SERDES_0_XPCS_1_TX_CLK.Default')"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=ecu:get('MCU.IntClock.Limits.SERDES_0_XPCS_1_TX_CLK.High')"/>
                                        <a:tst expr="&gt;=ecu:get('MCU.IntClock.Limits.SERDES_0_XPCS_1_TX_CLK.Low')"/>
                                    </a:da>
                                </v:var>

                                <v:var name="McuInternalPAD_SERDES_0_XPCS_1_CDR_FrequencyHz" type="FLOAT">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                SerDes 0 Xpcs 1 CDR (Clock and Data Recovery) Reference Frequency [Hz]. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                    <a:a name="LABEL" value="SERDES_0_XPCS_1_CDR Internal Reference Frequency [Hz]"/>
                                    <a:a name="UUID" value="ECUC:cb7e14da-da73-4b07-9477-a3b854d1adbf"/>
                                    <a:a name="VISIBLE" type="XPath">
                                        <a:tst expr="contains(ecu:get('MCU.ExtClock.List'), 'SERDES_0_XPCS_1_CDR')" />
                                    </a:a>
                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.IntClock.Limits.SERDES_0_XPCS_1_CDR_CLK.Default')"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=ecu:get('MCU.IntClock.Limits.SERDES_0_XPCS_1_CDR_CLK.High')"/>
                                        <a:tst expr="&gt;=ecu:get('MCU.IntClock.Limits.SERDES_0_XPCS_1_CDR_CLK.Low')"/>
                                    </a:da>
                                </v:var>

                                <v:var name="McuInternalPAD_SERDES_1_XPCS_0_TX_FrequencyHz" type="FLOAT">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                SerDes 1 Xpcs 0 TX Reference Frequency [Hz]. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                    <a:a name="LABEL" value="SERDES_1_XPCS_0_TX Internal Reference Frequency [Hz]"/>
                                    <a:a name="UUID" value="ECUC:cb4e14da-da73-4b07-9487-a3b81d43dafb"/>
                                    <a:a name="VISIBLE" type="XPath">
                                        <a:tst expr="contains(ecu:get('MCU.ExtClock.List'), 'SERDES_1_XPCS_0_TX')" />
                                    </a:a>
                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.IntClock.Limits.SERDES_1_XPCS_0_TX_CLK.Default')"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=ecu:get('MCU.IntClock.Limits.SERDES_1_XPCS_0_TX_CLK.High')"/>
                                        <a:tst expr="&gt;=ecu:get('MCU.IntClock.Limits.SERDES_1_XPCS_0_TX_CLK.Low')"/>
                                    </a:da>
                                </v:var>

                                <v:var name="McuInternalPAD_SERDES_1_XPCS_0_CDR_FrequencyHz" type="FLOAT">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                SerDes 1 Xpcs 0 CDR (Clock and Data Recovery) Reference Frequency [Hz]. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                    <a:a name="LABEL" value="SERDES_1_XPCS_0_CDR Internal Reference Frequency [Hz]"/>
                                    <a:a name="UUID" value="ECUC:cb7e14da-da73-4b27-9487-a3b854d1adbf"/>
                                    <a:a name="VISIBLE" type="XPath">
                                        <a:tst expr="contains(ecu:get('MCU.ExtClock.List'), 'SERDES_1_XPCS_0_CDR')" />
                                    </a:a>
                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.IntClock.Limits.SERDES_1_XPCS_0_CDR_CLK.Default')"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=ecu:get('MCU.IntClock.Limits.SERDES_1_XPCS_0_CDR_CLK.High')"/>
                                        <a:tst expr="&gt;=ecu:get('MCU.IntClock.Limits.SERDES_1_XPCS_0_CDR_CLK.Low')"/>
                                    </a:da>
                                </v:var>

                                <v:var name="McuInternalPAD_SERDES_1_XPCS_1_TX_FrequencyHz" type="FLOAT">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                SerDes 1 Xpcs 1 TX Reference Frequency [Hz]. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                    <a:a name="LABEL" value="SERDES_1_XPCS_1_TX Internal Reference Frequency [Hz]"/>
                                    <a:a name="UUID" value="ECUC:cb7e14da-da73-4b07-9687-a3b81d43dafb"/>
                                    <a:a name="VISIBLE" type="XPath">
                                        <a:tst expr="contains(ecu:get('MCU.ExtClock.List'), 'SERDES_1_XPCS_1_TX')" />
                                    </a:a>
                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.IntClock.Limits.SERDES_1_XPCS_1_TX_CLK.Default')"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=ecu:get('MCU.IntClock.Limits.SERDES_1_XPCS_1_TX_CLK.High')"/>
                                        <a:tst expr="&gt;=ecu:get('MCU.IntClock.Limits.SERDES_1_XPCS_1_TX_CLK.Low')"/>
                                    </a:da>
                                </v:var>

                                <v:var name="McuInternalPAD_SERDES_1_XPCS_1_CDR_FrequencyHz" type="FLOAT">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                SerDes 1 Xpcs 1 CDR (Clock and Data Recovery) Reference Frequency [Hz]. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                    <a:a name="LABEL" value="SERDES_1_XPCS_1_CDR Internal Reference Frequency [Hz]"/>
                                    <a:a name="UUID" value="ECUC:cb7e14da-da73-4b07-9387-a3b854d1adbf"/>
                                    <a:a name="VISIBLE" type="XPath">
                                        <a:tst expr="contains(ecu:get('MCU.ExtClock.List'), 'SERDES_1_XPCS_1_CDR')" />
                                    </a:a>
                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.IntClock.Limits.SERDES_1_XPCS_1_CDR_CLK.Default')"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=ecu:get('MCU.IntClock.Limits.SERDES_1_XPCS_1_CDR_CLK.High')"/>
                                        <a:tst expr="&gt;=ecu:get('MCU.IntClock.Limits.SERDES_1_XPCS_1_CDR_CLK.Low')"/>
                                    </a:da>
                                </v:var>

                                <!-- /** @implements McuClockSrcFailureNotification_Object */ -->
                                <v:var name="McuClockSrcFailureNotification" type="ENUMERATION">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Enables/Disables clock failure notification.
                                                In case this feature is not supported by HW the setting should be disabled.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                    <a:a name="LABEL" value="Clock Failure Notification"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                    <a:a name="UUID" value="ECUC:d04e3d3c-e8c8-4cba-913d-a79a93ae4689"/>
                                    <a:da name="DEFAULT" value="DISABLED"/>
                                    <a:da name="RANGE">
                                        <a:v>ENABLED</a:v>
                                        <a:v>DISABLED</a:v>
                                    </a:da>
                                    <a:a name="INVALID" type="XPath">
                                        <a:tst expr="
                                            (
                                                ( node:fallback(., 'ENABLED') = 'ENABLED' ) and
                                                ( node:fallback(as:modconf('Mcu')[1]/McuGeneralConfiguration/McuCmuErrorIsrUsed, 'false') = 'false' )
                                            )"
                                               true="The field McuGeneralConfiguration/McuCmuErrorIsrUsed must be set to 'true' when clock source failure notifications are enabled."/>
                                        <a:tst expr="
                                            (
                                                ( node:fallback(., 'ENABLED') = 'ENABLED' ) and
                                                ( not(node:exists(../../McuGeneralConfiguration/McuCmuNotification)) )
                                            )"
                                            true="The field McuGeneralConfiguration/McuCmuNotification must be enabled when clock source failure notifications are enabled."/>
                                    </a:a>
                                </v:var>

                                <!-- /** @implements McuClockSettingConfig_Object */ -->
                                <v:lst name="McuClockSettingConfig" type="MAP">
                                    <a:da name="MIN" value="1"/>

                                    <v:ctr name="McuClockSettingConfig" type="IDENTIFIABLE">
                                        <a:a name="DESC">
                                            <a:v>
                                                <![CDATA[EN:<html>
                                                    This container contains the configuration for the Clock settings of the MCU.
                                                </html>]]>
                                            </a:v>
                                        </a:a>
                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                            <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                                            <icc:v mclass="PreCompile">VariantPostBuild</icc:v>
                                        </a:a>
                                        <a:a name="UUID" value="ECUC:6d197fc7-452a-4168-af62-a0155509f250"/>

                                        <!-- /** @implements McuClockSettingId_Object */ -->
                                        <v:var name="McuClockSettingId" type="INTEGER">
                                            <a:a name="LABEL" value="Mcu Clock Setting Id" />
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        The Id of this McuClockSettingConfig to be used as argument for the API call Mcu_InitClock().
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="true"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="false"/>
                                            <a:da name="DEFAULT" type="XPath"  expr="num:i( node:fallback( node:current()/../@index, num:i(0)))"/>
                                            <a:a name="UUID" value="ECUC:023d4661-0937-4487-8200-87d06f84bc34"/>
                                            <a:da name="INVALID" type="Range">
                                                <a:tst expr="&lt;=255"/>
                                                <a:tst expr="&gt;=0"/>
                                            </a:da>
                                            <a:da name="RANGE" type="XPath">
                                                <a:tst expr="text:uniq(node:fallback(../../*/McuClockSettingId, text:split('1 2 3')), node:fallback(., 0))"
                                                    false="Duplicated value, McuClockSettingId must be unique across McuClockSettingConf. Use the Calculate button to calculate correct default value."/>
                                                <a:tst expr="node:fallback(., 0) &lt; count(node:fallback(../../*, 1))"
                                                    false="Value out of range: must be in range 0 to N-1 (N is number of configured clock setting). Use the Calculate button to calculate correct default value."/>
                                            </a:da>
                                        </v:var>

                                        <v:ctr name="McuFXOSC" type="IDENTIFIABLE">
                                            <a:a name="TAB" value="McuFXOSC"/>
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN: <html>
                                                        This container contains the specific configuration of the MCU FXOSC (External Oscillator) configuration.
                                                        Note: Implementation Specific Container.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="UUID" value="ECUC:dbd54538-e5f6-44d1-a4e1-fa9140dec442"/>

                                            <!-- /** @implements McuFxoscUnderMcuControl_Object */ -->
                                            <v:var name="McuFxoscUnderMcuControl" type="BOOLEAN">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            Set this to TRUE if FXOSC is under MCU control <br />
                                                            If it is FALSE then the MCU driver will not write the corresponding registers. <br />
                                                            The user must still set the values - they are used by the clock reference points  <br />
                                                            Note: Implementation Specific Parameter. <br />
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="LABEL" value="FXOSC under MCU control"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:56613a64-57c3-4935-bb5f-838910f72e24"/>
                                                <a:da name="DEFAULT" value="true"/>
                                                <a:a name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            ( node:fallback(., 'true') = 'true' ) and
                                                            ( node:fallback(as:modconf('Mcu')[1]/McuGeneralConfiguration/McuControlledClocksConfiguration/McuFxoscUnderMcuControl, 'true') = 'false' )
                                                        )"
                                                        true="The field McuGeneralConfiguration/McuControlledClocksConfiguration/McuFxoscUnderMcuControl must be set to 'true' when FXOSC is under MCU control."/>
                                                </a:a>
                                            </v:var>

                                            <v:var name="McuFxoscPowerDownCtr" type="BOOLEAN">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN: <html>
                                                            Crystal oscillator power-down control: <br />
                                                            Checked   - Crystal oscillator is switched ON.<br />
                                                            Unchecked - Crystal oscillator is switched OFF.<br />
                                                            Configure the FXOSC_CTRL[OSCON] field.<br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="LABEL" value="FXOSC Enable"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:f51e1d81-a02a-4a58-9dfc-9dfdd9931709"/>
                                                <a:da name="DEFAULT" value="false"/>
                                                <a:a name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            ( node:fallback(., 'true') = 'true' ) and
                                                            ( node:fallback(../McuFxoscMainComparator, 'true') = 'false' ) and
                                                            ( node:fallback(../McuFxoscByPass, 'false') = 'false' )
                                                        )"
                                                        true="FXOSC cannot be enabled when the comparator is disabled and the oscillator is not bypassed (i.e. McuFxoscMainComparator = 'false' and McuFxoscByPass = 'false')."/>
                                                </a:a>
                                            </v:var>

                                            <v:var name="McuFxoscByPass" type="BOOLEAN">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN: <html>
                                                            Crystal Oscillator Bypass.<br />
                                                            This bit specifies whether the oscillator should be bypassed or not.<br />
                                                            0 - Internal oscillator not bypassed.<br />
                                                            1 - Internal oscillator bypassed.<br />
                                                            Configure the FXOSC_CTRL[OSC_BYP] field.<br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="LABEL" value="FXOSC Bypass"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:a9e722a3-d4ae-4964-a6fd-71408a00cca0"/>
                                                <a:da name="DEFAULT" value="false"/>
                                                <a:a name="EDITABLE" type="XPath">
                                                    <a:tst expr="node:fallback(../McuFxoscPowerDownCtr, 'true') = 'true'"/>
                                                </a:a>
                                                <a:a name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            ( node:fallback(../McuFxoscPowerDownCtr, 'false') = 'true' ) and
                                                            ( node:fallback(., 'true') = 'true' ) and
                                                            ( node:fallback(../McuFxoscMainComparator, 'true') = 'true' )
                                                        )"
                                                        true="The oscillator cannot be bypassed while the comparator is enabled (i.e. McuFxoscMainComparator = 'true')."/>
                                                </a:a>
                                            </v:var>

                                            <v:var name="McuFxoscMainComparator" type="BOOLEAN">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN: <html>
                                                            Power down signal for main comparator.<br />
                                                            This field should be 1 when external crystal is used, and 0 when FXOSC is in Single-Input Bypass Mode (i.e. FXOSC_CTRL[OSC_BYP] = 1).<br />
                                                            0 - Comparator disabled.<br />
                                                            1 - Comparator enabled.<br />
                                                            Configure the FXOSC_CTRL[COMP_EN] field.<br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="LABEL" value="FXOSC Comparator"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:b687a5c1-440c-4f67-b3b6-1ec9c21f2933"/>
                                                <a:da name="DEFAULT" value="true"/>
                                                <a:a name="EDITABLE" type="XPath">
                                                    <a:tst expr="node:fallback(../McuFxoscPowerDownCtr, 'true') = 'true'"/>
                                                </a:a>
                                                <a:a name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            ( node:fallback(../McuFxoscPowerDownCtr, 'false') = 'true' ) and
                                                            ( node:fallback(., 'true') = 'true' ) and
                                                            ( node:fallback(../McuFxoscByPass, 'false') = 'true' )
                                                        )"
                                                        true="The comparator cannot be enabled while bypassing the oscillator (i.e. McuFxoscByPass = 'true')."/>
                                                </a:a>
                                            </v:var>

                                            <v:var name="McuFxoscCounter" type="INTEGER">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN: <html>
                                                            When the internal counter reaches this value, the oscillator is stable.<br />
                                                            These bits specify the "end of count value" to be used for comparison by the
                                                            oscillator stabilization counter after reset or whenever it is switched on.<br />
                                                            The counter is kept under reset if operating in Single-Input Bypass Mode (i.e. FXOSC_CTRL[OSC_BYP] = 1).<br />
                                                            EOCV value is always 1ms in Differential Bypass mode.<br />
                                                            <b>Note: </b>Please ensure that the internal counter is running for at least the stabilization
                                                            time of the crystal as given in the Data Sheet.<br />
                                                            To calculate EOCV from startup time (of crystal), use the following formula:<br />
                                                            EOCV (in decimal) = (Stabilization time in ns) / (4 * 128 * Time period of clock in ns)<br />
                                                            Configure the FXOSC_CTRL[EOCV] field.<br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="LABEL" value="FXOSC End of Count"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:6dce77cd-9e81-47a9-bcae-e80a6d08b951"/>
                                                <a:da name="DEFAULT" value="157"/>
                                                <a:a name="EDITABLE" type="XPath">
                                                    <a:tst expr="node:fallback(../McuFxoscPowerDownCtr, 'true') = 'true'"/>
                                                </a:a>
                                                <a:a name="INVALID" type="Range">
                                                    <a:tst expr="&lt;=255"/>
                                                    <a:tst expr="&gt;=0"/>
                                                </a:a>
                                            </v:var>

                                            <v:var name="McuFxoscOverdriveProtection" type="INTEGER">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN: <html>
                                                            Crystal overdrive protection.<br />
                                                            This value decides the trans-conductance applied by the FXOSC amplifier,
                                                            and it will depend on crystal specification.<br />
                                                            FXOSC will not function when this field is 0 (0 trans-conductance). <br />
                                                            In Differential Bypass Mode, this field must be set to 1. <br />
                                                            Configure the FXOSC_CTRL[GM_SEL] field.<br />
                                                            <b>Note: </b>FXOSC will not function when this field is set to 0 (0 trans-conductance).<br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="LABEL" value="Crystal overdrive protection"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:5585ac3d-a175-422f-b801-502719445821"/>
                                                <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:i(
                                                            num:i(12) *
                                                            num:i(number(node:fallback(../McuFxoscByPass, 'false') = 'false'))
                                                            )
                                                        "/>
                                                </a:da>
                                                <a:a name="EDITABLE" type="XPath">
                                                    <a:tst expr="node:fallback(../McuFxoscPowerDownCtr, 'true') = 'true'"/>
                                                </a:a>
                                                <a:a name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            ( node:fallback(../McuFxoscPowerDownCtr, 'false') = 'true' ) and
                                                            (num:i(node:fallback(., 0)) = 0 ) and
                                                            ( node:fallback(../McuFxoscByPass, 'false') = 'false' )
                                                        )"
                                                        true="In Crystal mode (McuFxoscByPass = false) FXOSC will not function with zero transconductance (GM_SEL = 0000b)."
                                                    />
                                                    <a:tst expr="
                                                        (
                                                            ( node:fallback(../McuFxoscPowerDownCtr, 'false') = 'true' ) and
                                                            (num:i(node:fallback(., 0)) != 0 ) and
                                                            ( node:fallback(../McuFxoscByPass, 'true') = 'true' )
                                                        )"
                                                        true="In Single-Input Bypass mode (McuFxoscByPass = true) write 0000b to this field."
                                                    />
                                                </a:a>
                                                <a:a name="INVALID" type="Range">
                                                    <a:tst expr="&lt;=15"/>
                                                    <a:tst expr="&gt;=0"/>
                                                </a:a>
                                            </v:var>

                                            <v:var name="McuFXOSC_Frequency" type="FLOAT">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                            Value calculated for user info. It is given in Hz.<br />
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="LABEL" value="FXOSC Frequency (FXOSC_CLK)"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:8cfbf2d0-3b15-e345-a0ec-bd7182307c2f"/>
                                                <a:a name="EDITABLE" type="XPath">
                                                    <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuFxoscPowerDownCtr, 'false') = 'true')"/>
                                                </a:a>
                                                <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:i(number(node:fallback(../McuFxoscPowerDownCtr, 'false') = 'true')) *
                                                            num:f(
                                                                 num:f(node:fallback(../../../../McuCrystalFrequencyHz, num:i(40000000)))
                                                            )
                                                        )
                                                        "/>
                                                </a:da>
                                                <a:da name="RANGE" type="XPath">
                                                    <a:tst expr="
                                                            (
                                                                not( node:empty( node:fallback(., 40000000) ) )
                                                                and
                                                                (
                                                                    num:f( node:fallback(., 40000000) ) !=
                                                                    (
                                                                        num:i(number(node:fallback(../McuFxoscPowerDownCtr, 'true') = 'true')) *
                                                                        num:f(node:fallback(../../../../McuCrystalFrequencyHz, num:i(40000000)))
                                                                    )
                                                                )
                                                            )
                                                        "
                                                        true="Please press the button to calculate the value automatically."/>
                                                    <a:tst expr="
                                                            (
                                                                (node:fallback(../McuFxoscPowerDownCtr, 'true') = 'true') and
                                                                (node:fallback(../McuFxoscByPass, 'false') = 'false') and
                                                                (node:fallback(../McuFxoscMainComparator, 'true' ) = 'true') and
                                                                (
                                                                    ( node:fallback(., num:i(40000000)) &gt; num:i(ecu:get('MCU.FXOSC.Limits.DifferentialMode.High')) ) or
                                                                    ( node:fallback(., num:i(40000000)) &lt; num:i(ecu:get('MCU.FXOSC.Limits.DifferentialMode.Low')) )
                                                                )
                                                            )
                                                        "
                                                        true="In crystal mode/differential bypass mode (i.e. McuFxoscByPass = 'false' and McuFxoscMainComparator = 'true'), the valid range is [20 ... 40] MHz"/>
                                                    <a:tst expr="
                                                            (
                                                                (node:fallback(../McuFxoscPowerDownCtr, 'true') = 'true') and
                                                                (node:fallback(../McuFxoscByPass, 'false') = 'true') and
                                                                (node:fallback(../McuFxoscMainComparator, 'true') = 'false') and
                                                                (
                                                                    ( node:fallback(., num:i(40000000)) &gt; num:i(ecu:get('MCU.FXOSC.Limits.SingleEndedMode.High')) ) or
                                                                    ( node:fallback(., num:i(40000000)) &lt; num:i(ecu:get('MCU.FXOSC.Limits.SingleEndedMode.Low')) )
                                                                )
                                                            )
                                                        "
                                                        true="In single-ended bypass mode (i.e. McuFxoscByPass = 'true' and McuFxoscMainComparator = 'false'), the valid range is 40 MHz"/>
                                                </a:da>
                                                <a:a name="INVALID" type="Range">
                                                    <a:tst expr="&lt;=ecu:get('MCU.FXOSC.Limits.FXOSC.High')"/>
                                                    <a:tst expr="&gt;=((ecu:get('MCU.FXOSC.Limits.FXOSC.Low') * num:i(number(node:fallback(../McuFxoscPowerDownCtr, 'false') = 'true'))))"/>
                                                </a:a>
                                            </v:var>

                                        </v:ctr>

                                        <v:ctr name="McuCgm0SettingConfig" type="IDENTIFIABLE">
                                        <a:a name="DESC">
                                            <a:v>
                                                <![CDATA[EN:<html>
                                                    This container contains the configuration for the CGM_0 settings of the MCU.
                                                </html>]]>
                                            </a:v>
                                        </a:a>
                                        <a:a name="UUID" value="ECUC:f6051177-3bc6-424c-a777-afbb5af002a9"/>

                                            <v:lst name="McuCgm0PcsConfig" type="MAP">
                                                <a:da name="MIN" type="XPath" expr="num:i(count(ecu:list('MCU.CGM0.CgmPcfs.List')))"/>
                                                <a:da name="INVALID" type="XPath">
                                                    <a:tst expr="count(./*) &gt; num:i(count(ecu:list('MCU.CGM0.CgmPcfs.List')))"
                                                        true="The number of McuCgm0PcsConfig more than maximum value allowed"/>
                                                </a:da>

                                                <v:ctr name="McuCgm0PcsConfig" type="IDENTIFIABLE">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This register defines the rate of frequency change and initial change value for the
                                                                progressive system clock switching when switching the system clock source to or from
                                                                the FXOSC_CLK on ramp-up and ramp-down, respectively. <br />
                                                                Note: Implementation Specific Container.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="TAB" value="McuPcsConfig"/>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS"  type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v mclass="PreCompile">VariantPostBuild</icc:v>
                                                        <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                                                    </a:a>
                                                    <a:a name="UUID" value="ECUC:0439e37c-4f3c-4035-8272-19533af39013"/>

                                                    <v:var name="McuClockPcfsUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock PCFS is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="Mcu Clock PCFS under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:e425528b-1f63-453a-b0b2-ac018578243e"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:a name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                ( node:fallback(., 'true') = 'true' ) and
                                                                (node:fallback(../McuPCS_Name, 'PCFS_2') = 'PCFS_12') and
                                                                (( node:fallback(../../../../McuCoreDfs/McuDfs_1/McuDFSPort_En, 'true') = 'false' ) or
                                                                ( node:fallback(../../../../McuCoreDfs/McuDfs_1/McuDFSUnderMcuControl, 'true') = 'false' ))
                                                            )"
                                                            true="The fields Mcu/McuModuleConfiguration/McuClockSettingConfig/McuCoreDfs/McuDfs_1/McuDFSUnderMcuControl and Mcu/McuModuleConfiguration/McuClockSettingConfig/McuCoreDfs/McuDfs_1/McuDFSPort_En  must be set to 'true' when PCFS is under MCU control."/>
                                                    </a:a>
                                                    </v:var>

                                                    <v:var name="McuPCS_Name" type="ENUMERATION">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    This is the name of the PCFS module. <br />
                                                                    PCFS_x corresponds to clock_src_x. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="LABEL" value="CGM0 PCFS Name"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:570c5ac3-80ce-4452-b846-9f41f01b9b9b"/>
                                                        <a:da name="DEFAULT" type="XPath" expr="ecu:list('MCU.CGM0.CgmPcfs.List')[num:i(node:fallback(node:current()/../@index, num:i(0)) + 1)]"/>
                                                        <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM0.CgmPcfs.List')"/>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="text:uniq(node:fallback(../../*/McuPCS_Name, ecu:list('MCU.CGM0.CgmPcfs.List')), node:fallback(., ecu:get('MCU.CGM0.CgmPcfs.Default')))"
                                                                false="Duplicated value, McuPCS_Name must be unique across McuCgm0PcsConfig."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuPCS_SourceFrequency" type="FLOAT">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    This is the frequency of the input clock source (i.e. the frequency of clk_src_x). <br />
                                                                    Note: This field must not be manually modified. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="LABEL" value="Source Frequency (Hz)"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:570c5ac3-80ce-4452-b846-9f410e26cd6a"/>
                                                        <a:da name="DEFAULT" type="XPath">
                                                            <a:tst expr="num:f
                                                                            (
                                                                                num:f
                                                                                    (   (num:f(number( num:i( substring-after(node:fallback(../McuPCS_Name, 'PCFS_2'), 'PCFS_') ) = num:i(12) ))) *
                                                                                            (num:f(node:fallback(../../../../McuCoreDfs/McuDfs_1/DFS_CLK_Frequency, 40000000)))
                                                                                    )
                                                                            )"/>
                                                        </a:da>
                                                        <a:a name="INVALID" type="Range">
                                                            <a:tst expr="&lt;=2000000000"/>
                                                            <a:tst expr="&gt;=0"/>
                                                        </a:a>
                                                        <a:a name="RANGE" type="XPath">
                                                            <a:tst expr="not(node:empty(node:fallback(., 80000000))) and
                                                                            (   num:f(node:fallback(., 0)) !=
                                                                                num:f
                                                                                    (
                                                                                        num:f
                                                                                            (   (num:f(number( num:i( substring-after(node:fallback(../McuPCS_Name, 'PCFS_2'), 'PCFS_') ) = num:i(12) ))) *
                                                                                                    (num:f(node:fallback(../../../../McuCoreDfs/McuDfs_1/DFS_CLK_Frequency, 40000000)))
                                                                                            )
                                                                                    )
                                                                            )"
                                                            true="Please press the button to calculate the value automatically."/>
                                                        </a:a>
                                                    </v:var>

                                                    <v:var name="McuPCS_MaxAllowableDynamicIDD" type="FLOAT">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    This value defines the maximum allowable change in current (IDD) per microsecond. <br />
                                                                    It depends on the application and on the power supply (how much current can it deliver rapidly). <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="LABEL" value="Max Allowable Dynamic IDD (mA/&#181;s)"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:570c5ac3-80ce-4452-b846-7b253b15bc1f"/>
                                                        <a:da name="DEFAULT" value="50"/>
                                                        <a:a name="INVALID" type="Range">
                                                            <a:tst expr="&lt;=150"/>
                                                            <a:tst expr="&gt;=0"/>
                                                        </a:a>
                                                    </v:var>
                                                </v:ctr>
                                            </v:lst>

                                            <v:var name="McuPCSStepDuration" type="INTEGER">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            The value provided specifies the number of microseconds per step (i.e. the duration of a step, given in microseconds). <br />
                                                            If more time is needed for the power supply to come to full load, this value should be increased. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="LABEL" value="PCS Step Duration (&#181;s)"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:56f0a853-6d6e-4bd6-89f7-db5c3b005883"/>
                                                <a:da name="DEFAULT" value="1"/>
                                                <a:a name="INVALID" type="Range">
                                                    <a:tst expr="&lt;=100"/>
                                                    <a:tst expr="&gt;=1"/>
                                                </a:a>
                                            </v:var>

                                            <v:var name="McuPCSSwitchDuration" type="INTEGER">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            MC_CGM_PCFS_SDUR register configuration. <br />
                                                            The value provided defines the duration of one PCS clock switch step in terms of 48MHz FIRC cycles. <br />
                                                            Note: This field must not be manually modified. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="LABEL" value="PCS Switch Duration"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:56f0a853-6d6e-4bd6-89f7-db5c3b91b883"/>
                                                <a:da name="DEFAULT" type="XPath">
                                                    <a:tst expr="num:i( num:i(48) * num:i( node:fallback(../McuPCSStepDuration, 1) ) )"/>
                                                </a:da>
                                                <a:a name="INVALID" type="Range">
                                                    <a:tst expr="&lt;=65535"/>
                                                    <a:tst expr="&gt;=0"/>
                                                </a:a>
                                                <a:a name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            not( node:empty( node:fallback(., 48) ) )
                                                            and
                                                            (
                                                                num:i( node:fallback(., 48) ) !=
                                                                (
                                                                    num:i( num:i(48) * num:i( node:fallback(../McuPCSStepDuration, 1) ) )
                                                                )
                                                            )
                                                        )
                                                    "
                                                    true="Please press the button to calculate the value automatically."/>
                                                </a:a>
                                            </v:var>

                                            <v:ctr name="McuCgm0ClockMux0" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container enables and selects the configuration clocks for
                                                            XBAR_2X_CLK,
                                                            XBAR_CLK (always equal to XBAR_2X_CLK / 2),
                                                            XBAR_DIV2_CLK (always equal XBAR_2X_CLK / 4),
                                                            XBAR_DIV4_CLK (always equal XBAR_2X_CLK / 8),
                                                            XBAR_DIV3_CLK (always equal XBAR_2X_CLK / 6),
                                                            XBAR_DIV6_CLK (always equal XBAR_2X_CLK / 12),
                                                            LBIST_CLK,
                                                            DAPB_CLK. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuCgm0ClockMux0"/>
                                                <a:a name="UUID" value="ECUC:a40689ad-adde-4328-afe7-4e81cd434d50"/>

                                                <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock mux is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:e421418b-1f63-453a-b0b2-ac018378243e"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMux0_Source" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 0 Source Selection. <br />
                                                                Sets the MC_CGM_0_MUX_0_CSC[SELCTL] field register. <br />
                                                                MC_CGM_0_MUX_0_CSC[SELCTL] - This field selects the source clock for Clock Mux 0. <br />
                                                            </html>]]>
                                                        </a:v>
                                                     </a:a>
                                                     <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux0 Source"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:f04ae84c-73b9-4b71-8324-3cfb7ab5426b"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM0.ClockMux0.Default')"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM0.ClockMux0.List')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'CORE_PLL_DFS1_CLK') and
                                                                       (node:fallback(../../../McuCoreDfs/McuDfs_1/McuDFSPort_En, 'false') = 'false')
                                                                     )"
                                                               true="If 'CORE_PLL_DFS1_CLK' is selected as source clock, CoresDFS1 must be enabled (i.e. McuCoreDfs/McuDfs_1/McuDFSPort_En = 'true')."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClockMux0_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux0 Frequency (XBAR_2X_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8cfbf2d0-3b15-e345-a0ec-bd7353308c2f"/>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(
                                                                num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='CORE_PLL_DFS1_CLK')) *
                                                                num:f(node:fallback(../../../McuCoreDfs/McuDfs_1/DFS_CLK_Frequency, num:i(800000000))) +
                                                                num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                num:f(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 800000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 800000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(
                                                                                    num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='CORE_PLL_DFS1_CLK')) *
                                                                                    num:f(node:fallback(../../../McuCoreDfs/McuDfs_1/DFS_CLK_Frequency, num:i(800000000))) +
                                                                                    num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                    num:f(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &gt; num:i(ecu:get('MCU.SysClock.Limits.XBAR_2X_CLK.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &lt; num:i(0)
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.SysClock.Limits.XBAR_2X_CLK.High')"/>
                                                        <a:tst expr="&gt;=ecu:get('MCU.SysClock.Limits.XBAR_2X_CLK.Low')"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClkMux0Div0_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 0 Divider enable. <br />
                                                                This field enables the Clock Divider for LBIST_CLK. <br />
                                                                Sets the MC_CGM_0_MUX_0_DC_0[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                If it is set to 0 (Divider 0 is disabled), any write access to the MC_CGM_0_MUX_0_DC_0[DIV] and MC_CGM_0_MUX_0_DC_0[PHASE] fields is ignored and the LBIST_CLK clock remains disabled. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux0 Divider0 Enable (LBIST_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:0b3e9bb1-f7b1-462f-87e0-d6259d63bf49"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                </v:var>

                                                <v:var name="McuClkMux0Div0_Divisor" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 0 Division value. <br />
                                                                Sets the MC_CGM_0_MUX_0_DC_0[DIV] field register. <br />
                                                                MC_CGM_0_MUX_0_DC_0[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider. <br />
                                                                This parameter is enabled only if McuClkMux0Div0_En is true. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux0 Divisor0 (LBIST_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:b648ae12-7141-46e7-b67a-791ee873400e"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuClkMux0Div0_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=255"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClockMux0Divider0_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux0 Divider0 Frequency (LBIST_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8cfbf2d0-3b15-4340-90ec-bd7353308c2f"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuClkMux0Div0_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:i(number(node:fallback(../McuClkMux0Div0_En, 'true') = 'true')) *
                                                            num:f(
                                                                num:f(
                                                                    num:i(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='CORE_PLL_DFS1_CLK')) *
                                                                    num:i(node:fallback(../../../McuCoreDfs/McuDfs_1/DFS_CLK_Frequency, num:i(40000000))) +
                                                                    num:i(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                    num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                                ) div
                                                                num:f(
                                                                    node:fallback(../McuClkMux0Div0_Divisor, num:i(0)) + num:f(1)
                                                                )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 800000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 800000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:i(number(node:fallback(../McuClkMux0Div0_En, 'true') = 'true')) *
                                                                                num:f(
                                                                                    num:f(
                                                                                        num:i(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='CORE_PLL_DFS1_CLK')) *
                                                                                        num:i(node:fallback(../../../McuCoreDfs/McuDfs_1/DFS_CLK_Frequency, num:i(40000000))) +
                                                                                        num:i(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                        num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                                                    ) div
                                                                                    num:f(
                                                                                        node:fallback(../McuClkMux0Div0_Divisor, num:i(0)) + num:f(1)
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &gt; num:i(ecu:get('MCU.SysClock.Limits.LBIST_CLK'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &lt; num:i(0)
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.SysClock.Limits.LBIST_CLK')"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClkMux0Div1_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 0 Divider enable. <br />
                                                                This field enables the Clock Divider for DAPB_CLK. <br />
                                                                Sets the MC_CGM_0_MUX_0_DC_1[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                If it is set to 0 (Divider 0 is disabled), any write access to the MC_CGM_0_MUX_0_DC_1[DIV] fields is ignored and the DAPB_CLK clock remains disabled. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux0 Divider1 Enable (DAPB_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:0b3e9bb1-f7b1-0b2f-87e0-d6259d63bf49"/>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div1')"/>
                                                    </a:da>
                                                    <a:a name="READONLY" value="true"/>
                                                    <a:a name="VISIBLE" type="XPath">
                                                        <a:tst expr="contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div1')"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClkMux0Div1_Divisor" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 0 Division value. <br />
                                                                Sets the MC_CGM_0_MUX_0_DC_1[DIV] field register. <br />
                                                                MC_CGM_0_MUX_0_DC_1[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider. <br />
                                                                This parameter is enabled only if McuClkMux0Div1_En is true. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux0 Divisor1 (DAPB_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:b6a9ae12-7141-46e7-b67a-791ee873400e"/>
                                                    <a:da name="DEFAULT" value="5"/>
                                                    <a:a name="READONLY" value="true"/>
                                                    <a:a name="VISIBLE" type="XPath">
                                                        <a:tst expr="contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div1')"/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=255"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClockMux0Divider1_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux0 Divider1 Frequency (DAPB_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8c0bf2d0-3b15-4340-90ec-bd7353308c2f"/>
                                                    <a:a name="VISIBLE" type="XPath">
                                                        <a:tst expr="contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div1')"/>
                                                    </a:a>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuClkMux0Div1_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:i(number(node:fallback(../McuClkMux0Div1_En, 'true') = 'true')) *
                                                            num:f(
                                                                num:f(
                                                                    num:i(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='CORE_PLL_DFS1_CLK')) *
                                                                    num:i(node:fallback(../../../McuCoreDfs/McuDfs_1/DFS_CLK_Frequency, num:i(40000000))) +
                                                                    num:i(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                    num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                                ) div
                                                                num:f(
                                                                    node:fallback(../McuClkMux0Div1_Divisor, num:i(5)) + num:f(1)
                                                                )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 800000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 800000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:i(number(node:fallback(../McuClkMux0Div1_En, 'true') = 'true')) *
                                                                                num:f(
                                                                                    num:f(
                                                                                        num:i(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='CORE_PLL_DFS1_CLK')) *
                                                                                        num:i(node:fallback(../../../McuCoreDfs/McuDfs_1/DFS_CLK_Frequency, num:i(40000000))) +
                                                                                        num:i(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                        num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                                                    ) div
                                                                                    num:f(
                                                                                        node:fallback(../McuClkMux0Div1_Divisor, num:i(5)) + num:f(1)
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &gt; num:i(ecu:get('MCU.SysClock.Limits.DAPB_CLK'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &lt; num:i(0)
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.SysClock.Limits.DAPB_CLK')"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                            </v:ctr>

                                            <v:ctr name="McuCgm0ClockMux1" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container enables and selects the configuration clocks
                                                            for CLKOUT0.
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuCgm0ClockMux1"/>
                                                <a:a name="UUID" value="ECUC:a40639ad-adde-4328-afe7-4e81cb434d56"/>

                                                <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock mux is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:e429418b-1f63-463a-b4b2-cc018778243e"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(../McuClockMuxUnderMcuControl, 'false') = 'true') and
                                                                       (node:fallback(../../../McuPeriphDfs/McuDfs_5/McuDFSPort_En, 'false') = 'false') and
                                                                       (node:fallback(../../../McuPeriphDfs/McuDfs_2/McuDFSPort_En, 'false') = 'false') and
                                                                       (node:fallback(../../../McuPll_1/McuPll_Configuration/McuPllOdiv0_En, 'false') = 'false') and
                                                                       (node:fallback(../../../McuFXOSC/McuFxoscPowerDownCtr, 'false') = 'false')
                                                                     )"
                                                               true="If all source clocks are disabled, the McuClockMuxUnderMcuControl must be disable."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClkMux1_Source" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 1 Source Selection. <br />
                                                                Sets the MC_CGM_0_MUX_1_CSC[SELCTL] field register. <br />
                                                                MC_CGM_0_MUX_1_CSC[SELCTL] - This field selects the source clock for Clock Mux 1. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                     </a:a>
                                                     <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux1 Source"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:f048e84c-73b9-4b73-8324-3cfb7ab5456b"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM0.ClockMux1.Default')"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM0.ClockMux1.List')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'FXOSC_CLK') = 'FXOSC_CLK') and
                                                                       (node:fallback(../../../McuFXOSC/McuFxoscPowerDownCtr, 'false') = 'false') and
                                                                       (node:fallback(../McuClockMuxUnderMcuControl, 'false') = 'true')
                                                                     )"
                                                               true="If 'FXOSC_CLK' is selected as source clock, FXOSC ('McuFxoscPowerDownCtr') must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FXOSC_CLK') = 'PERIPH_PLL_PHI0_CLK') and
                                                                       (node:fallback(../../../McuPll_1/McuPll_Configuration/McuPllOdiv0_En, 'false') = 'false') and
                                                                       (node:fallback(../McuClockMuxUnderMcuControl, 'false') = 'true')
                                                                     )"
                                                               true="If 'PERIPH_PLL_PHI0_CLK' is selected as source clock, PeriphPLL_ODIV0 must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FXOSC_CLK') = 'PERIPH_PLL_DFS2_CLK') and
                                                                       (node:fallback(../../../McuPeriphDfs/McuDfs_2/McuDFSPort_En, 'false') = 'false') and
                                                                       (node:fallback(../McuClockMuxUnderMcuControl, 'false') = 'true')
                                                                     )"
                                                               true="If 'PERIPH_PLL_DFS2_CLK' is selected as source clock, DFS2 Output Port must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FXOSC_CLK') = 'PERIPH_PLL_DFS5_CLK') and
                                                                       (node:fallback(../../../McuPeriphDfs/McuDfs_5/McuDFSPort_En, 'false') = 'false') and
                                                                       (node:fallback(../McuClockMuxUnderMcuControl, 'false') = 'true')
                                                                     )"
                                                               true="If 'PERIPH_PLL_DFS5_CLK' is selected as source clock, DFS5 Output Port must be enabled."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClkMux1Div0_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 1 Divider enable. <br />
                                                                This field enables the Clock Divider for CLKOUT0. <br />
                                                                Sets the MC_CGM_0_MUX_1_DC_0[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                If it is set to 0 (Divider 0 is disabled), any write access to the MC_CGM_0_MUX_1_DC_0[DIV] field is ignored and the CLKOUT0 clock remains disabled. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux1 Divider0 Enable (CLKOUT0)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:0b3e9ba1-f7b1-469f-87e0-d6259163bf49"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                </v:var>

                                                <v:var name="McuClkMux1Div0_Divisor" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 1 Division value. <br />
                                                                Sets the MC_CGM_0_MUX_1_DC_0[DIV] field register. <br />
                                                                MC_CGM_0_MUX_1_DC_0[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider. <br />
                                                                This parameter is enabled only if McuClkMux1Div0_En is true. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux1 Divisor0 (CLKOUT0)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:f6481e12-7141-46e7-b67a-791ee873405e"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuClkMux1Div0_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=255"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClockMux1Divider0_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux1 Divider0 Frequency (CLKOUT0)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8cfbf260-3b15-4340-90ec-bd7753298c2f"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuClkMux1Div0_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:i(number(node:fallback(../McuClkMux1Div0_En, 'true') = 'true')) *
                                                            num:f(
                                                                num:f(
                                                                    num:i(number(node:fallback(../McuClkMux1_Source,'FIRC_CLK')='PERIPH_PLL_PHI0_CLK')) *
                                                                    num:i(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI0_Frequency, num:i(125000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux1_Source,'FIRC_CLK')='PERIPH_PLL_DFS2_CLK')) *
                                                                    num:f(node:fallback(../../../McuPeriphDfs/McuDfs_2/DFS_CLK_Frequency, num:i(960000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux1_Source,'FIRC_CLK')='PERIPH_PLL_DFS5_CLK')) *
                                                                    num:f(node:fallback(../../../McuPeriphDfs/McuDfs_5/DFS_CLK_Frequency, num:i(800000000))) +
                                                                    num:i(number(node:fallback(../McuClkMux1_Source,'FIRC_CLK')='FXOSC_CLK')) *
                                                                    num:f(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                ) div
                                                                num:f(
                                                                    node:fallback(../McuClkMux1Div0_Divisor, num:i(0)) + num:f(1)
                                                                )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 800000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 800000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:i(number(node:fallback(../McuClkMux1Div0_En, 'true') = 'true')) *
                                                                                num:f(
                                                                                    num:f(
                                                                                        num:i(number(node:fallback(../McuClkMux1_Source,'FIRC_CLK')='PERIPH_PLL_PHI0_CLK')) *
                                                                                        num:i(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI0_Frequency, num:i(125000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux1_Source,'FIRC_CLK')='PERIPH_PLL_DFS2_CLK')) *
                                                                                        num:f(node:fallback(../../../McuPeriphDfs/McuDfs_2/DFS_CLK_Frequency, num:i(960000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux1_Source,'FIRC_CLK')='PERIPH_PLL_DFS5_CLK')) *
                                                                                        num:f(node:fallback(../../../McuPeriphDfs/McuDfs_5/DFS_CLK_Frequency, num:i(800000000))) +
                                                                                        num:i(number(node:fallback(../McuClkMux1_Source,'FIRC_CLK')='FXOSC_CLK')) *
                                                                                        num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                                    ) div
                                                                                    num:f(
                                                                                        node:fallback(../McuClkMux1Div0_Divisor, num:i(0)) + num:f(1)
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &gt; num:i(ecu:get('MCU.AuxClock.Limits.CLKOUT0.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &lt; (num:i(ecu:get('MCU.AuxClock.Limits.CLKOUT0.Low')) * num:i(number(node:fallback(../McuClkMux1Div0_En, 'false') = 'true')))
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.CLKOUT0.High')"/>
                                                        <a:tst expr="&gt;=(ecu:get('MCU.AuxClock.Limits.CLKOUT0.Low') * num:i(number(node:fallback(../McuClkMux1Div0_En, 'false') = 'true')))"/>
                                                    </a:a>
                                                </v:var>

                                            </v:ctr>

                                            <v:ctr name="McuCgm0ClockMux2" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container enables and selects the configuration clocks
                                                            for CLKOUT1.
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuCgm0ClockMux2"/>
                                                <a:a name="UUID" value="ECUC:a40633ad-adde-4328-afe7-4ef1cb634d56"/>

                                                <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock mux is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:e4294a8b-1163-463a-b4b2-cc0f8778243e"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(../McuClockMuxUnderMcuControl, 'false') = 'true') and
                                                                       (node:fallback(../../../McuPeriphDfs/McuDfs_5/McuDFSPort_En, 'false') = 'false') and
                                                                       (node:fallback(../../../McuPeriphDfs/McuDfs_2/McuDFSPort_En, 'false') = 'false') and
                                                                       (node:fallback(../../../McuPll_1/McuPll_Configuration/McuPllOdiv0_En, 'false') = 'false') and
                                                                       (node:fallback(../../../McuFXOSC/McuFxoscPowerDownCtr, 'false') = 'false')
                                                                     )"
                                                               true="If all source clocks are disabled, the McuClockMuxUnderMcuControl must be disable."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClkMux2_Source" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 2 Source Selection. <br />
                                                                Sets the MC_CGM_0_MUX_2_CSC[SELCTL] field register. <br />
                                                                MC_CGM_0_MUX_2_CSC[SELCTL] - This field selects the source clock for Clock Mux 2. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                     </a:a>
                                                     <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux2 Source"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:1048e84c-73b9-4773-8324-3cfbdab5456b"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM0.ClockMux2.Default')"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM0.ClockMux2.List')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'FXOSC_CLK') = 'FXOSC_CLK') and
                                                                       (node:fallback(../../../McuFXOSC/McuFxoscPowerDownCtr, 'false') = 'false') and
                                                                       (node:fallback(../McuClockMuxUnderMcuControl, 'false') = 'true')
                                                                     )"
                                                               true="If 'FXOSC_CLK' is selected as source clock, FXOSC ('McuFxoscPowerDownCtr') must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FXOSC_CLK') = 'PERIPH_PLL_PHI0_CLK') and
                                                                       (node:fallback(../../../McuPll_1/McuPll_Configuration/McuPllOdiv0_En, 'false') = 'false') and
                                                                       (node:fallback(../McuClockMuxUnderMcuControl, 'false') = 'true')
                                                                     )"
                                                                true="If 'PERIPH_PLL_PHI0_CLK' is selected as source clock, PeriphPLL_ODIV0 must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FXOSC_CLK') = 'PERIPH_PLL_DFS2_CLK') and
                                                                       (node:fallback(../../../McuPeriphDfs/McuDfs_2/McuDFSPort_En, 'false') = 'false') and
                                                                       (node:fallback(../McuClockMuxUnderMcuControl, 'false') = 'true')
                                                                     )"
                                                               true="If 'PERIPH_PLL_DFS2_CLK' is selected as source clock, DFS2 Output Port must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FXOSC_CLK') = 'PERIPH_PLL_DFS5_CLK') and
                                                                       (node:fallback(../../../McuPeriphDfs/McuDfs_5/McuDFSPort_En, 'false') = 'false') and
                                                                       (node:fallback(../McuClockMuxUnderMcuControl, 'false') = 'true')
                                                                     )"
                                                               true="If 'PERIPH_PLL_DFS5_CLK' is selected as source clock, DFS5 Output Port must be enabled."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClkMux2Div0_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 2 Divider enable. <br />
                                                                This field enables the Clock Divider for CLKOUT1. <br />
                                                                Sets the MC_CGM_0_MUX_2_DC_0[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                If it is set to 0 (Divider 0 is disabled), any write access to the MC_CGM_0_MUX_2_DC_0[DIV] field is ignored and the CLKOUT1 clock remains disabled. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux2 Divider0 Enable (CLKOUT1)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:0b3e91a1-f7b1-4a9f-87e0-d6259163bf49"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                </v:var>

                                                <v:var name="McuClkMux2Div0_Divisor" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 2 Division value. <br />
                                                                Sets the MC_CGM_0_MUX_2_DC_0[DIV] field register. <br />
                                                                MC_CGM_0_MUX_2_DC_0[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider. <br />
                                                                This parameter is enabled only if McuClkMux2Div0_En is true. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux2 Divisor0 (CLKOUT1)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:b6484e12-7141-46e7-b87a-791ae873405a"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuClkMux2Div0_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=255"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClockMux2Divider0_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux2 Divider0 Frequency (CLKOUT1)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8ccb9260-3b15-4f40-90ec-bd775b298c2f"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuClkMux2Div0_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:i(number(node:fallback(../McuClkMux2Div0_En, 'true') = 'true')) *
                                                            num:f(
                                                                num:f(
                                                                    num:i(number(node:fallback(../McuClkMux2_Source,'FIRC_CLK')='PERIPH_PLL_PHI0_CLK')) *
                                                                    num:i(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI0_Frequency, num:i(125000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux2_Source,'FIRC_CLK')='PERIPH_PLL_DFS2_CLK')) *
                                                                    num:f(node:fallback(../../../McuPeriphDfs/McuDfs_2/DFS_CLK_Frequency, num:i(960000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux2_Source,'FIRC_CLK')='PERIPH_PLL_DFS5_CLK')) *
                                                                    num:f(node:fallback(../../../McuPeriphDfs/McuDfs_5/DFS_CLK_Frequency, num:i(800000000))) +
                                                                    num:i(number(node:fallback(../McuClkMux2_Source,'FIRC_CLK')='FXOSC_CLK')) *
                                                                    num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                ) div
                                                                num:f(
                                                                    node:fallback(../McuClkMux2Div0_Divisor, num:i(0)) + num:f(1)
                                                                )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 800000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 800000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:i(number(node:fallback(../McuClkMux2Div0_En, 'true') = 'true')) *
                                                                                num:f(
                                                                                    num:f(
                                                                                        num:i(number(node:fallback(../McuClkMux2_Source,'FIRC_CLK')='PERIPH_PLL_PHI0_CLK')) *
                                                                                        num:i(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI0_Frequency, num:i(125000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux2_Source,'FIRC_CLK')='PERIPH_PLL_DFS2_CLK')) *
                                                                                        num:f(node:fallback(../../../McuPeriphDfs/McuDfs_2/DFS_CLK_Frequency, num:i(960000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux2_Source,'FIRC_CLK')='PERIPH_PLL_DFS5_CLK')) *
                                                                                        num:f(node:fallback(../../../McuPeriphDfs/McuDfs_5/DFS_CLK_Frequency, num:i(800000000))) +
                                                                                        num:i(number(node:fallback(../McuClkMux2_Source,'FIRC_CLK')='FXOSC_CLK')) *
                                                                                        num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                                    ) div
                                                                                    num:f(
                                                                                        node:fallback(../McuClkMux2Div0_Divisor, num:i(0)) + num:f(1)
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &gt; num:i(ecu:get('MCU.AuxClock.Limits.CLKOUT1.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &lt; (num:i(ecu:get('MCU.AuxClock.Limits.CLKOUT1.Low')) * num:i(number(node:fallback(../McuClkMux2Div0_En, 'false') = 'true')))
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.CLKOUT1.High')"/>
                                                        <a:tst expr="&gt;=(ecu:get('MCU.AuxClock.Limits.CLKOUT1.Low') * num:i(number(node:fallback(../McuClkMux2Div0_En, 'false') = 'true')))"/>
                                                    </a:a>
                                                </v:var>
                                            </v:ctr>

                                            <v:ctr name="McuCgm0ClockMux3" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container enables and selects the configuration clocks
                                                            for PER_CLK. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuCgm0ClockMux3"/>
                                                <a:a name="UUID" value="ECUC:a40633ad-adde-43a8-ade7-4ef1cb634d56"/>

                                                <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock mux is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:e4d94a8b-1163-f63a-b4b2-cc0f8778843e"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMux3_Source" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 3 Source Selection. <br />
                                                                Sets the MC_CGM_0_MUX_3_CSC[SELCTL] field register. <br />
                                                                MC_CGM_0_MUX_3_CSC[SELCTL] - This field selects the source clock for Clock Mux 3. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                     </a:a>
                                                     <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux3 Source"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:104ae84c-71b9-4773-8324-3cfbd5b5456b"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM0.ClockMux3.Default')"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM0.ClockMux3.List')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'PERIPH_PLL_PHI1_CLK') and
                                                                       (node:fallback(../../../McuPll_1/McuPll_Configuration/McuPllOdiv1_En, 'false') = 'false')
                                                                     )"
                                                            true="If 'PERIPH_PLL_PHI1_CLK' is selected as source clock, PeriphPLL_ODIV1 must be enabled."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClkMux3Div0_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 3 Divider enable. <br />
                                                                This field enables the Clock Divider for PER_CLK. <br />
                                                                Sets the MC_CGM_0_MUX_3_DC_0[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                If it is set to 0 (Divider 0 is disabled), any write access to the MC_CGM_0_MUX_3_DC_0[DIV] field is ignored and the PER_CLK clock remains disabled. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux3 Divider0 Enable (PER_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:0b3191a1-f7b1-4a2f-87e0-d6250163bf49"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                </v:var>

                                                <v:var name="McuClkMux3Div0_Divisor" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 3 Division value. <br />
                                                                Sets the MC_CGM_0_MUX_3_DC_0[DIV] field register. <br />
                                                                MC_CGM_0_MUX_3_DC_0[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider. <br />
                                                                This parameter is enabled only if McuClkMux3Div0_En is true. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux3 Divisor0 (PER_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:b6464e12-7b41-46e7-b87a-791aa873405e"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuClkMux3Div0_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=255"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClockMux3Divider0_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux3 Divider0 Frequency (PER_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8cfb9660-3b15-4d40-90ec-bda75b298c2f"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuClkMux3Div0_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:i(number(node:fallback(../McuClkMux3Div0_En, 'true') = 'true')) *
                                                            num:f(
                                                                num:f(
                                                                    num:i(number(node:fallback(../McuClkMux3_Source,'FIRC_CLK')='PERIPH_PLL_PHI1_CLK')) *
                                                                    num:i(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI1_Frequency, num:i(80000000))) +
                                                                    num:i(number(node:fallback(../McuClkMux3_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                    num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                                ) div
                                                                num:f(
                                                                    node:fallback(../McuClkMux3Div0_Divisor, num:i(0)) + num:f(1)
                                                                )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 800000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 800000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:i(number(node:fallback(../McuClkMux3Div0_En, 'true') = 'true')) *
                                                                                num:f(
                                                                                    num:f(
                                                                                        num:i(number(node:fallback(../McuClkMux3_Source,'FIRC_CLK')='PERIPH_PLL_PHI1_CLK')) *
                                                                                        num:i(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI1_Frequency, num:i(80000000))) +
                                                                                        num:i(number(node:fallback(../McuClkMux3_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                        num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                                                    ) div
                                                                                    num:f(
                                                                                        node:fallback(../McuClkMux3Div0_Divisor, num:i(0)) + num:f(1)
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &gt; num:i(ecu:get('MCU.AuxClock.Limits.PER_CLK.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &lt; (num:i(ecu:get('MCU.AuxClock.Limits.PER_CLK.Low')) * num:i(number(node:fallback(../McuClkMux3Div0_En, 'false') = 'true')))
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.PER_CLK.High')"/>
                                                        <a:tst expr="&gt;=(ecu:get('MCU.AuxClock.Limits.PER_CLK.Low') * num:i(number(node:fallback(../McuClkMux3Div0_En, 'false') = 'true')))"/>
                                                    </a:a>
                                                </v:var>

                                            </v:ctr>

                                            <v:ctr name="McuCgm0ClockMux4" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container enables and selects the configuration clocks
                                                            for FTM_0_REF_CLK. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuCgm0ClockMux4"/>
                                                <a:a name="UUID" value="ECUC:a40631ad-add5-43a8-ade7-4ef1cf634d56"/>

                                                <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock mux is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:e4d94a8b-11f3-fc3a-b4b2-cc0f8778843e"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMux4_Source" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 4 Source Selection. <br />
                                                                Sets the MC_CGM_0_MUX_4_CSC[SELCTL] field register. <br />
                                                                MC_CGM_0_MUX_4_CSC[SELCTL] - This field selects the source clock for Clock Mux 4. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                     </a:a>
                                                     <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux4 Source"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:10fae84c-71b9-4a73-8324-3cfcd5b5456b"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM0.ClockMux4.Default')"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM0.ClockMux4.List')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'PERIPH_PLL_PHI1_CLK') and
                                                                       (node:fallback(../../../McuPll_1/McuPll_Configuration/McuPllOdiv1_En, 'false') = 'false')
                                                                     )"
                                                            true="If 'PERIPH_PLL_PHI1_CLK' is selected as source clock, PeriphPLL_ODIV1 must be enabled."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClkMux4Div0_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 4 Divider enable. <br />
                                                                This field enables the Clock Divider for FTM_0_REF_CLK. <br />
                                                                Sets the MC_CGM_0_MUX_4_DC_0[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                If it is set to 0 (Divider 0 is disabled), any write access to the MC_CGM_0_MUX_4_DC_0[DIV] field is ignored and the FTM_0_REF_CLK clock remains disabled. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux4 Divider0 Enable (FTM_0_REF_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:0b3196a1-f7b1-4a2f-b7e0-d62501632f49"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                </v:var>

                                                <v:var name="McuClkMux4Div0_Divisor" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 4 Division value. <br />
                                                                Sets the MC_CGM_0_MUX_4_DC_0[DIV] field register. <br />
                                                                MC_CGM_0_MUX_4_DC_0[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider. <br />
                                                                This parameter is enabled only if McuClkMux4Div0_En is true. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux4 Divisor0 (FTM_0_REF_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:b6464112-7b41-46d7-b87a-791aaa73405e"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuClkMux4Div0_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=255"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClockMux4Divider0_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux4 Divider0 Frequency (FTM_0_REF_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8cfb96a0-3b85-4d40-90ec-3da75b298c2f"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuClkMux4Div0_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:i(number(node:fallback(../McuClkMux4Div0_En, 'true') = 'true')) *
                                                            num:f(
                                                                num:f(
                                                                    num:i(number(node:fallback(../McuClkMux4_Source,'FIRC_CLK')='PERIPH_PLL_PHI1_CLK')) *
                                                                    num:i(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI1_Frequency, num:i(80000000))) +
                                                                    num:i(number(node:fallback(../McuClkMux4_Source,'FIRC_CLK')='FTM_0_EXT_REF_CLK')) *
                                                                    num:i(node:fallback(../../../../../McuExternalPAD_FTM_0_EXT_REF_CLK_FrequencyHz, num:i(20000000))) +
                                                                    num:i(number(node:fallback(../McuClkMux4_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                    num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                                ) div
                                                                num:f(
                                                                    node:fallback(../McuClkMux4Div0_Divisor, num:i(3)) + num:f(1)
                                                                )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 800000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 800000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:i(number(node:fallback(../McuClkMux4Div0_En, 'true') = 'true')) *
                                                                                num:f(
                                                                                    num:f(
                                                                                        num:i(number(node:fallback(../McuClkMux4_Source,'FIRC_CLK')='PERIPH_PLL_PHI1_CLK')) *
                                                                                        num:i(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI1_Frequency, num:i(80000000))) +
                                                                                        num:i(number(node:fallback(../McuClkMux4_Source,'FIRC_CLK')='FTM_0_EXT_REF_CLK')) *
                                                                                        num:i(node:fallback(../../../../../McuExternalPAD_FTM_0_EXT_REF_CLK_FrequencyHz, num:i(20000000))) +
                                                                                        num:i(number(node:fallback(../McuClkMux4_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                        num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                                                    ) div
                                                                                    num:f(
                                                                                        node:fallback(../McuClkMux4Div0_Divisor, num:i(3)) + num:f(1)
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(20000000)) &gt; num:i(ecu:get('MCU.AuxClock.Limits.FTM_0_REF_CLK.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(20000000)) &lt; (num:i(ecu:get('MCU.AuxClock.Limits.FTM_0_REF_CLK.Low')) * num:i(number(node:fallback(../McuClkMux4Div0_En, 'false') = 'true')))
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.FTM_0_REF_CLK.High')"/>
                                                        <a:tst expr="&gt;=(ecu:get('MCU.AuxClock.Limits.FTM_0_REF_CLK.Low') * num:i(number(node:fallback(../McuClkMux4Div0_En, 'false') = 'true')))"/>
                                                    </a:a>
                                                </v:var>

                                            </v:ctr>

                                            <v:ctr name="McuCgm0ClockMux5" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container enables and selects the configuration clocks
                                                            for FTM_1_REF_CLK. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuCgm0ClockMux5"/>
                                                <a:a name="UUID" value="ECUC:a40731ad-add5-43a8-adeb-4ef1c3634d56"/>

                                                <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock mux is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:e4d9ca8b-11f3-fc3a-b8b2-cc0f8778843e"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMux5_Source" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 5 Source Selection. <br />
                                                                Sets the MC_CGM_0_MUX_5_CSC[SELCTL] field register. <br />
                                                                MC_CGM_0_MUX_5_CSC[SELCTL] - This field selects the source clock for Clock Mux 5. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                     </a:a>
                                                     <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux5 Source"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:10fa684c-d1b9-ba73-8324-3cfcd5b5456b"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM0.ClockMux5.Default')"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM0.ClockMux5.List')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'PERIPH_PLL_PHI1_CLK') and
                                                                       (node:fallback(../../../McuPll_1/McuPll_Configuration/McuPllOdiv1_En, 'false') = 'false')
                                                                     )"
                                                            true="If 'PERIPH_PLL_PHI1_CLK' is selected as source clock, PeriphPLL_ODIV1 must be enabled."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClkMux5Div0_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 5 Divider enable. <br />
                                                                This field enables the Clock Divider for FTM_1_REF_CLK. <br />
                                                                Sets the MC_CGM_0_MUX_5_DC_0[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                If it is set to 0 (Divider 0 is disabled), any write access to the MC_CGM_0_MUX_5_DC_0[DIV] field is ignored and the FTM_1_REF_CLK clock remains disabled. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux5 Divider0 Enable (FTM_1_REF_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:0b519611-f7b1-fa2f-b7e0-d62501c32f49"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                </v:var>

                                                <v:var name="McuClkMux5Div0_Divisor" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 5 Division value. <br />
                                                                Sets the MC_CGM_0_MUX_5_DC_0[DIV] field register. <br />
                                                                MC_CGM_0_MUX_5_DC_0[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider. <br />
                                                                This parameter is enabled only if McuClkMux5Div0_En is true. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux5 Divisor0 (FTM_1_REF_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:b64641f2-7b4c-46d7-b8da-791aaa73405e"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuClkMux5Div0_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=255"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClockMux5Divider0_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux5 Divider0 Frequency (FTM_1_REF_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8cfb9620-3b85-4d40-90e6-3da74b298c2f"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuClkMux5Div0_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:i(number(node:fallback(../McuClkMux5Div0_En, 'true') = 'true')) *
                                                            num:f(
                                                                num:f(
                                                                    num:i(number(node:fallback(../McuClkMux5_Source,'FIRC_CLK')='PERIPH_PLL_PHI1_CLK')) *
                                                                    num:i(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI1_Frequency, num:i(80000000))) +
                                                                    num:i(number(node:fallback(../McuClkMux5_Source,'FIRC_CLK')='FTM_1_EXT_REF_CLK')) *
                                                                    num:i(node:fallback(../../../../../McuExternalPAD_FTM_1_EXT_REF_CLK_FrequencyHz, num:i(20000000))) +
                                                                    num:i(number(node:fallback(../McuClkMux5_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                    num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                                ) div
                                                                num:f(
                                                                    node:fallback(../McuClkMux5Div0_Divisor, num:i(3)) + num:f(1)
                                                                )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 800000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 800000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:i(number(node:fallback(../McuClkMux5Div0_En, 'true') = 'true')) *
                                                                                num:f(
                                                                                    num:f(
                                                                                        num:i(number(node:fallback(../McuClkMux5_Source,'FIRC_CLK')='PERIPH_PLL_PHI1_CLK')) *
                                                                                        num:i(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI1_Frequency, num:i(80000000))) +
                                                                                        num:i(number(node:fallback(../McuClkMux5_Source,'FIRC_CLK')='FTM_1_EXT_REF_CLK')) *
                                                                                        num:i(node:fallback(../../../../../McuExternalPAD_FTM_1_EXT_REF_CLK_FrequencyHz, num:i(20000000))) +
                                                                                        num:i(number(node:fallback(../McuClkMux5_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                        num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                                                    ) div
                                                                                    num:f(
                                                                                        node:fallback(../McuClkMux5Div0_Divisor, num:i(3)) + num:f(1)
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &gt; num:i(ecu:get('MCU.AuxClock.Limits.FTM_1_REF_CLK.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &lt; (num:i(ecu:get('MCU.AuxClock.Limits.FTM_1_REF_CLK.Low')) * num:i(number(node:fallback(../McuClkMux5Div0_En, 'false') = 'true')))
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.FTM_1_REF_CLK.High')"/>
                                                        <a:tst expr="&gt;=(ecu:get('MCU.AuxClock.Limits.FTM_1_REF_CLK.Low') * num:i(number(node:fallback(../McuClkMux5Div0_En, 'false') = 'true')))"/>
                                                    </a:a>
                                                </v:var>

                                            </v:ctr>

                                            <v:ctr name="McuCgm0ClockMux6" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container enables and selects the configuration clocks
                                                            for FLEXRAY_PE_CLK. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuCgm0ClockMux6"/>
                                                <a:a name="UUID" value="ECUC:a407317d-add5-43a8-ad3b-4ef1c36f4d56"/>

                                                <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock mux is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:e4d99a8b-1cf3-4c3a-08b2-cc0f8778843e"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMux6_Source" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 6 Source Selection. <br />
                                                                Sets the MC_CGM_0_MUX_6_CSC[SELCTL] field register. <br />
                                                                MC_CGM_0_MUX_6_CSC[SELCTL] - This field selects the source clock for Clock Mux 6. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                     </a:a>
                                                     <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux6 Source"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:10f2684c-d1b9-b573-83d4-3cfcd5b5456b"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM0.ClockMux6.Default')"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM0.ClockMux6.List')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'FXOSC_CLK') = 'FXOSC_CLK') and
                                                                       (node:fallback(../../../McuFXOSC/McuFxoscPowerDownCtr, 'false') = 'false')
                                                                     )"
                                                            true="If 'FXOSC_CLK' is selected as source clock, FXOSC ('McuFxoscPowerDownCtr') must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'PERIPH_PLL_PHI1_CLK') and
                                                                       (node:fallback(../../../McuPll_1/McuPll_Configuration/McuPllOdiv1_En, 'false') = 'false')
                                                                     )"
                                                            true="If 'PERIPH_PLL_PHI1_CLK' is selected as source clock, PeriphPLL_ODIV1 must be enabled."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClkMux6Div0_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 6 Divider enable. <br />
                                                                This field enables the Clock Divider for FLEXRAY_PE_CLK. <br />
                                                                Sets the MC_CGM_0_MUX_6_DC_0[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                If it is set to 0 (Divider 0 is disabled), any write access to the MC_CGM_0_MUX_6_DC_0[DIV] field is ignored and the FLEXRAY_PE_CLK clock remains disabled. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux6 Divider0 Enable (FLEXRAY_PE_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:0b519f11-f7b1-fa2f-b750-d6250ac32fe9"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                </v:var>

                                                <v:var name="McuClkMux6Div0_Divisor" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 6 Division value. <br />
                                                                Sets the MC_CGM_0_MUX_6_DC_0[DIV] field register. <br />
                                                                MC_CGM_0_MUX_6_DC_0[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider. <br />
                                                                This parameter is enabled only if McuClkMux6Div0_En is true. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux6 Divisor0 (FLEXRAY_PE_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:b6464af2-7bfc-46d7-b8ea-791a1a73405e"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuClkMux6Div0_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=255"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClockMux6Divider0_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux6 Divider0 Frequency (FLEXRAY_PE_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8cfb9a20-3b85-4d4e-9fe6-3da75b298c2f"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuClkMux6Div0_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:i(number(node:fallback(../McuClkMux6Div0_En, 'true') = 'true')) *
                                                            num:f(
                                                                num:f(
                                                                    num:i(number(node:fallback(../McuClkMux6_Source,'FIRC_CLK')='PERIPH_PLL_PHI1_CLK')) *
                                                                    num:i(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI1_Frequency, num:i(80000000))) +
                                                                    num:i(number(node:fallback(../McuClkMux6_Source,'FIRC_CLK')='FXOSC_CLK')) *
                                                                    num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000))) +
                                                                    num:i(number(node:fallback(../McuClkMux6_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                    num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                                ) div
                                                                num:f(
                                                                    node:fallback(../McuClkMux6Div0_Divisor, num:i(1)) + num:f(1)
                                                                )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 800000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 800000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:i(number(node:fallback(../McuClkMux6Div0_En, 'true') = 'true')) *
                                                                                num:f(
                                                                                    num:f(
                                                                                        num:i(number(node:fallback(../McuClkMux6_Source,'FIRC_CLK')='PERIPH_PLL_PHI1_CLK')) *
                                                                                        num:i(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI1_Frequency, num:i(80000000))) +
                                                                                        num:i(number(node:fallback(../McuClkMux6_Source,'FIRC_CLK')='FXOSC_CLK')) *
                                                                                        num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000))) +
                                                                                        num:i(number(node:fallback(../McuClkMux6_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                        num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                                                    ) div
                                                                                    num:f(
                                                                                        node:fallback(../McuClkMux6Div0_Divisor, num:i(1)) + num:f(1)
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &gt; num:i(ecu:get('MCU.AuxClock.Limits.FLEXRAY_PE_CLK.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &lt; (num:i(ecu:get('MCU.AuxClock.Limits.FLEXRAY_PE_CLK.Low')) * num:i(number(node:fallback(../McuClkMux6Div0_En, 'false') = 'true')))
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.FLEXRAY_PE_CLK.High')"/>
                                                        <a:tst expr="&gt;=(ecu:get('MCU.AuxClock.Limits.FLEXRAY_PE_CLK.Low') * num:i(number(node:fallback(../McuClkMux6Div0_En, 'false') = 'true')))"/>
                                                    </a:a>
                                                </v:var>

                                            </v:ctr>

                                            <v:ctr name="McuCgm0ClockMux7" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container enables and selects the configuration clocks
                                                            for CAN_PE_CLK. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuCgm0ClockMux7"/>
                                                <a:a name="UUID" value="ECUC:a407e17d-add5-43ab-a63b-41f1c36f4d56"/>

                                                <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock mux is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:e4g99a8b-1cf3-4c1a-08b2-cc3f9778843e"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMux7_Source" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 7 Source Selection. <br />
                                                                Sets the MC_CGM_0_MUX_7_CSC[SELCTL] field register. <br />
                                                                MC_CGM_0_MUX_7_CSC[SELCTL] - This field selects the source clock for Clock Mux 7. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                     </a:a>
                                                     <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux7 Source"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:11f2684c-d16b-b57b-13d4-3cfe75b5476b"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM0.ClockMux7.Default')"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM0.ClockMux7.List')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'FXOSC_CLK') = 'FXOSC_CLK') and
                                                                       (node:fallback(../../../McuFXOSC/McuFxoscPowerDownCtr, 'false') = 'false')
                                                                     )"
                                                            true="If 'FXOSC_CLK' is selected as source clock, FXOSC ('McuFxoscPowerDownCtr') must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'PERIPH_PLL_PHI2_CLK') and
                                                                       (node:fallback(../../../McuPll_1/McuPll_Configuration/McuPllOdiv2_En, 'false') = 'false')
                                                                     )"
                                                            true="If 'PERIPH_PLL_PHI2_CLK' is selected as source clock, PeriphPLL_ODIV2 must be enabled."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClockMux7_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux7 Frequency (CAN_PE_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8cfb9f20-35c5-fd41-90e6-3dc75b298c2f"/>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(
                                                                num:i(number(node:fallback(../McuClkMux7_Source,'FIRC_CLK')='PERIPH_PLL_PHI2_CLK')) *
                                                                num:i(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI2_Frequency, num:i(80000000))) +
                                                                num:i(number(node:fallback(../McuClkMux7_Source,'FIRC_CLK')='FXOSC_CLK')) *
                                                                num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000))) +
                                                                num:i(number(node:fallback(../McuClkMux7_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 800000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 800000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(
                                                                                    num:i(number(node:fallback(../McuClkMux7_Source,'FIRC_CLK')='PERIPH_PLL_PHI2_CLK')) *
                                                                                    num:i(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI2_Frequency, num:i(80000000))) +
                                                                                    num:i(number(node:fallback(../McuClkMux7_Source,'FIRC_CLK')='FXOSC_CLK')) *
                                                                                    num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000))) +
                                                                                    num:i(number(node:fallback(../McuClkMux7_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                    num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &gt; num:i(ecu:get('MCU.AuxClock.Limits.CAN_PE_CLK.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &lt; num:i(ecu:get('MCU.AuxClock.Limits.CAN_PE_CLK.Low'))
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.CAN_PE_CLK.High')"/>
                                                        <a:tst expr="&gt;=ecu:get('MCU.AuxClock.Limits.CAN_PE_CLK.Low')"/>
                                                    </a:a>
                                                </v:var>
                                            </v:ctr>

                                            <v:ctr name="McuCgm0ClockMux8" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container enables and selects the configuration clocks
                                                            for LIN_BAUD_CLK and LINFLEXD_CLK (always equal to LIN_BAUD_CLK / 2). <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuCgm0ClockMux8"/>
                                                <a:a name="UUID" value="ECUC:a407eb7d-add5-435b-a639-41f1c06f4d56"/>

                                                <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock mux is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:e4g98a8b-1c03-4c1a-48b2-cc3f977b843e"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMux8_Source" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 8 Source Selection. <br />
                                                                Sets the MC_CGM_0_MUX_8_CSC[SELCTL] field register. <br />
                                                                MC_CGM_0_MUX_8_CSC[SELCTL] - This field selects the source clock for Clock Mux 8. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                     </a:a>
                                                     <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux8 Source"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:11f2684c-d14b-b57b-13db-0cfe75b5f76b"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM0.ClockMux8.Default')"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM0.ClockMux8.List')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'FXOSC_CLK') = 'FXOSC_CLK') and
                                                                       (node:fallback(../../../McuFXOSC/McuFxoscPowerDownCtr, 'false') = 'false')
                                                                     )"
                                                            true="If 'FXOSC_CLK' is selected as source clock, FXOSC ('McuFxoscPowerDownCtr') must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'PERIPH_PLL_PHI3_CLK') and
                                                                       (node:fallback(../../../McuPll_1/McuPll_Configuration/McuPllOdiv3_En, 'false') = 'false')
                                                                     )"
                                                            true="If 'PERIPH_PLL_PHI3_CLK' is selected as source clock, PeriphPLL_ODIV3 must be enabled."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClockMux8_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux8 Frequency (LIN_BAUD_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8c239f20-3585-4d46-90e6-3dc75b298c2f"/>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(
                                                                num:i(number(node:fallback(../McuClkMux8_Source,'FIRC_CLK')='PERIPH_PLL_PHI3_CLK')) *
                                                                num:i(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI3_Frequency, num:i(133000000))) +
                                                                num:i(number(node:fallback(../McuClkMux8_Source,'FIRC_CLK')='FXOSC_CLK')) *
                                                                num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000))) +
                                                                num:i(number(node:fallback(../McuClkMux8_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 800000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 800000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(
                                                                                    num:i(number(node:fallback(../McuClkMux8_Source,'FIRC_CLK')='PERIPH_PLL_PHI3_CLK')) *
                                                                                    num:i(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI3_Frequency, num:i(133000000))) +
                                                                                    num:i(number(node:fallback(../McuClkMux8_Source,'FIRC_CLK')='FXOSC_CLK')) *
                                                                                    num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000))) +
                                                                                    num:i(number(node:fallback(../McuClkMux8_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                    num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &gt; num:i(ecu:get('MCU.AuxClock.Limits.LIN_BAUD_CLK.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &lt; num:i(ecu:get('MCU.AuxClock.Limits.LIN_BAUD_CLK.Low'))
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.LIN_BAUD_CLK.High')"/>
                                                        <a:tst expr="&gt;=ecu:get('MCU.AuxClock.Limits.LIN_BAUD_CLK.Low')"/>
                                                    </a:a>
                                                </v:var>

                                            </v:ctr>

                                            <v:ctr name="McuCgm0ClockMux9" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container enables and selects the configuration clocks
                                                            for GMAC_TS_CLK. <br />
                                                            This container is not supported on S32G3XX derivatives. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuCgm0ClockMux9"/>
                                                <a:a name="UUID" value="ECUC:a4073f7d-afd5-43a8-ad30-4af5c36b4d50"/>
                                                <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.CGM0.ClockMuxes.List'), 'CLKMUX_9')" />
                                                </a:a>

                                                <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock mux is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:e4d99a8b-10f3-4c3a-08b5-cc0f0778a43e"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMux9_Source" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 9 Source Selection. <br />
                                                                Sets the MC_CGM_0_MUX_9_CSC[SELCTL] field register. <br />
                                                                MC_CGM_0_MUX_9_CSC[SELCTL] - This field selects the source clock for Clock Mux 9. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                     </a:a>
                                                     <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux9 Source"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:10f2684c-dab9-b573-83dc-3cfcf5b5416b"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM0.ClockMux9.Default')"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM0.ClockMux9.List')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'PERIPH_PLL_PHI4_CLK') and
                                                                       (node:fallback(../../../McuPll_1/McuPll_Configuration/McuPllOdiv4_En, 'false') = 'false')
                                                                     )"
                                                            true="If 'PERIPH_PLL_PHI4_CLK' is selected as source clock, PeriphPLL_ODIV4 must be enabled."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClkMux9Div0_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 9 Divider enable. <br />
                                                                This field enables the Clock Divider for GMAC_TS_CLK. <br />
                                                                Sets the MC_CGM_0_MUX_9_DC_0[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                If it is set to 0 (Divider 0 is disabled), any write access to the MC_CGM_0_MUX_9_DC_0[DIV] field is ignored and the GMAC_TS_CLK clock remains disabled. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux9 Divider0 Enable (GMAC_TS_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:0b519f11-f7bb-fa2f-9750-d6250fc30fe9"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                </v:var>

                                                <v:var name="McuClkMux9Div0_Divisor" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 9 Division value. <br />
                                                                Sets the MC_CGM_0_MUX_9_DC_0[DIV] field register. <br />
                                                                MC_CGM_0_MUX_9_DC_0[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider. <br />
                                                                This parameter is enabled only if McuClkMux9Div0_En is true. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux9 Divisor0 (GMAC_TS_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:b6464af2-7bf0-46d7-b8ba-791a6a73405e"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuClkMux9Div0_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=255"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClockMux9Divider0_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux9 Divider0 Frequency (GMAC_TS_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8cfb9a00-3b85-4dfe-9fe6-3d375b298c2f"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuClkMux9Div0_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:i(number(node:fallback(../McuClkMux9Div0_En, 'true') = 'true')) *
                                                            num:f(
                                                                num:f(
                                                                    num:i(number(node:fallback(../McuClkMux9_Source,'FIRC_CLK')='PERIPH_PLL_PHI4_CLK')) *
                                                                    num:i(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI4_Frequency, num:i(200000000))) +
                                                                    num:i(number(node:fallback(../McuClkMux9_Source,'FIRC_CLK')='GMAC_EXT_TS_CLK')) *
                                                                    num:i(node:fallback(../../../../../McuExternalPAD_GMAC_EXT_TS_CLK_FrequencyHz, num:i(200000000))) +
                                                                    num:i(number(node:fallback(../McuClkMux9_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                    num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                                ) div
                                                                num:f(
                                                                    node:fallback(../McuClkMux9Div0_Divisor, num:i(0)) + num:f(1)
                                                                )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 800000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 800000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:i(number(node:fallback(../McuClkMux9Div0_En, 'true') = 'true')) *
                                                                                num:f(
                                                                                    num:f(
                                                                                        num:i(number(node:fallback(../McuClkMux9_Source,'FIRC_CLK')='PERIPH_PLL_PHI4_CLK')) *
                                                                                        num:i(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI4_Frequency, num:i(200000000))) +
                                                                                        num:i(number(node:fallback(../McuClkMux9_Source,'FIRC_CLK')='GMAC_EXT_TS_CLK')) *
                                                                                        num:i(node:fallback(../../../../../McuExternalPAD_GMAC_EXT_TS_CLK_FrequencyHz, num:i(200000000))) +
                                                                                        num:i(number(node:fallback(../McuClkMux9_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                        num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                                                    ) div
                                                                                    num:f(
                                                                                        node:fallback(../McuClkMux9Div0_Divisor, num:i(0)) + num:f(1)
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &gt; num:i(ecu:get('MCU.AuxClock.Limits.GMAC_TS_CLK.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &lt; (num:i(ecu:get('MCU.AuxClock.Limits.GMAC_TS_CLK.Low')) * num:i(number(node:fallback(../McuClkMux9Div0_En, 'false') = 'true')))
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.GMAC_TS_CLK.High')"/>
                                                        <a:tst expr="&gt;=(ecu:get('MCU.AuxClock.Limits.GMAC_TS_CLK.Low') * num:i(number(node:fallback(../McuClkMux9Div0_En, 'false') = 'true')))"/>
                                                    </a:a>
                                                </v:var>

                                            </v:ctr>

                                            <v:ctr name="McuCgm0ClockMux10" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container enables and selects the configuration clocks
                                                            for GMAC_0_TX_CLK. <br />
                                                            This container is not supported on S32G3XX derivatives. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuCgm0ClockMux10"/>
                                                <a:a name="UUID" value="ECUC:a4073f7d-afd0-43a8-a530-4af5b36b4d50"/>
                                                <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.CGM0.ClockMuxes.List'), 'CLKMUX_10')" />
                                                </a:a>

                                                <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock mux is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:e4d99a8b-10f9-4c3a-08ba-cc0f077ca43e"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMux10_Source" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 10 Source Selection. <br />
                                                                Sets the MC_CGM_0_MUX_10_CSC[SELCTL] field register. <br />
                                                                MC_CGM_0_MUX_10_CSC[SELCTL] - This field selects the source clock for Clock Mux 10. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                     </a:a>
                                                     <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux10 Source"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:10f4684c-dab9-b573-83dc-3cfcf7b5416b"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM0.ClockMux10.Default')"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM0.ClockMux10.List')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'PERIPH_PLL_PHI5_CLK') and
                                                                       (node:fallback(../../../McuPll_1/McuPll_Configuration/McuPllOdiv5_En, 'false') = 'false')
                                                                     )"
                                                            true="If 'PERIPH_PLL_PHI5_CLK' is selected as source clock, PeriphPLL_ODIV5 must be enabled."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClkMux10Div0_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 10 Divider enable. <br />
                                                                This field enables the Clock Divider for GMAC_0_TX_CLK. <br />
                                                                Sets the MC_CGM_0_MUX_10_DC_0[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                If it is set to 0 (Divider 0 is disabled), any write access to the MC_CGM_0_MUX_10_DC_0[DIV] field is ignored and the GMAC_0_TX_CLK clock remains disabled. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux10 Divider0 Enable (GMAC_0_TX_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:0b519f1c-f7bb-fa2f-9780-d625bfc30f19"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                </v:var>

                                                <v:var name="McuClkMux10Div0_Divisor" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 10 Division value. <br />
                                                                Sets the MC_CGM_0_MUX_10_DC_0[DIV] field register. <br />
                                                                MC_CGM_0_MUX_10_DC_0[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider. <br />
                                                                This parameter is enabled only if McuClkMux10Div0_En is true. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux10 Divisor0 (GMAC_0_TX_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:b6464a92-7bf0-46d7-b8ba-791b6a73f057"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuClkMux10Div0_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=255"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClockMux10Divider0_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux10 Divider0 Frequency (GMAC_0_TX_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8cfb9a70-3b8c-4dfe-9fe6-3d475bf98c2f"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuClkMux10Div0_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:i(number(node:fallback(../McuClkMux10Div0_En, 'true') = 'true')) *
                                                            num:f(
                                                                num:f(
                                                                    num:i(number(node:fallback(../McuClkMux10_Source,'FIRC_CLK')='PERIPH_PLL_PHI5_CLK')) *
                                                                    num:i(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI5_Frequency, num:i(125000000))) +
                                                                    num:i(number(node:fallback(../McuClkMux10_Source,'FIRC_CLK')='GMAC_0_EXT_TX_CLK')) *
                                                                    num:i(node:fallback(../../../../../McuExternalPAD_GMAC_0_EXT_TX_CLK_FrequencyHz, num:i(125000000))) +
                                                                    num:i(number(node:fallback(../McuClkMux10_Source,'FIRC_CLK')='GMAC_0_EXT_REF_CLK')) *
                                                                    num:i(node:fallback(../../../../../McuExternalPAD_GMAC_0_EXT_REF_CLK_FrequencyHz , num:i(100000000))) +
                                                                    num:i(number(node:fallback(../McuClkMux10_Source,'FIRC_CLK')='SERDES_0_LANE_0_TX')) *
                                                                    num:i(node:fallback(../../../../../McuInternalPAD_SERDES_0_LANE_0_TX_FrequencyHz, num:i(100000000))) +
                                                                    num:i(number(node:fallback(../McuClkMux10_Source,'FIRC_CLK')='SERDES_0_XPCS_0_TX')) *
                                                                    num:i(node:fallback(../../../../../McuInternalPAD_SERDES_0_XPCS_0_TX_FrequencyHz, num:i(100000000))) +
                                                                    num:i(number(node:fallback(../McuClkMux10_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                    num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                                ) div
                                                                num:f(
                                                                    node:fallback(../McuClkMux10Div0_Divisor, num:i(0)) + num:f(1)
                                                                )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 800000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 800000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:i(number(node:fallback(../McuClkMux10Div0_En, 'true') = 'true')) *
                                                                                num:f(
                                                                                    num:f(
                                                                                        num:i(number(node:fallback(../McuClkMux10_Source,'FIRC_CLK')='PERIPH_PLL_PHI5_CLK')) *
                                                                                        num:i(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI5_Frequency, num:i(125000000))) +
                                                                                        num:i(number(node:fallback(../McuClkMux10_Source,'FIRC_CLK')='GMAC_0_EXT_TX_CLK')) *
                                                                                        num:i(node:fallback(../../../../../McuExternalPAD_GMAC_0_EXT_TX_CLK_FrequencyHz, num:i(125000000))) +
                                                                                        num:i(number(node:fallback(../McuClkMux10_Source,'FIRC_CLK')='GMAC_0_EXT_REF_CLK')) *
                                                                                        num:i(node:fallback(../../../../../McuExternalPAD_GMAC_0_EXT_REF_CLK_FrequencyHz, num:i(100000000))) +
                                                                                        num:i(number(node:fallback(../McuClkMux10_Source,'FIRC_CLK')='SERDES_0_LANE_0_TX')) *
                                                                                        num:i(node:fallback(../../../../../McuInternalPAD_SERDES_0_LANE_0_TX_FrequencyHz, num:i(100000000))) +
                                                                                        num:i(number(node:fallback(../McuClkMux10_Source,'FIRC_CLK')='SERDES_0_XPCS_0_TX')) *
                                                                                        num:i(node:fallback(../../../../../McuInternalPAD_SERDES_0_XPCS_0_TX_FrequencyHz, num:i(100000000))) +
                                                                                        num:i(number(node:fallback(../McuClkMux10_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                        num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                                                    ) div
                                                                                    num:f(
                                                                                        node:fallback(../McuClkMux10Div0_Divisor, num:i(0)) + num:f(1)
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &gt; num:i(ecu:get('MCU.AuxClock.Limits.GMAC_0_TX_CLK.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &lt; (num:i(ecu:get('MCU.AuxClock.Limits.GMAC_0_TX_CLK.Low')) * num:i(number(node:fallback(../McuClkMux10Div0_En, 'false') = 'true')))
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.GMAC_0_TX_CLK.High')"/>
                                                        <a:tst expr="&gt;=(ecu:get('MCU.AuxClock.Limits.GMAC_0_TX_CLK.Low') * num:i(number(node:fallback(../McuClkMux10Div0_En, 'false') = 'true')))"/>
                                                    </a:a>
                                                </v:var>
                                            </v:ctr>

                                            <v:ctr name="McuCgm0ClockMux11" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container enables and selects the configuration clocks
                                                            for GMAC_0_RX_CLK. <br />
                                                            This container is not supported on S32G3XX derivatives. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuCgm0ClockMux11"/>
                                                <a:a name="UUID" value="ECUC:a407367d-afd0-4338-a53b-4afeb36b4d50"/>
                                                <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.CGM0.ClockMuxes.List'), 'CLKMUX_11')" />
                                                </a:a>

                                                <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock mux is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:e4d99abb-10fe-4c3a-06ba-cc0f077ca43e"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMux11_Source" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 11 Source Selection. <br />
                                                                Sets the MC_CGM_0_MUX_11_CSC[SELCTL] field register. <br />
                                                                MC_CGM_0_MUX_11_CSC[SELCTL] - This field selects the source clock for Clock Mux 11. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                     </a:a>
                                                     <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux11 Source"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:10f4684c-d9b9-b573-83d0-3cfef7b5416b"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM0.ClockMux11.Default')"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM0.ClockMux11.List')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'GMAC0_REF_DIV_CLK') and
                                                                       (node:fallback(../../McuCgm0ClockMux15/McuClkMux15Div0_En,'false') = 'false')
                                                                     )"
                                                            true="If 'GMAC0_REF_DIV_CLK' is selected as source clock, 'McuClkMux15Div0_En' must be enabled (i.e. McuCgm0ClockMux15/McuClkMux15Div0_En = 'true')."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClockMux11_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux11 Divider0 Frequency (GMAC_0_RX_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8cfb9a70-3b83-4efe-9fe6-3d47cbf98c2f"/>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(
                                                                num:i(number(node:fallback(../McuClkMux11_Source,'FIRC_CLK')='GMAC_0_EXT_RX_CLK')) *
                                                                num:i(node:fallback(../../../../../McuExternalPAD_GMAC_0_EXT_RX_CLK_FrequencyHz, num:i(125000000))) +
                                                                num:i(number(node:fallback(../McuClkMux11_Source,'FIRC_CLK')='GMAC0_REF_DIV_CLK')) *
                                                                num:i(node:fallback(../../McuCgm0ClockMux15/McuClockMux15Divider0_Frequency, num:i(20000000))) +
                                                                num:i(number(node:fallback(../McuClkMux11_Source,'FIRC_CLK')='SERDES_0_LANE_0_CDR')) *
                                                                num:i(node:fallback(../../../../../McuInternalPAD_SERDES_0_LANE_0_CDR_FrequencyHz, num:i(100000000))) +
                                                                num:i(number(node:fallback(../McuClkMux11_Source,'FIRC_CLK')='SERDES_0_XPCS_0_CDR')) *
                                                                num:i(node:fallback(../../../../../McuInternalPAD_SERDES_0_XPCS_0_CDR_FrequencyHz, num:i(100000000))) +
                                                                num:i(number(node:fallback(../McuClkMux11_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 800000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 800000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(
                                                                                    num:i(number(node:fallback(../McuClkMux11_Source,'FIRC_CLK')='GMAC_0_EXT_RX_CLK')) *
                                                                                    num:i(node:fallback(../../../../../McuExternalPAD_GMAC_0_EXT_RX_CLK_FrequencyHz, num:i(125000000))) +
                                                                                    num:i(number(node:fallback(../McuClkMux11_Source,'FIRC_CLK')='GMAC0_REF_DIV_CLK')) *
                                                                                    num:i(node:fallback(../../McuCgm0ClockMux15/McuClockMux15Divider0_Frequency, num:i(20000000))) +
                                                                                    num:i(number(node:fallback(../McuClkMux11_Source,'FIRC_CLK')='SERDES_0_LANE_0_CDR')) *
                                                                                    num:i(node:fallback(../../../../../McuInternalPAD_SERDES_0_LANE_0_CDR_FrequencyHz, num:i(100000000))) +
                                                                                    num:i(number(node:fallback(../McuClkMux11_Source,'FIRC_CLK')='SERDES_0_XPCS_0_CDR')) *
                                                                                    num:i(node:fallback(../../../../../McuInternalPAD_SERDES_0_XPCS_0_CDR_FrequencyHz, num:i(100000000))) +
                                                                                    num:i(number(node:fallback(../McuClkMux11_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                    num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &gt; num:i(ecu:get('MCU.AuxClock.Limits.GMAC_0_RX_CLK.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &lt; num:i(ecu:get('MCU.AuxClock.Limits.GMAC_0_RX_CLK.Low'))
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.GMAC_0_RX_CLK.High')"/>
                                                        <a:tst expr="&gt;=ecu:get('MCU.AuxClock.Limits.GMAC_0_RX_CLK.Low')"/>
                                                    </a:a>
                                                </v:var>
                                            </v:ctr>

                                            <v:ctr name="McuCgm0ClockMux12" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container enables and selects the configuration clocks
                                                            for QSPI_2X_CLK and QSPI_1X_CLK (always equal to QSPI_2X_CLK / 2). <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuCgm0ClockMux12"/>
                                                <a:a name="UUID" value="ECUC:a407e97d-add5-4350-a639-44f1c06c4d56"/>

                                                <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock mux is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:04g98a8b-1c03-461a-48be-cc3f977b843e"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMux12_Source" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 12 Source Selection. <br />
                                                                Sets the MC_CGM_0_MUX_12_CSC[SELCTL] field register. <br />
                                                                MC_CGM_0_MUX_12_CSC[SELCTL] - This field selects the source clock for Clock Mux 12. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                     </a:a>
                                                     <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux12 Source"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:51f2684c-d14b-bb7b-13db-ecfe75b5c76b"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM0.ClockMux12.Default')"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM0.ClockMux12.List')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'PERIPH_PLL_DFS1_CLK') and
                                                                       (node:fallback(../../../McuPeriphDfs/McuDfs_1/McuDFSPort_En, 'false') = 'false')
                                                                     )"
                                                            true="If 'PERIPH_PLL_DFS1_CLK' is selected as source clock, PeriphDFS1 must be enabled (i.e. McuPeriphDfs/McuDfs_1/McuDFSPort_En = 'true')."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClkMux12Div0_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 12 Divider enable. <br />
                                                                This field enables the Clock Divider for QSPI_2X_CLK. <br />
                                                                Sets the MC_CGM_0_MUX_12_DC_0[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                If it is set to 0 (Divider 0 is disabled), any write access to the MC_CGM_0_MUX_12_DC_0[DIV] field is ignored and the QSPI_2X_CLK clock remains disabled. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux12 Divider0 Enable (QSPI_2X_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:0b3e91a1-f7b1-4a9f-87e0-d2674361fb49"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                </v:var>

                                                <v:var name="McuClkMux12Div0_Divisor" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 12 Division value. <br />
                                                                Sets the MC_CGM_0_MUX_12_DC_0[DIV] field register. <br />
                                                                MC_CGM_0_MUX_12_DC_0[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider. <br />
                                                                This parameter is enabled only if McuClkMux12Div0_En is true. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux12 Divisor0 (QSPI_2X_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:b6484e12-7141-46e7-b87a-971ea837702a"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuClkMux12Div0_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=255"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClockMux12Divider0_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                <p>This is the frequency for the specific instance of the "McuClockReferencePoint" container.</p>
                                                                <p>Value calculated for user info. It is given in Hz.</p>
                                                                <p>For S32G274A_Rev1 only:</p>
                                                                <p>QSPI: QuadSPI DDR 200MHz and DDR 166MHz modes are not supported.</p>
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux12 Divider0 Frequency (QSPI_2X_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:6cfb9f20-358b-4de6-9036-3dc7fb298c2f"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuClkMux12Div0_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:i(number(node:fallback(../McuClkMux12Div0_En, 'true') = 'true')) *
                                                            num:f(
                                                                num:f(
                                                                    num:i(number(node:fallback(../McuClkMux12_Source,'FIRC_CLK')='PERIPH_PLL_DFS1_CLK')) *
                                                                    num:i(node:fallback(../../../McuPeriphDfs/McuDfs_1/DFS_CLK_Frequency, num:i(800000000))) +
                                                                    num:i(number(node:fallback(../McuClkMux12_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                    num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                                ) div
                                                                num:f(
                                                                    node:fallback(../McuClkMux12Div0_Divisor, num:i(0)) + num:f(1)
                                                                )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 800000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 800000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:i(number(node:fallback(../McuClkMux12Div0_En, 'true') = 'true')) *
                                                                                num:f(
                                                                                    num:f(
                                                                                        num:i(number(node:fallback(../McuClkMux12_Source,'FIRC_CLK')='PERIPH_PLL_DFS1_CLK')) *
                                                                                        num:i(node:fallback(../../../McuPeriphDfs/McuDfs_1/DFS_CLK_Frequency, num:i(800000000))) +
                                                                                        num:i(number(node:fallback(../McuClkMux12_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                        num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                                                    ) div
                                                                                    num:f(
                                                                                        node:fallback(../McuClkMux12Div0_Divisor, num:i(0)) + num:f(1)
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &gt; (num:i(ecu:get('MCU.AuxClock.Limits.QSPI_2X_CLK.REV1.High')) * num:i(number(node:fallback(../../../../../../McuGeneralConfiguration/McuHardwareVersion, 'Rev1') = 'Rev1')) +
                                                                                                            num:i(ecu:get('MCU.AuxClock.Limits.QSPI_2X_CLK.REV2.High')) * num:i(number(node:fallback(../../../../../../McuGeneralConfiguration/McuHardwareVersion, 'Rev1') = 'Rev2')))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &lt; (num:i(ecu:get('MCU.AuxClock.Limits.QSPI_2X_CLK.Low')) * num:i(number(node:fallback(../McuClkMux12Div0_En, 'false') = 'true')))
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=((ecu:get('MCU.AuxClock.Limits.QSPI_2X_CLK.REV1.High') * num:i(number(node:fallback(../../../../../../McuGeneralConfiguration/McuHardwareVersion, 'Rev1') = 'Rev1'))) + (ecu:get('MCU.AuxClock.Limits.QSPI_2X_CLK.REV2.High') *num:i(number(node:fallback(../../../../../../McuGeneralConfiguration/McuHardwareVersion, 'Rev2') = 'Rev2'))) )"/>
                                                        <a:tst expr="&gt;=(ecu:get('MCU.AuxClock.Limits.QSPI_2X_CLK.Low') * num:i(number(node:fallback(../McuClkMux12Div0_En, 'false') = 'true')))"/>
                                                    </a:a>
                                                </v:var>
                                            </v:ctr>

                                            <v:ctr name="McuCgm0ClockMux14" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container enables and selects the configuration clocks
                                                            for SDHC_CLK. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuCgm0ClockMux14"/>
                                                <a:a name="UUID" value="ECUC:a407e97d-addf-4b54-a6f9-4cf1ca6c4d56"/>

                                                <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock mux is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:b409da8b-1a03-af1a-48b4-cb3f977b843e"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMux14_Source" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 14 Source Selection. <br />
                                                                Sets the MC_CGM_0_MUX_14_CSC[SELCTL] field register. <br />
                                                                MC_CGM_0_MUX_14_CSC[SELCTL] - This field selects the source clock for Clock Mux 14. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                     </a:a>
                                                     <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux14 Source"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:51f26f4c-314f-bb7b-13df-ecf47bb5c76b"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM0.ClockMux14.Default')"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM0.ClockMux14.List')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'PERIPH_PLL_DFS3_CLK') and
                                                                       (node:fallback(../../../McuPeriphDfs/McuDfs_3/McuDFSPort_En, 'false') = 'false')
                                                                     )"
                                                            true="If 'PERIPH_PLL_DFS3_CLK' is selected as source clock, PeriphDFS3 must be enabled (i.e. McuPeriphDfs/McuDfs_3/McuDFSPort_En = 'true')."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClkMux14Div0_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 14 Divider enable. <br />
                                                                This field enables the Clock Divider for SDHC_CLK. <br />
                                                                Sets the MC_CGM_0_MUX_14_DC_0[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                If it is set to 0 (Divider 0 is disabled), any write access to the MC_CGM_0_MUX_14_DC_0[DIV] field is ignored and the SDHC_CLK clock remains disabled. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux14 Divider0 Enable (SDHC_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:0b3e91a1-f7b1-4a9f-87e0-d6522745ea41"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                </v:var>

                                                <v:var name="McuClkMux14Div0_Divisor" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 14 Division value. <br />
                                                                Sets the MC_CGM_0_MUX_14_DC_0[DIV] field register. <br />
                                                                MC_CGM_0_MUX_14_DC_0[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider. <br />
                                                                This parameter is enabled only if McuClkMux14Div0_En is true. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux14 Divisor0 (SDHC_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:b6484e12-7141-46e7-b87a-718bc825315e"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuClkMux14Div0_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=255"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClockMux14Divider0_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                <p>This is the frequency for the specific instance of the "McuClockReferencePoint" container.</p>
                                                                <p>Value calculated for user info. It is given in Hz.</p>
                                                                <p>For S32G274A_Rev1 only:</p>
                                                                <p>uSDHC: DDR-HS400 is not supported.</p>
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux14 Divider0 Frequency (SDHC_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8cfb9a70-3b83-4bfe-9fc6-3d47cba91c2f"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuClkMux14Div0_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:i(number(node:fallback(../McuClkMux14Div0_En, 'true') = 'true')) *
                                                            num:f(
                                                                num:f(
                                                                    num:i(number(node:fallback(../McuClkMux14_Source,'FIRC_CLK')='PERIPH_PLL_DFS3_CLK')) *
                                                                    num:i(node:fallback(../../../McuPeriphDfs/McuDfs_3/DFS_CLK_Frequency, num:i(800000000))) +
                                                                    num:i(number(node:fallback(../McuClkMux14_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                    num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                                ) div
                                                                num:f(
                                                                    node:fallback(../McuClkMux14Div0_Divisor, num:i(0)) + num:f(1)
                                                                )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 800000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 800000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:i(number(node:fallback(../McuClkMux14Div0_En, 'true') = 'true')) *
                                                                                num:f(
                                                                                    num:f(
                                                                                        num:i(number(node:fallback(../McuClkMux14_Source,'FIRC_CLK')='PERIPH_PLL_DFS3_CLK')) *
                                                                                        num:i(node:fallback(../../../McuPeriphDfs/McuDfs_3/DFS_CLK_Frequency, num:i(800000000))) +
                                                                                        num:i(number(node:fallback(../McuClkMux14_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                        num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                                                    ) div
                                                                                    num:f(
                                                                                        node:fallback(../McuClkMux14Div0_Divisor, num:i(0)) + num:f(1)
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &gt; (num:i(ecu:get('MCU.AuxClock.Limits.SDHC_CLK.REV1.High')) * num:i(number(node:fallback(../../../../../../McuGeneralConfiguration/McuHardwareVersion, 'Rev1') = 'Rev1')) +
                                                                                                            num:i(ecu:get('MCU.AuxClock.Limits.SDHC_CLK.REV2.High')) * num:i(number(node:fallback(../../../../../../McuGeneralConfiguration/McuHardwareVersion, 'Rev1') = 'Rev2')))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &lt; (num:i(ecu:get('MCU.AuxClock.Limits.SDHC_CLK.Low')) * num:i(number(node:fallback(../McuClkMux14Div0_En, 'false') = 'true')))
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=((ecu:get('MCU.AuxClock.Limits.SDHC_CLK.REV1.High') * num:i(number(node:fallback(../../../../../../McuGeneralConfiguration/McuHardwareVersion, 'Rev1') = 'Rev1'))) + (ecu:get('MCU.AuxClock.Limits.SDHC_CLK.REV2.High') *num:i(number(node:fallback(../../../../../../McuGeneralConfiguration/McuHardwareVersion, 'Rev1') = 'Rev2'))) )"/>
                                                        <a:tst expr="&gt;=(ecu:get('MCU.AuxClock.Limits.SDHC_CLK.Low') * num:i(number(node:fallback(../McuClkMux14Div0_En, 'false') = 'true')))"/>
                                                    </a:a>
                                                </v:var>
                                            </v:ctr>

                                            <v:ctr name="McuCgm0ClockMux15" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container enables and selects the configuration clocks
                                                            for GMAC0_REF_DIV_CLK. <br />
                                                            This container is not supported on S32G3XX derivatives. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuCgm0ClockMux15"/>
                                                <a:a name="UUID" value="ECUC:a407e97d-a4d8-4b5c-a6f9-4cf1ca6c4d56"/>
                                                <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.CGM0.ClockMuxes.List'), 'CLKMUX_15')" />
                                                </a:a>

                                                <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock mux is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:b429da8b-1a0c-af13-48b4-cb3f977b843e"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMux15_Source" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 15 Source Selection. <br />
                                                                Sets the MC_CGM_0_MUX_15_CSC[SELCTL] field register. <br />
                                                                MC_CGM_0_MUX_15_CSC[SELCTL] - This field selects the source clock for Clock Mux 15. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                     </a:a>
                                                     <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux15 Source"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:51fc614c-a14f-bb7b-13df-ecf47bb5c76b"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM0.ClockMux15.Default')"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM0.ClockMux15.List')"/>
                                                </v:var>

                                                <v:var name="McuClockMux15_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux15 Frequency (GMAC_0_REF_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8cfb9f20-3585-4d46-90e6-3dc75b298c2f"/>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(
                                                                num:i(number(node:fallback(../McuClkMux15_Source,'FIRC_CLK')='GMAC_0_EXT_REF_CLK')) *
                                                                num:i(node:fallback(../../../../../McuExternalPAD_GMAC_0_EXT_REF_CLK_FrequencyHz , num:i(100000000))) +
                                                                num:i(number(node:fallback(../McuClkMux15_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 800000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 800000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(
                                                                                    num:i(number(node:fallback(../McuClkMux15_Source,'FIRC_CLK')='GMAC_0_EXT_REF_CLK')) *
                                                                                    num:i(node:fallback(../../../../../McuExternalPAD_GMAC_0_EXT_REF_CLK_FrequencyHz , num:i(100000000))) +
                                                                                    num:i(number(node:fallback(../McuClkMux15_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                    num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &gt; num:i(ecu:get('MCU.AuxClock.Limits.GMAC_0_REF_CLK.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &lt; num:i(ecu:get('MCU.AuxClock.Limits.GMAC_0_REF_CLK.Low'))
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.GMAC_0_REF_CLK.High')"/>
                                                        <a:tst expr="&gt;=ecu:get('MCU.AuxClock.Limits.GMAC_0_REF_CLK.Low')"/>
                                                    </a:a>
                                                </v:var>


                                                <v:var name="McuClkMux15Div0_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 15 Divider enable. <br />
                                                                This field enables the Clock Divider for GMAC0_REF_DIV_CLK. <br />
                                                                Sets the MC_CGM_0_MUX_15_DC_0[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                If it is set to 0 (Divider 0 is disabled), any write access to the MC_CGM_0_MUX_15_DC_0[DIV] field is ignored and the GMAC0_REF_DIV_CLK clock remains disabled. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux15 Divider0 Enable (GMAC0_REF_DIV_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:0b3e91a1-f7b1-4a9f-87e0-6b17645aef49"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                </v:var>

                                                <v:var name="McuClkMux15Div0_Divisor" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 15 Division value. <br />
                                                                Sets the MC_CGM_0_MUX_15_DC_0[DIV] field register. <br />
                                                                MC_CGM_0_MUX_15_DC_0[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider. <br />
                                                                This parameter is enabled only if McuClkMux15Div0_En is true. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux15 Divisor0 (GMAC0_REF_DIV_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:b6484e12-7141-46e7-b87a-861cb847305a"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuClkMux15Div0_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=255"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClockMux15Divider0_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux15 Divider0 Frequency (GMAC0_REF_DIV_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8cfb9ac0-3b83-4cfe-9fc6-3d47cba91a2f"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuClkMux15Div0_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:i(number(node:fallback(../McuClkMux15Div0_En, 'true') = 'true')) *
                                                            num:f(
                                                                num:f(
                                                                    num:i(number(node:fallback(../McuClkMux15_Source,'FIRC_CLK')='GMAC_0_EXT_REF_CLK')) *
                                                                    num:i(node:fallback(../../../../../McuExternalPAD_GMAC_0_EXT_REF_CLK_FrequencyHz, num:i(100000000))) +
                                                                    num:i(number(node:fallback(../McuClkMux15_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                    num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                                ) div
                                                                num:f(
                                                                    node:fallback(../McuClkMux15Div0_Divisor, num:i(0)) + num:f(1)
                                                                )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 800000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 800000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:i(number(node:fallback(../McuClkMux15Div0_En, 'true') = 'true')) *
                                                                                num:f(
                                                                                    num:f(
                                                                                        num:i(number(node:fallback(../McuClkMux15_Source,'FIRC_CLK')='GMAC_0_EXT_REF_CLK')) *
                                                                                        num:i(node:fallback(../../../../../McuExternalPAD_GMAC_0_EXT_REF_CLK_FrequencyHz, num:i(100000000))) +
                                                                                        num:i(number(node:fallback(../McuClkMux15_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                        num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                                                    ) div
                                                                                    num:f(
                                                                                        node:fallback(../McuClkMux15Div0_Divisor, num:i(0)) + num:f(1)
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &gt; num:i(ecu:get('MCU.AuxClock.Limits.GMAC_0_REF_DIV_CLK.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &lt; (num:i(ecu:get('MCU.AuxClock.Limits.GMAC_0_REF_DIV_CLK.Low')) * num:i(number(node:fallback(../McuClkMux15Div0_En, 'false') = 'true')))
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.GMAC_0_REF_DIV_CLK.High')"/>
                                                        <a:tst expr="&gt;=(ecu:get('MCU.AuxClock.Limits.GMAC_0_REF_DIV_CLK.Low') * num:i(number(node:fallback(../McuClkMux15Div0_En, 'false') = 'true')))"/>
                                                    </a:a>
                                                </v:var>
                                            </v:ctr>

                                            <v:ctr name="McuCgm0ClockMux16" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container enables and selects the configuration clocks
                                                            for SPI_CLK. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuCgm0ClockMux16"/>
                                                <a:a name="UUID" value="ECUC:a407e97d-a4d8-4b5c-a6f9-fc41ac2d4d56"/>

                                                <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock mux is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:b429da8b-1a0c-af13-48b4-cb3f799e482a"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMux16_Source" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 16 Source Selection. <br />
                                                                Sets the MC_CGM_0_MUX_16_CSC[SELCTL] field register. <br />
                                                                MC_CGM_0_MUX_16_CSC[SELCTL] - This field selects the source clock for Clock Mux 16. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                     </a:a>
                                                     <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux16 Source"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:51fc614c-a14f-bb7b-13df-cef74ab5c34b"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM0.ClockMux16.Default')"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM0.ClockMux16.List')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'PERIPH_PLL_PHI7_CLK') and
                                                                       (node:fallback(../../../McuPll_1/McuPll_Configuration/McuPllOdiv7_En, 'false') = 'false')
                                                                     )"
                                                               true="If 'PERIPH_PLL_PHI7_CLK' is selected as source clock, PeriphPLL_ODIV7 must be enabled."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClockMux16_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux16 Frequency (SPI_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8cfb9ac0-3b83-4cfe-9fc6-3d47abc47c6e"/>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(
                                                                num:i(number(node:fallback(../McuClkMux16_Source,'FIRC_CLK')='PERIPH_PLL_PHI7_CLK')) *
                                                                num:i(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI7_Frequency, num:i(100000000))) +
                                                                num:i(number(node:fallback(../McuClkMux16_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 800000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 800000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(
                                                                                    num:i(number(node:fallback(../McuClkMux16_Source,'FIRC_CLK')='PERIPH_PLL_PHI7_CLK')) *
                                                                                    num:i(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI7_Frequency, num:i(100000000))) +
                                                                                    num:i(number(node:fallback(../McuClkMux16_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                    num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &gt; num:i(ecu:get('MCU.AuxClock.Limits.SPI_CLK.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &lt; num:i(ecu:get('MCU.AuxClock.Limits.SPI_CLK.Low'))
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.SPI_CLK.High')"/>
                                                        <a:tst expr="&gt;=ecu:get('MCU.AuxClock.Limits.SPI_CLK.Low')"/>
                                                    </a:a>
                                                </v:var>
                                            </v:ctr>

                                        </v:ctr>

                                        <v:ctr name="McuCgm1SettingConfig" type="IDENTIFIABLE">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        This container contains the configuration for the CGM_1 settings of the MCU.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="UUID" value="ECUC:f6051147-3bc6-424c-a177-afbb5af00bb9"/>

                                            <v:lst name="McuCgm1PcsConfig" type="MAP">
                                                <a:da name="MIN" type="XPath" expr="num:i(count(ecu:list('MCU.CGM1.CgmPcfs.List')))"/>
                                                <a:da name="INVALID" type="XPath">
                                                    <a:tst expr="count(./*) &gt; num:i(count(ecu:list('MCU.CGM1.CgmPcfs.List')))"
                                                        true="The number of McuCgm1PcsConfig more than maximum value allowed"/>
                                                </a:da>
                                                <v:ctr name="McuCgm1PcsConfig" type="IDENTIFIABLE">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This register defines the rate of frequency change and initial change value for the
                                                                progressive system clock switching when switching the system clock source to or from
                                                                the FXOSC_CLK on ramp-up and ramp-down, respectively. <br />
                                                                Note: Implementation Specific Container.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="TAB" value="McuPcsConfig"/>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS"  type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v mclass="PreCompile">VariantPostBuild</icc:v>
                                                        <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                                                    </a:a>
                                                    <a:a name="UUID" value="ECUC:0439e37c-4f3c-4035-8272-2f3b390b166b"/>

                                                    <v:var name="McuClockPcfsUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock PCFS is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="Mcu Clock PCFS under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:e425528b-2f66-453a-b0b2-ac018578243e"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:a name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                ( node:fallback(., 'true') = 'true' ) and
                                                                (node:fallback(../McuPCS_Name, 'PCFS_2') = 'PCFS_4') and
                                                                (( node:fallback(../../../../McuPll_0/McuPll_Configuration/McuPllOdiv0_En, 'true') = 'false' ) or
                                                                ( node:fallback(../../../../McuPll_0/McuPLLUnderMcuControl, 'true') = 'false' ))
                                                            )"
                                                            true="The fields Mcu/McuModuleConfiguration/McuClockSettingConfig/McuPll_0/McuPLLUnderMcuControl and Mcu/McuModuleConfiguration/McuClockSettingConfig/McuPll_0/McuPll_Configuration/McuPllOdiv0_En must be set to 'true' when PCFS is under MCU control."/>
                                                            <a:tst expr="
                                                            (
                                                                ( node:fallback(., 'true') = 'true' ) and
                                                                (node:fallback(../McuPCS_Name, 'PCFS_2') = 'PCFS_13') and
                                                                (( node:fallback(../../../../McuCoreDfs/McuDfs_2/McuDFSPort_En, 'true') = 'false' ) or
                                                                ( node:fallback(../../../../McuCoreDfs/McuDfs_2/McuDFSUnderMcuControl, 'true') = 'false' ))
                                                            )"
                                                            true="The fields Mcu/McuModuleConfiguration/McuClockSettingConfig/McuCoreDfs/McuDfs_2/McuDFSUnderMcuControl and Mcu/McuModuleConfiguration/McuClockSettingConfig/McuCoreDfs/McuDfs_2/McuDFSPort_En must be set to 'true' when PCFS is under MCU control."/>
                                                    </a:a>
                                                    </v:var>

                                                    <v:var name="McuPCS_Name" type="ENUMERATION">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    This is the name of the PCFS module. <br />
                                                                    PCFS_x corresponds to clock_src_x. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="LABEL" value="CGM1 PCFS Name"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:570c5ac3-80ce-4452-b846-0036152dc633"/>
                                                        <a:da name="DEFAULT" type="XPath" expr="ecu:list('MCU.CGM1.CgmPcfs.List')[num:i(node:fallback(node:current()/../@index, num:i(0)) + 1)]"/>
                                                        <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM1.CgmPcfs.List')"/>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="text:uniq(node:fallback(../../*/McuPCS_Name, ecu:list('MCU.CGM1.CgmPcfs.List')), node:fallback(., ecu:get('MCU.CGM1.CgmPcfs.Default')))"
                                                                false="Duplicated value, McuPCS_Name must be unique across McuCgm1PcsConfig."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuPCS_SourceFrequency" type="FLOAT">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    This is the frequency of the input clock source (i.e. the frequency of clk_src_x). <br />
                                                                    Note: This field must not be manually modified. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="LABEL" value="Source Frequency (Hz)"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:570c5ac3-80ce-4452-b846-31c3230044af"/>
                                                        <a:da name="DEFAULT" type="XPath">

                                                            <a:tst expr="num:f
                                                                            (
                                                                                num:f
                                                                                    (
                                                                                        (   (num:f(number( num:i( substring-after(node:fallback(../McuPCS_Name, 'PCFS_13'), 'PCFS_') ) = num:i(13) ))) *
                                                                                            (num:f(node:fallback(../../../../McuCoreDfs/McuDfs_2/DFS_CLK_Frequency, 40000000)))
                                                                                        )
                                                                                        +
                                                                                        (   (num:f(number( num:i( substring-after(node:fallback(../McuPCS_Name, 'PCFS_13'), 'PCFS_') ) = num:i(4) ))) *
                                                                                            (num:f(node:fallback(../../../../McuPll_0/McuPll_Parameter/PLL_PHI0_Frequency, 40000000)))
                                                                                        )
                                                                                    )
                                                                            )"/>
                                                        </a:da>
                                                        <a:a name="INVALID" type="Range">
                                                            <a:tst expr="&lt;=2000000000"/>
                                                            <a:tst expr="&gt;=0"/>
                                                        </a:a>
                                                        <a:a name="RANGE" type="XPath">
                                                            <a:tst expr="not(node:empty(node:fallback(., 80000000))) and
                                                                            (   num:f(node:fallback(., 0)) !=
                                                                                num:f
                                                                                    (
                                                                                            num:f
                                                                                            (
                                                                                                (   (num:f(number( num:i( substring-after(node:fallback(../McuPCS_Name, 'PCFS_13'), 'PCFS_') ) = num:i(13) ))) *
                                                                                                    (num:f(node:fallback(../../../../McuCoreDfs/McuDfs_2/DFS_CLK_Frequency, 40000000)))
                                                                                                )
                                                                                                +
                                                                                                (   (num:f(number( num:i( substring-after(node:fallback(../McuPCS_Name, 'PCFS_13'), 'PCFS_') ) = num:i(4) ))) *
                                                                                                    (num:f(node:fallback(../../../../McuPll_0/McuPll_Parameter/PLL_PHI0_Frequency, 40000000)))
                                                                                                )
                                                                                            )
                                                                                    )
                                                                            )"
                                                            true="Please press the button to calculate the value automatically."/>
                                                        </a:a>
                                                    </v:var>

                                                    <v:var name="McuPCS_MaxAllowableDynamicIDD" type="FLOAT">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    This value defines the maximum allowable change in current (IDD) per microsecond. <br />
                                                                    It depends on the application and on the power supply (how much current can it deliver rapidly). <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="LABEL" value="Max Allowable Dynamic IDD (mA/&#181;s)"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:570c5ac3-80ce-4452-b846-79a9f333c6fe"/>
                                                        <a:da name="DEFAULT" value="50"/>
                                                        <a:a name="INVALID" type="Range">
                                                            <a:tst expr="&lt;=150"/>
                                                            <a:tst expr="&gt;=0"/>
                                                        </a:a>
                                                    </v:var>
                                                </v:ctr>
                                            </v:lst>

                                            <v:var name="McuPCSStepDuration" type="INTEGER">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            The value provided specifies the number of microseconds per step (i.e. the duration of a step, given in microseconds). <br />
                                                            If more time is needed for the power supply to come to full load, this value should be increased. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="LABEL" value="PCS Step Duration (&#181;s)"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:56f0a853-6d6e-4bd6-89f7-04a0233e68be"/>
                                                <a:da name="DEFAULT" value="1"/>
                                                <a:a name="INVALID" type="Range">
                                                    <a:tst expr="&lt;=100"/>
                                                    <a:tst expr="&gt;=1"/>
                                                </a:a>
                                            </v:var>

                                            <v:var name="McuPCSSwitchDuration" type="INTEGER">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            MC_CGM_PCFS_SDUR register configuration. <br />
                                                            The value provided defines the duration of one PCS clock switch step in terms of 48MHz FIRC cycles. <br />
                                                            Note: This field must not be manually modified. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="LABEL" value="PCS Switch Duration"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:56f0a853-6d6e-4bd6-89f7-4b4ecab63d6b"/>
                                                <a:da name="DEFAULT" type="XPath">
                                                    <a:tst expr="num:i( num:i(48) * num:i( node:fallback(../McuPCSStepDuration, 1) ) )"/>
                                                </a:da>
                                                <a:a name="INVALID" type="Range">
                                                    <a:tst expr="&lt;=65535"/>
                                                    <a:tst expr="&gt;=0"/>
                                                </a:a>
                                                <a:a name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            not( node:empty( node:fallback(., 48) ) )
                                                            and
                                                            (
                                                                num:i( node:fallback(., 48) ) !=
                                                                (
                                                                    num:i( num:i(48) * num:i( node:fallback(../McuPCSStepDuration, 1) ) )
                                                                )
                                                            )
                                                        )
                                                    "
                                                    true="Please press the button to calculate the value automatically."/>
                                                </a:a>
                                            </v:var>

                                            <v:ctr name="McuCgm1ClockMux0" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container enables and selects the configuration clocks for
                                                            A53_CORE_CLK,
                                                            A53_CORE_DIV2_CLK (always equal A53_CORE_CLK / 2),
                                                            A53_CORE_DIV10_CLK(always equal A53_CORE_CLK / 10). <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuCgm1ClockMux0"/>
                                                <a:a name="UUID" value="ECUC:a456f9ad-adde-462b-ae97-4e81cd424d50"/>

                                                <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock mux is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock refference points  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM1 Clock Mux under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:e421418b-7f63-b5fa-b0b2-ac018378243e"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMux0_Source" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Select the Clock Mux 0 Source Selection.
                                                                Configure the MC_CGM_1_MUX_0_CSC[SELCTL] field register.
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                     </a:a>
                                                     <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM1 Clock Mux0 Source"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:fe4ae84c-73be-4b71-8a24-3cfb7ab5426b"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM1.ClockMux0.Default')"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM1.ClockMux0.List')"/>
                                                    <a:da name="WARNING" type="XPath">
                                                        <a:tst expr="(node:fallback(., 'FIRC_CLK') = 'CORE_PLL_DFS2_CLK')"
                                                               true="It is not recommended to use CORE_DFS2 as a clock source for A53_CLK. Use CORE_PLL_PHI0 instead."/>
                                                    </a:da>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'CORE_PLL_PHI0_CLK') and
                                                                       (node:fallback(../../../McuPll_0/McuPll_Configuration/McuPllOdiv0_En, 'false') = 'false')
                                                                     )"
                                                               true="If 'CORE_PLL_PHI0_CLK' is selected as source clock, CorePLL_ODIV0 must be enabled (i.e. McuPll_0/McuPll_Configuration/McuPllOdiv0_En = 'true')."/>
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'CORE_PLL_DFS2_CLK') and
                                                                       (node:fallback(../../../McuCoreDfs/McuDfs_2/McuDFSPort_En, 'false') = 'false')
                                                                     )"
                                                               true="If 'CORE_PLL_DFS2_CLK' is selected as source clock, CoreDFS_PORT2 must be enabled (i.e. McuCoreDfs/McuDfs_2/McuDFSPort_En = 'true')."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClockMux0_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux0 Frequency (A53_CORE_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8cfbf6d0-3b65-4340-96ec-bd7353308c2f"/>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(
                                                                num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                num:f(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='CORE_PLL_PHI0_CLK')) *
                                                                num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI0_Frequency, num:i(1000000000))) +
                                                                num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='CORE_PLL_DFS2_CLK')) *
                                                                num:f(node:fallback(../../../McuCoreDfs/McuDfs_2/DFS_CLK_Frequency, num:i(1000000000)))
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 1000000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 1000000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(
                                                                                    num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                    num:f(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                                    num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='CORE_PLL_PHI0_CLK')) *
                                                                                    num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI0_Frequency, num:i(1000000000))) +
                                                                                    num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='CORE_PLL_DFS2_CLK')) *
                                                                                    num:f(node:fallback(../../../McuCoreDfs/McuDfs_2/DFS_CLK_Frequency, num:i(1000000000)))
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &gt; (num:i(ecu:get('MCU.SysClock.Limits.A53_CORE_CLK.0_8GHZ.High')) * num:i(number(node:fallback(../../../../../../McuGeneralConfiguration/A53CoreFlavour, 'f1000MHz') = 'f800MHz')) +
                                                                                                            num:i(ecu:get('MCU.SysClock.Limits.A53_CORE_CLK.1_0GHZ.High')) * num:i(number(node:fallback(../../../../../../McuGeneralConfiguration/A53CoreFlavour, 'f1000MHz') = 'f1000MHz')) +
                                                                                                            num:i(ecu:get('MCU.SysClock.Limits.A53_CORE_CLK.1_1GHZ.High')) * num:i(number(node:fallback(../../../../../../McuGeneralConfiguration/A53CoreFlavour, 'f1000MHz') = 'f1100MHz')) +
                                                                                                            num:i(ecu:get('MCU.SysClock.Limits.A53_CORE_CLK.1_3GHZ.High')) * num:i(number(node:fallback(../../../../../../McuGeneralConfiguration/A53CoreFlavour, 'f1000MHz') = 'f1300MHz')))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &lt; num:i(0)
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=(  (ecu:get('MCU.SysClock.Limits.A53_CORE_CLK.0_8GHZ.High') * num:i(number(node:fallback(../../../../../../McuGeneralConfiguration/A53CoreFlavour, 'f1000MHz') = 'f800MHz'))) + (ecu:get('MCU.SysClock.Limits.A53_CORE_CLK.1_0GHZ.High') * num:i(number(node:fallback(../../../../../../McuGeneralConfiguration/A53CoreFlavour, 'f1000MHz') = 'f1000MHz'))) + (ecu:get('MCU.SysClock.Limits.A53_CORE_CLK.1_1GHZ.High') *num:i(number(node:fallback(../../../../../../McuGeneralConfiguration/A53CoreFlavour, 'f1000MHz') = 'f1100MHz')))  + (ecu:get('MCU.SysClock.Limits.A53_CORE_CLK.1_3GHZ.High') *num:i(number(node:fallback(../../../../../../McuGeneralConfiguration/A53CoreFlavour, 'f1000MHz') = 'f1300MHz'))) )"/>
                                                        <a:tst expr="&gt;=ecu:get('MCU.SysClock.Limits.A53_CORE_CLK.Low')"/>
                                                    </a:a>
                                                </v:var>
                                            </v:ctr>
                                        </v:ctr>

                                        <v:ctr name="McuCgm2SettingConfig" type="IDENTIFIABLE">
                                        <a:a name="DESC">
                                            <a:v>
                                                <![CDATA[EN:<html>
                                                    This container contains the configuration for the CGM_2 settings of the MCU.
                                                </html>]]>
                                            </a:v>
                                        </a:a>
                                        <a:a name="UUID" value="ECUC:f6751177-3bc6-424c-a777-afbb5af002a9"/>

                                            <v:lst name="McuCgm2PcsConfig" type="MAP">
                                                <a:da name="MIN" type="XPath" expr="num:i(count(ecu:list('MCU.CGM2.CgmPcfs.List')))"/>
                                                <a:da name="INVALID" type="XPath">
                                                    <a:tst expr="count(./*) &gt; num:i(count(ecu:list('MCU.CGM2.CgmPcfs.List')))"
                                                        true="The number of McuCgm2PcsConfig more than maximum value allowed"/>
                                                </a:da>
                                                <v:ctr name="McuCgm2PcsConfig" type="IDENTIFIABLE">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This register defines the rate of frequency change and initial change value for the
                                                                progressive system clock switching when switching the system clock source to or from
                                                                the FXOSC_CLK on ramp-up and ramp-down, respectively. <br />
                                                                Note: Implementation Specific Container.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="TAB" value="McuPcsConfig"/>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS"  type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v mclass="PreCompile">VariantPostBuild</icc:v>
                                                        <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                                                    </a:a>
                                                    <a:a name="UUID" value="ECUC:0439e37c-4f3c-4035-8272-73adf5af0a2d"/>

                                                    <v:var name="McuClockPcfsUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock PCFS is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="Mcu Clock PCFS under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:e425528b-2f66-453a-a2a0-ac018578243e"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:a name="INVALID" type="XPath">
                                                            <a:tst expr="
                                                                    (
                                                                        ( node:fallback(., 'true') = 'true' ) and
                                                                        (node:fallback(../McuPCS_Name, 'PCFS_2') = 'PCFS_33') and
                                                                        (( node:fallback(../../../../McuPll_2/McuPll_Configuration/McuPllOdiv1_En, 'true') = 'false' ) or
                                                                        ( node:fallback(../../../../McuPll_2/McuPLLUnderMcuControl, 'true') = 'false' ))
                                                                    )"
                                                                    true="The fields Mcu/McuModuleConfiguration/McuClockSettingConfig/McuPll_2/McuPLLUnderMcuControl and Mcu/McuModuleConfiguration/McuClockSettingConfig/McuPll_2/McuPll_Configuration/McuPllOdiv1_En must be set to 'true' when PCFS is under MCU control."/>
                                                            <a:tst expr="
                                                                (
                                                                    ( node:fallback(., 'true') = 'true' ) and
                                                                    (node:fallback(../McuPCS_Name, 'PCFS_2') = 'PCFS_62') and
                                                                    (( node:fallback(../../../../McuPll_2/McuPll_Configuration/McuPllOdiv0_En, 'true') = 'false' ) or
                                                                    ( node:fallback(../../../../McuPll_2/McuPLLUnderMcuControl, 'true') = 'false' ))
                                                                )"
                                                                true="The fields Mcu/McuModuleConfiguration/McuClockSettingConfig/McuPll_2/McuPLLUnderMcuControl and Mcu/McuModuleConfiguration/McuClockSettingConfig/McuPll_2/McuPll_Configuration/McuPllOdiv0_En must be set to 'true' when PCFS is under MCU control."/>
                                                            <a:tst expr="
                                                            (
                                                                ( node:fallback(., 'true') = 'true' ) and
                                                                (node:fallback(../McuPCS_Name, 'PCFS_2') = 'PCFS_63') and
                                                                (( node:fallback(../../../../McuCoreDfs/McuDfs_4/McuDFSPort_En, 'true') = 'false' ) or
                                                                ( node:fallback(../../../../McuCoreDfs/McuDfs_4/McuDFSUnderMcuControl, 'true') = 'false' ))
                                                            )"
                                                            true="The fields Mcu/McuModuleConfiguration/McuClockSettingConfig/McuCoreDfs/McuDfs_4/McuDFSUnderMcuControl and Mcu/McuModuleConfiguration/McuClockSettingConfig/McuCoreDfs/McuDfs_4/McuDFSPort_En must be set to 'true' when PCFS is under MCU control."/>
                                                    </a:a>
                                                    </v:var>

                                                    <v:var name="McuPCS_Name" type="ENUMERATION">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    This is the name of the PCFS module. <br />
                                                                    PCFS_x corresponds to clock_src_x. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="LABEL" value="CGM2 PCFS Name"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:570c5ac3-80ce-4452-b846-cb494b6fccb2"/>
                                                        <a:da name="DEFAULT" type="XPath" expr="ecu:list('MCU.CGM2.CgmPcfs.List')[num:i(node:fallback(node:current()/../@index, num:i(0)) + 1)]"/>
                                                        <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM2.CgmPcfs.List')"/>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="text:uniq(node:fallback(../../*/McuPCS_Name, ecu:list('MCU.CGM2.CgmPcfs.List')), node:fallback(., ecu:get('MCU.CGM2.CgmPcfs.Default')))"
                                                                false="Duplicated value, McuPCS_Name must be unique across McuCgm0PcsConfig."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuPCS_SourceFrequency" type="FLOAT">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    This is the frequency of the input clock source (i.e. the frequency of clk_src_x). <br />
                                                                    Note: This field must not be manually modified. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="LABEL" value="Source Frequency (MHz)"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:570c5ac3-80ce-4452-b846-d5f832a61c96"/>
                                                        <a:da name="DEFAULT" type="XPath">

                                                            <a:tst expr="num:f
                                                                            (
                                                                                num:f
                                                                                    (
                                                                                        (   (num:f(number( num:i( substring-after(node:fallback(../McuPCS_Name, 'PCFS_23'), 'PCFS_') ) = num:i(33) ))) *
                                                                                            (num:f(node:fallback(../../../../McuPll_2/McuPll_Parameter/PLL_PHI1_Frequency, 40000000)))
                                                                                        ) +
                                                                                        (   (num:f(number( num:i( substring-after(node:fallback(../McuPCS_Name, 'PCFS_23'), 'PCFS_') ) = num:i(23) ))) *
                                                                                            (num:f(node:fallback(../../../../McuPll_1/McuPll_Parameter/PLL_PHI5_Frequency, 40000000)))
                                                                                        ) +
                                                                                        (   (num:f(number( num:i( substring-after(node:fallback(../McuPCS_Name, 'PCFS_23'), 'PCFS_') ) = num:i(54) ))) *
                                                                                            (num:f(node:fallback(../../../McuCgm2ClockMux3/McuClockMux3Divider0_Frequency, 40000000)))
                                                                                        ) +
                                                                                        (   (num:f(number( num:i( substring-after(node:fallback(../McuPCS_Name, 'PCFS_23'), 'PCFS_') ) = num:i(56) ))) *
                                                                                            (num:f(node:fallback(../../../../../../McuExternalPAD_PFE_MAC_0_EXT_TX_CLK_FrequencyHz, 40000000)))
                                                                                        ) +
                                                                                        (   (num:f(number( num:i( substring-after(node:fallback(../McuPCS_Name, 'PCFS_23'), 'PCFS_') ) = num:i(57) ))) *
                                                                                            (num:f(node:fallback(../../../../../../McuExternalPAD_PFE_MAC_0_EXT_RX_CLK_FrequencyHz, 40000000)))
                                                                                        ) +
                                                                                        (   (num:f(number( num:i( substring-after(node:fallback(../McuPCS_Name, 'PCFS_23'), 'PCFS_') ) = num:i(58) ))) *
                                                                                            (num:f(node:fallback(../../../../../../McuExternalPAD_PFE_MAC_0_EXT_REF_CLK_FrequencyHz, 40000000)))
                                                                                        ) +
                                                                                        (   (num:f(number( num:i( substring-after(node:fallback(../McuPCS_Name, 'PCFS_23'), 'PCFS_') ) = num:i(62) ))) *
                                                                                            (num:f(node:fallback(../../../../McuPll_2/McuPll_Parameter/PLL_PHI0_Frequency, 40000000)))
                                                                                        ) +
                                                                                        (   (num:f(number( num:i( substring-after(node:fallback(../McuPCS_Name, 'PCFS_23'), 'PCFS_') ) = num:i(63) ))) *
                                                                                            (num:f(node:fallback(../../../../McuCoreDfs/McuDfs_4/DFS_CLK_Frequency, 40000000)))
                                                                                        )
                                                                                    )
                                                                            )"/>
                                                        </a:da>
                                                        <a:a name="INVALID" type="Range">
                                                            <a:tst expr="&lt;=2000000000"/>
                                                            <a:tst expr="&gt;=0"/>
                                                        </a:a>
                                                        <a:a name="RANGE" type="XPath">
                                                            <a:tst expr="not(node:empty(node:fallback(., 80000000))) and
                                                                            (   num:f(node:fallback(., 0)) !=
                                                                                num:f
                                                                                    (
                                                                                        num:f
                                                                                            (
                                                                                                (   (num:f(number( num:i( substring-after(node:fallback(../McuPCS_Name, 'PCFS_23'), 'PCFS_') ) = num:i(33) ))) *
                                                                                                    (num:f(node:fallback(../../../../McuPll_2/McuPll_Parameter/PLL_PHI1_Frequency, 40000000)))
                                                                                                ) +
                                                                                                (   (num:f(number( num:i( substring-after(node:fallback(../McuPCS_Name, 'PCFS_23'), 'PCFS_') ) = num:i(23) ))) *
                                                                                                    (num:f(node:fallback(../../../../McuPll_1/McuPll_Parameter/PLL_PHI5_Frequency, 40000000)))
                                                                                                ) +
                                                                                                (   (num:f(number( num:i( substring-after(node:fallback(../McuPCS_Name, 'PCFS_23'), 'PCFS_') ) = num:i(54) ))) *
                                                                                                    (num:f(node:fallback(../../../McuCgm2ClockMux3/McuClockMux3Divider0_Frequency, 40000000)))
                                                                                                ) +
                                                                                                (   (num:f(number( num:i( substring-after(node:fallback(../McuPCS_Name, 'PCFS_23'), 'PCFS_') ) = num:i(56) ))) *
                                                                                                    (num:f(node:fallback(../../../../../../McuExternalPAD_PFE_MAC_0_EXT_TX_CLK_FrequencyHz, 40000000)))
                                                                                                ) +
                                                                                                (   (num:f(number( num:i( substring-after(node:fallback(../McuPCS_Name, 'PCFS_23'), 'PCFS_') ) = num:i(57) ))) *
                                                                                                    (num:f(node:fallback(../../../../../../McuExternalPAD_PFE_MAC_0_EXT_RX_CLK_FrequencyHz, 40000000)))
                                                                                                ) +
                                                                                                (   (num:f(number( num:i( substring-after(node:fallback(../McuPCS_Name, 'PCFS_23'), 'PCFS_') ) = num:i(58) ))) *
                                                                                                    (num:f(node:fallback(../../../../../../McuExternalPAD_PFE_MAC_0_EXT_REF_CLK_FrequencyHz, 40000000)))
                                                                                                ) +
                                                                                                (   (num:f(number( num:i( substring-after(node:fallback(../McuPCS_Name, 'PCFS_23'), 'PCFS_') ) = num:i(62) ))) *
                                                                                                    (num:f(node:fallback(../../../../McuPll_2/McuPll_Parameter/PLL_PHI0_Frequency, 40000000)))
                                                                                                ) +
                                                                                                (   (num:f(number( num:i( substring-after(node:fallback(../McuPCS_Name, 'PCFS_23'), 'PCFS_') ) = num:i(63) ))) *
                                                                                                    (num:f(node:fallback(../../../../McuCoreDfs/McuDfs_4/DFS_CLK_Frequency, 40000000)))
                                                                                                )
                                                                                            )
                                                                                    )
                                                                            )"
                                                            true="Please press the button to calculate the value automatically."/>
                                                        </a:a>
                                                    </v:var>

                                                    <v:var name="McuPCS_MaxAllowableDynamicIDD" type="FLOAT">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    This value defines the maximum allowable change in current (IDD) per microsecond. <br />
                                                                    It depends on the application and on the power supply (how much current can it deliver rapidly). <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="LABEL" value="Max Allowable Dynamic IDD (mA/&#181;s)"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:570c5ac3-80ce-4452-b846-0b9bbba61a3c"/>
                                                        <a:da name="DEFAULT" value="50"/>
                                                        <a:a name="INVALID" type="Range">
                                                            <a:tst expr="&lt;=150"/>
                                                            <a:tst expr="&gt;=0"/>
                                                        </a:a>
                                                    </v:var>
                                                </v:ctr>
                                            </v:lst>

                                            <v:var name="McuPCSStepDuration" type="INTEGER">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            The value provided specifies the number of microseconds per step (i.e. the duration of a step, given in microseconds). <br />
                                                            If more time is needed for the power supply to come to full load, this value should be increased. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="LABEL" value="PCS Step Duration (&#181;s)"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:56f0a853-6d6e-4bd6-89f7-9d102345ed1d"/>
                                                <a:da name="DEFAULT" value="1"/>
                                                <a:a name="INVALID" type="Range">
                                                    <a:tst expr="&lt;=100"/>
                                                    <a:tst expr="&gt;=1"/>
                                                </a:a>
                                            </v:var>

                                            <v:var name="McuPCSSwitchDuration" type="INTEGER">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            MC_CGM_PCFS_SDUR register configuration. <br />
                                                            The value provided defines the duration of one PCS clock switch step in terms of 48MHz FIRC cycles. <br />
                                                            Note: This field must not be manually modified. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="LABEL" value="PCS Switch Duration"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:56f0a853-6d6e-4bd6-89f7-057e1fd03bd1"/>
                                                <a:da name="DEFAULT" type="XPath">
                                                    <a:tst expr="num:i( num:i(48) * num:i( node:fallback(../McuPCSStepDuration, 1) ) )"/>
                                                </a:da>
                                                <a:a name="INVALID" type="Range">
                                                    <a:tst expr="&lt;=65535"/>
                                                    <a:tst expr="&gt;=0"/>
                                                </a:a>
                                                <a:a name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            not( node:empty( node:fallback(., 48) ) )
                                                            and
                                                            (
                                                                num:i( node:fallback(., 48) ) !=
                                                                (
                                                                    num:i( num:i(48) * num:i( node:fallback(../McuPCSStepDuration, 1) ) )
                                                                )
                                                            )
                                                        )
                                                    "
                                                    true="Please press the button to calculate the value automatically."/>
                                                </a:a>
                                            </v:var>

                                            <v:ctr name="McuCgm2ClockMux0" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            On S32G2XX, this container enables and selects the configuration clocks for PFE_PE_CLK and PFE_SYS_CLK (always equal to PFE_PE_CLK / 2) <br />
                                                            On S32R45, this container enables and selects the configuration clocks for ACCEL_3_CLK and ACCEL_3_DIV3_CLK (always equal to ACCEL_3_CLK / 3). <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuCgm2ClockMux0"/>
                                                <a:a name="UUID" value="ECUC:a40689ad-adde-4328-afe1-4e81cd434d50"/>
                                                <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.CGM2.ClockMuxes.List'), 'CLKMUX_0')" />
                                                </a:a>

                                                <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock mux is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM2 Clock Mux under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:e421418b-1f63-450a-b0b2-ac018348243e"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMux0_Source" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 0 Source Selection. <br />
                                                                Sets the MC_CGM_2_MUX_0_CSC[SELCTL] field register. <br />
                                                                MC_CGM_2_MUX_0_CSC[SELCTL] - This field selects the source clock for Clock Mux 0. <br />
                                                            </html>]]>
                                                        </a:v>
                                                     </a:a>
                                                     <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM2 Clock Mux0 Source"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:f04ae84c-70b9-2b71-8324-3cfb7ab5426b"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM2.ClockMux0.Default')"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM2.ClockMux0.List')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'ACCEL_PLL_PHI1_CLK') and
                                                                       (node:fallback(../../../McuPll_2/McuPll_Configuration/McuPllOdiv1_En, 'false') = 'false')
                                                                     )"
                                                            true="If 'ACCEL_PLL_PHI1_CLK' is selected as source clock, AccelPLL_ODIV1 must be enabled (i.e. McuPll_2/McuPll_Configuration/McuPllOdiv1_En = 'true')."/>
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'ACCEL_PLL_PHI0_CLK_1') and
                                                                       (node:fallback(../../../McuPll_2/McuPll_Configuration/McuPllOdiv0_En, 'false') = 'false')
                                                                     )"
                                                            true="If 'ACCEL_PLL_PHI0_CLK' is selected as source clock, AccelPLL_ODIV0 must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'CORE_PLL_DFS3_CLK') and
                                                                       (node:fallback(../../../McuCoreDfs/McuDfs_3/McuDFSPort_En, 'false') = 'false')
                                                                     )"
                                                            true="If 'CORE_PLL_DFS3_CLK' is selected as source clock, McuCoreDfs/McuDfs_3/McuDFSPort_En must be enabled."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClockMux0_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux0 Frequency (DOF_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:9cfbf2d0-3b15-49f0-90ec-bd7354308c2f"/>
                                                    <a:a name="VISIBLE" type="XPath">
                                                        <a:tst expr="text:tolower(ecu:get('MCU.CGM2.ClockMux0.HasUndividedOutput')) = 'true'" />
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(
                                                                num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='ACCEL_PLL_PHI0_CLK_1')) *
                                                                num:f(node:fallback(../../../McuPll_2/McuPll_Parameter/PLL_PHI0_Frequency, num:i(800000000))) +
                                                                num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='ACCEL_PLL_PHI1_CLK')) *
                                                                num:f(node:fallback(../../../McuPll_2/McuPll_Parameter/PLL_PHI1_Frequency, num:i(800000000))) +
                                                                num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                num:f(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='CORE_PLL_DFS3_CLK')) *
                                                                num:f(node:fallback(../../../McuCoreDfs/McuDfs_3/DFS_CLK_Frequency, num:i(800000000)))
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    text:tolower(ecu:get('MCU.CGM2.ClockMux0.HasUndividedOutput')) = 'true'
                                                                )
                                                                and
                                                                (
                                                                    (
                                                                        not( node:empty( node:fallback(., 800000000) ) )
                                                                        and
                                                                        (
                                                                            num:f( node:fallback(., 800000000) ) !=
                                                                            (
                                                                                num:f(
                                                                                    num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='ACCEL_PLL_PHI0_CLK_1')) *
                                                                                    num:f(node:fallback(../../../McuPll_2/McuPll_Parameter/PLL_PHI0_Frequency, num:i(800000000))) +
                                                                                    num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='ACCEL_PLL_PHI1_CLK')) *
                                                                                    num:f(node:fallback(../../../McuPll_2/McuPll_Parameter/PLL_PHI1_Frequency, num:i(800000000))) +
                                                                                    num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                    num:f(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                                    num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='CORE_PLL_DFS3_CLK')) *
                                                                                    num:f(node:fallback(../../../McuCoreDfs/McuDfs_3/DFS_CLK_Frequency, num:i(800000000)))
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                    or
                                                                    (
                                                                        node:fallback(., num:i(40000000)) &gt; num:i(ecu:get('MCU.AuxClock.Limits.Cgm2Mux0_CLK'))
                                                                    )
                                                                    or
                                                                    (
                                                                        node:fallback(., num:i(40000000)) &lt; num:i(0)
                                                                    )
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.Cgm2Mux0_CLK')"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClkMux0Div0_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 0 Divider enable. <br />
                                                                This field enables the Clock Divider for: <br />
                                                                S32G2XX - PFE_PE_CLK, PFE_SYS_CLK <br />
                                                                S32R45  - ACCEL_3_CLK, ACCEL_3_DIV3_CLK <br />
                                                                Sets the MC_CGM_2_MUX_0_DC_0[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                If it is set to 0 (Divider 0 is disabled), any write access to the MC_CGM_2_MUX_0_DC_0[DIV] field is ignored and the PFE_PE_CLK, ACCEL_3_CLK clock remains disabled. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM2 Clock Mux0 Divider0 Enable (PFE_PE_CLK, ACCEL_3_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:4b3e9bb1-f7b1-462f-87e0-d6259d83bf49"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM2.ClockMux0.Divider0.DivEn.Default')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="(ecu:get('MCU.CGM2.ClockMux0.Divider0.Limit') = 0) and (node:value(.) = 'true')"
                                                               true="This field is not supported on this platform. Please uncheck this field."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClkMux0Div0_Divisor" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 0 Division value. <br />
                                                                Sets the MC_CGM_2_MUX_0_DC_0[DIV] field register. <br />
                                                                MC_CGM_2_MUX_0_DC_0[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider. <br />
                                                                This parameter is enabled only if McuClkMux0Div0_En is true. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM2 Clock Mux0 Divisor0 (PFE_PE_CLK, ACCEL_3_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:b678ae12-7141-46e7-b67a-791ee878400e"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="num:i(ecu:get('MCU.CGM2.ClockMux0.Divider0.Default'))"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuClkMux0Div0_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.CGM2.ClockMux0.Divider0.Limit')"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClockMux0Divider0_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux0 Divider0 Frequency (PFE_PE_CLK, ACCEL_3_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:9cfbf2d0-3b15-4340-90ec-bd7354308c2f"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuClkMux0Div0_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:i(number(node:fallback(../McuClkMux0Div0_En, 'true') = 'true')) *
                                                            num:f(
                                                                num:f(
                                                                    num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='ACCEL_PLL_PHI0_CLK')) *
                                                                    num:f(node:fallback(../../../McuPll_2/McuPll_Parameter/PLL_PHI0_Frequency, num:i(800000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='ACCEL_PLL_PHI1_CLK')) *
                                                                    num:f(node:fallback(../../../McuPll_2/McuPll_Parameter/PLL_PHI1_Frequency, num:i(800000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                    num:f(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                                ) div
                                                                num:f(
                                                                    node:fallback(../McuClkMux0Div0_Divisor, num:i(1)) + num:f(1)
                                                                )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 800000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 800000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:i(number(node:fallback(../McuClkMux0Div0_En, 'true') = 'true')) *
                                                                                num:f(
                                                                                    num:f(
                                                                                        num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='ACCEL_PLL_PHI0_CLK')) *
                                                                                        num:f(node:fallback(../../../McuPll_2/McuPll_Parameter/PLL_PHI0_Frequency, num:i(800000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='ACCEL_PLL_PHI1_CLK')) *
                                                                                        num:f(node:fallback(../../../McuPll_2/McuPll_Parameter/PLL_PHI1_Frequency, num:i(800000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                        num:f(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                                                    ) div
                                                                                    num:f(
                                                                                        node:fallback(../McuClkMux0Div0_Divisor, num:i(1)) + num:f(1)
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &gt; num:i(ecu:get('MCU.AuxClock.Limits.Cgm2Mux0_CLK'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &lt; num:i(0)
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.Cgm2Mux0_CLK')"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>
                                            </v:ctr>

                                            <v:ctr name="McuCgm2ClockMux1" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            On S32G2XX, this container enables and selects the configuration clocks for PFE_MAC_0_TX_DIV_CLK. <br />
                                                            On S32R45, this container enables and selects the configuration clocks for ACCEL_4_CLK. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuCgm2ClockMux1"/>
                                                <a:a name="UUID" value="ECUC:a15639ad-adde-4328-afe7-4e81cb434d56"/>
                                                <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.CGM2.ClockMuxes.List'), 'CLKMUX_1')" />
                                                </a:a>

                                                <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock mux is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM2 Clock Mux under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:e429418b-1f63-373a-b4b2-cc018778243e"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMux1_Source" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 1 Source Selection. <br />
                                                                Sets the MC_CGM_2_MUX_1_CSC[SELCTL] field register. <br />
                                                                MC_CGM_2_MUX_1_CSC[SELCTL] - This field selects the source clock for Clock Mux 1. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                     </a:a>
                                                     <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM2 Clock Mux1 Source"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:f048e84c-25b9-4b73-8324-3cfb7ab5456b"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM2.ClockMux1.Default')"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM2.ClockMux1.List')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'PERIPH_PLL_PHI5_CLK') and
                                                                       (node:fallback(../../../McuPll_1/McuPll_Configuration/McuPllOdiv5_En, 'false') = 'false')
                                                                     )"
                                                            true="If 'PERIPH_PLL_PHI5_CLK' is selected as source clock, PeriphPLL_ODIV5 must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'CORE_PLL_DFS4_CLK') and
                                                                       (node:fallback(../../../McuCoreDfs/McuDfs_4/McuDFSPort_En, 'false') = 'false')
                                                                     )"
                                                            true="If 'CORE_PLL_DFS4_CLK' is selected as source clock, CoresDFS4 must be enabled."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClockMux1_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux1 Frequency (SGM_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8cfbf260-3b15-8940-90ec-332b76cf42dc"/>
                                                    <a:a name="VISIBLE" value="false"/>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(
                                                                num:f(number(node:fallback(../McuClkMux1_Source,'FIRC_CLK')='CORE_PLL_DFS4_CLK')) *
                                                                num:f(node:fallback(../../../McuCoreDfs/McuDfs_4/DFS_CLK_Frequency, num:i(300000000))) +
                                                                num:f(number(node:fallback(../McuClkMux1_Source,'FIRC_CLK')='CORE_PLL_DFS4_CLK_1')) *
                                                                num:f(node:fallback(../../../McuCoreDfs/McuDfs_4/DFS_CLK_Frequency, num:i(300000000))) +
                                                                num:f(number(node:fallback(../McuClkMux1_Source,'FIRC_CLK')='PERIPH_PLL_PHI5_CLK')) *
                                                                num:f(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI5_Frequency, num:i(125000000))) +
                                                                num:f(number(node:fallback(../McuClkMux1_Source,'FIRC_CLK')='SERDES_1_LANE_0_TX')) *
                                                                num:f(node:fallback(../../../../../McuInternalPAD_SERDES_1_LANE_0_TX_FrequencyHz, num:i(330000000))) +
                                                                num:f(number(node:fallback(../McuClkMux1_Source,'FIRC_CLK')='SERDES_1_XPCS_0_TX')) *
                                                                num:f(node:fallback(../../../../../McuInternalPAD_SERDES_1_XPCS_0_TX_FrequencyHz, num:i(330000000))) +
                                                                num:f(number(node:fallback(../McuClkMux1_Source,'FIRC_CLK')='PFE_MAC_0_EXT_TX_CLK')) *
                                                                num:f(node:fallback(../../../../../McuExternalPAD_PFE_MAC_0_EXT_TX_CLK_FrequencyHz, num:i(960000000))) +
                                                                num:f(number(node:fallback(../McuClkMux1_Source,'FIRC_CLK')='PFE_MAC_0_EXT_REF_CLK')) *
                                                                num:f(node:fallback(../../../../../McuExternalPAD_PFE_MAC_0_EXT_REF_CLK_FrequencyHz, num:i(960000000))) +
                                                                num:f(number(node:fallback(../McuClkMux1_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                num:f(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 800000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 800000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(
                                                                                    num:f(number(node:fallback(../McuClkMux1_Source,'FIRC_CLK')='CORE_PLL_DFS4_CLK')) *
                                                                                    num:f(node:fallback(../../../McuCoreDfs/McuDfs_4/DFS_CLK_Frequency, num:i(300000000))) +
                                                                                    num:f(number(node:fallback(../McuClkMux1_Source,'FIRC_CLK')='CORE_PLL_DFS4_CLK_1')) *
                                                                                    num:f(node:fallback(../../../McuCoreDfs/McuDfs_4/DFS_CLK_Frequency, num:i(300000000))) +
                                                                                    num:f(number(node:fallback(../McuClkMux1_Source,'FIRC_CLK')='PERIPH_PLL_PHI5_CLK')) *
                                                                                    num:f(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI5_Frequency, num:i(125000000))) +
                                                                                    num:f(number(node:fallback(../McuClkMux1_Source,'FIRC_CLK')='SERDES_1_LANE_0_TX')) *
                                                                                    num:f(node:fallback(../../../../../McuInternalPAD_SERDES_1_LANE_0_TX_FrequencyHz, num:i(330000000))) +
                                                                                    num:f(number(node:fallback(../McuClkMux1_Source,'FIRC_CLK')='SERDES_1_XPCS_0_TX')) *
                                                                                    num:f(node:fallback(../../../../../McuInternalPAD_SERDES_1_XPCS_0_TX_FrequencyHz, num:i(330000000))) +
                                                                                    num:f(number(node:fallback(../McuClkMux1_Source,'FIRC_CLK')='PFE_MAC_0_EXT_TX_CLK')) *
                                                                                    num:f(node:fallback(../../../../../McuExternalPAD_PFE_MAC_0_EXT_TX_CLK_FrequencyHz, num:i(960000000))) +
                                                                                    num:f(number(node:fallback(../McuClkMux1_Source,'FIRC_CLK')='PFE_MAC_0_EXT_REF_CLK')) *
                                                                                    num:f(node:fallback(../../../../../McuExternalPAD_PFE_MAC_0_EXT_REF_CLK_FrequencyHz, num:i(960000000))) +
                                                                                    num:f(number(node:fallback(../McuClkMux1_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                    num:f(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &gt; num:i(ecu:get('MCU.AuxClock.Limits.Cgm2Mux1_CLK.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &lt; num:i(0)
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.Cgm2Mux1_CLK.High')"/>
                                                        <a:tst expr="&gt;=ecu:get('MCU.AuxClock.Limits.Cgm2Mux1_CLK.Low')"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClkMux1Div0_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 1 Divider enable. <br />
                                                                This field enables the Clock Divider for: <br />
                                                                S32G2XX - PFE_MAC_0_TX_DIV_CLK <br />
                                                                S32R45  - ACCEL_4_CLK <br />
                                                                Sets the MC_CGM_2_MUX_1_DC_0[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                If it is set to 0 (Divider 0 is disabled), any write access to the MC_CGM_2_MUX_1_DC_0[DIV] field is ignored and the PFE_MAC_0_TX_DIV_CLK, ACCEL_4_CLK clock remains disabled. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM2 Clock Mux1 Divider0 Enable (PFE_MAC_0_TX_DIV_CLK, ACCEL_4_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:0b3e9ba1-f7f1-469f-87e0-d6259163bf49"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM2.ClockMux1.Divider0.DivEn.Default')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="(ecu:get('MCU.CGM2.ClockMux1.Divider0.Limit') = 0) and (node:value(.) =' true')"
                                                               true="This field is not supported on this platform. Please uncheck this field."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClkMux1Div0_Divisor" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 1 Division value. <br />
                                                                Sets the MC_CGM_2_MUX_1_DC_0[DIV] field register. <br />
                                                                MC_CGM_2_MUX_1_DC_0[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider. <br />
                                                                This parameter is enabled only if McuClkMux1Div0_En is true. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM2 Clock Mux1 Divisor0 (PFE_MAC_0_TX_DIV_CLK, ACCEL_4_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:b6481e12-7141-46e7-b67a-791ee873405e"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM2.ClockMux1.Divider0.Default')"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuClkMux1Div0_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.CGM2.ClockMux1.Divider0.Limit')"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClockMux1Divider0_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux1 Divider0 Frequency (PFE_MAC_0_TX_DIV_CLK, ACCEL_4_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8cfbf260-3b15-8940-90ec-001f68b05415"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuClkMux1Div0_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:i(number(node:fallback(../McuClkMux1Div0_En, 'false') = 'true')) *
                                                            num:f(
                                                                num:f(
                                                                    num:f(number(node:fallback(../McuClkMux1_Source,'FIRC_CLK')='CORE_PLL_DFS4_CLK')) *
                                                                    num:f(node:fallback(../../../McuCoreDfs/McuDfs_4/DFS_CLK_Frequency, num:i(300000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux1_Source,'FIRC_CLK')='CORE_PLL_DFS4_CLK_1')) *
                                                                    num:f(node:fallback(../../../McuCoreDfs/McuDfs_4/DFS_CLK_Frequency, num:i(300000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux1_Source,'FIRC_CLK')='PERIPH_PLL_PHI5_CLK')) *
                                                                    num:f(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI5_Frequency, num:i(125000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux1_Source,'FIRC_CLK')='SERDES_1_LANE_0_TX')) *
                                                                    num:f(node:fallback(../../../../../McuInternalPAD_SERDES_1_LANE_0_TX_FrequencyHz, num:i(330000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux1_Source,'FIRC_CLK')='SERDES_1_XPCS_0_TX')) *
                                                                    num:f(node:fallback(../../../../../McuInternalPAD_SERDES_1_XPCS_0_TX_FrequencyHz, num:i(330000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux1_Source,'FIRC_CLK')='PFE_MAC_0_EXT_TX_CLK')) *
                                                                    num:f(node:fallback(../../../../../McuExternalPAD_PFE_MAC_0_EXT_TX_CLK_FrequencyHz, num:i(960000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux1_Source,'FIRC_CLK')='PFE_MAC_0_EXT_REF_CLK')) *
                                                                    num:f(node:fallback(../../../../../McuExternalPAD_PFE_MAC_0_EXT_REF_CLK_FrequencyHz, num:i(960000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux1_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                    num:f(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                                ) div
                                                                num:f(
                                                                    node:fallback(../McuClkMux1Div0_Divisor, num:i(0)) + num:f(1)
                                                                )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 800000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 800000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:i(number(node:fallback(../McuClkMux1Div0_En, 'false') = 'true')) *
                                                                                num:f(
                                                                                    num:f(
                                                                                        num:f(number(node:fallback(../McuClkMux1_Source,'FIRC_CLK')='CORE_PLL_DFS4_CLK')) *
                                                                                        num:f(node:fallback(../../../McuCoreDfs/McuDfs_4/DFS_CLK_Frequency, num:i(300000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux1_Source,'FIRC_CLK')='CORE_PLL_DFS4_CLK_1')) *
                                                                                        num:f(node:fallback(../../../McuCoreDfs/McuDfs_4/DFS_CLK_Frequency, num:i(300000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux1_Source,'FIRC_CLK')='PERIPH_PLL_PHI5_CLK')) *
                                                                                        num:f(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI5_Frequency, num:i(125000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux1_Source,'FIRC_CLK')='SERDES_1_LANE_0_TX')) *
                                                                                        num:f(node:fallback(../../../../../McuInternalPAD_SERDES_1_LANE_0_TX_FrequencyHz, num:i(330000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux1_Source,'FIRC_CLK')='SERDES_1_XPCS_0_TX')) *
                                                                                        num:f(node:fallback(../../../../../McuInternalPAD_SERDES_1_XPCS_0_TX_FrequencyHz, num:i(330000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux1_Source,'FIRC_CLK')='PFE_MAC_0_EXT_TX_CLK')) *
                                                                                        num:f(node:fallback(../../../../../McuExternalPAD_PFE_MAC_0_EXT_TX_CLK_FrequencyHz, num:i(960000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux1_Source,'FIRC_CLK')='PFE_MAC_0_EXT_REF_CLK')) *
                                                                                        num:f(node:fallback(../../../../../McuExternalPAD_PFE_MAC_0_EXT_REF_CLK_FrequencyHz, num:i(960000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux1_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                        num:f(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                                                    ) div
                                                                                    num:f(
                                                                                        node:fallback(../McuClkMux1Div0_Divisor, num:i(0)) + num:f(1)
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &gt; num:i(ecu:get('MCU.AuxClock.Limits.Cgm2Mux1_CLK.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &lt; num:i(0)
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.Cgm2Mux1_CLK.High')"/>
                                                        <a:tst expr="&gt;=(ecu:get('MCU.AuxClock.Limits.Cgm2Mux1_CLK.Low') * num:i(number(node:fallback(../McuClkMux1Div0_En, 'false') = 'true')))"/>
                                                    </a:a>
                                                </v:var>

                                            </v:ctr>

                                            <v:ctr name="McuGENCTRL1_EMAC0" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            On S32GXXX, this container enables and selects the configuration clocks for PFE_MAC_0_TX_CLK. <br />                                                            
                                                            This container is not supported on S32R45 platform. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuGENCTRL1_EMAC0"/>
                                                <a:a name="UUID" value="ECUC:71f43071-99df-4944-8697-e77f4b3960eb"/>
                                                <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.CGM2.ClockMuxes.List'), 'GENCTRL1')" />
                                                </a:a>

                                                <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock mux is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="Generic Control 1 under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:cd8f6f24-c5b0-4ad0-9444-7a688a53dc7e"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                </v:var>

                                                <v:var name="McuGENCTRL1_EMAC0_Source" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                PFE_MAC_0_TX_CLK Source Selection. <br />
                                                                Sets the GENCTRL1[CTRL] field register. <br />
                                                                Sets the GENCTRL1[CTRL] - This field selects the source clock for PFE_MAC_0_TX_CLK. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                     </a:a>
                                                     <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PFE_MAC_0_TX_CLK Source"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:334287a2-2afe-4bf0-8c31-3cf46659c1d2"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.GENCTRL1.EMAC0.Default')"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.GENCTRL1.EMAC0.List')"/>
                                                    <a:a name="VISIBLE" type="XPath">
                                                        <a:tst expr="contains(ecu:get('MCU.CGM2.ClockMuxes.List'), 'GENCTRL1_0')" />
                                                    </a:a>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="(  (node:fallback(../McuClockMuxUnderMcuControl, 'false') = 'true') and
                                                                        (node:fallback(., 'PFEMAC0_TX_DIV_CLK') = 'PFEMAC0_TX_DIV_CLK') and
                                                                        (node:fallback(../../McuCgm2ClockMux1/McuClkMux1Div0_En, 'false') = 'false')
                                                                     )"
                                                               true="If 'PFEMAC0_TX_DIV_CLK' is selected as source clock, McuClkMux1Div0_En must be enabled (i.e. McuCgm2ClockMux1/McuClkMux1Div0_En = 'true'). Otherwise uncheck McuClockMuxUnderMcuControl"/>
                                                        </a:da>
                                                </v:var>

                                                <v:var name="McuGENCTRL1_EMAC0_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="PFE_MAC_0_TX_CLK Frequency"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:08430774-a7f3-4f60-9dd5-900550b3b673"/>
                                                    <a:a name="VISIBLE" type="XPath">
                                                        <a:tst expr="contains(ecu:get('MCU.CGM2.ClockMuxes.List'), 'GENCTRL1_0')" />
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                            num:f(
                                                                num:f(number(node:fallback(../McuGENCTRL1_EMAC0_Source,'PFEMAC0_TX_DIV_CLK')='PFEMAC0_TX_DIV_CLK')) *
                                                                num:f(node:fallback(../../McuCgm2ClockMux1/McuClockMux1Divider0_Frequency, num:i(312500000))) +
                                                                num:f(number(node:fallback(../McuGENCTRL1_EMAC0_Source,'PFEMAC0_TX_DIV_CLK')='SERDES_1_XPCS_0_TX')) *
                                                                num:f(node:fallback(../../../../../McuInternalPAD_SERDES_1_XPCS_0_TX_FrequencyHz, num:i(125000000)))
                                                            )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 800000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 800000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(
                                                                                    num:f(number(node:fallback(../McuGENCTRL1_EMAC0_Source,'PFEMAC0_TX_DIV_CLK')='PFEMAC0_TX_DIV_CLK')) *
                                                                                    num:f(node:fallback(../../McuCgm2ClockMux1/McuClockMux1Divider0_Frequency, num:i(312500000))) +
                                                                                    num:f(number(node:fallback(../McuGENCTRL1_EMAC0_Source,'PFEMAC0_TX_DIV_CLK')='SERDES_1_XPCS_0_TX')) *
                                                                                    num:f(node:fallback(../../../../../McuInternalPAD_SERDES_1_XPCS_0_TX_FrequencyHz, num:i(125000000)))
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &gt; num:i(ecu:get('MCU.AuxClock.Limits.GENCTRL1Mux_CLK.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &lt; num:i(0)
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.GENCTRL1Mux_CLK.High')"/>
                                                        <a:tst expr="&gt;=num:i(ecu:get('MCU.AuxClock.Limits.GENCTRL1Mux_CLK.Low') * num:i(contains(ecu:get('MCU.CGM2.ClockMuxes.List'), 'GENCTRL1_0')))"/>
                                                    </a:a>
                                                </v:var>
                                            </v:ctr>

                                            <v:ctr name="McuGENCTRL1_EMAC1" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            On S32G3XX, this container enables and selects the configuration clocks for PFE_MAC_1_TX_CLK. <br />                            
                                                            This container is not supported on S32R45 and S32G2XX platforms. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuGENCTRL1_EMAC1"/>
                                                <a:a name="UUID" value="ECUC:71f43071-99df-4534-8697-e77f4b3960eb"/>
                                                <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.CGM2.ClockMuxes.List'), 'GENCTRL1_1')" />
                                                </a:a>

                                                <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock mux is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="Generic Control 1 under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:cd8f6f24-cc60-4ad0-9444-7a688a53dc7e"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                </v:var>

                                                <v:var name="McuGENCTRL1_EMAC1_Source" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                PFE_MAC_0_TX_CLK Source Selection. <br />
                                                                Sets the GENCTRL1[CTRL] field register. <br />
                                                                Sets the GENCTRL1[CTRL] - This field selects the source clock for PFE_MAC_1_TX_CLK. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                     </a:a>
                                                     <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PFE_MAC_1_TX_CLK Source"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:334287a2-2afe-4ca0-8c31-3cf46659c1d2"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.GENCTRL1.EMAC1.Default')"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.GENCTRL1.EMAC1.List')"/>
                                                    <a:a name="VISIBLE" type="XPath">
                                                        <a:tst expr="contains(ecu:get('MCU.CGM2.ClockMuxes.List'), 'GENCTRL1_1')" />
                                                    </a:a>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="(  (node:fallback(../McuClockMuxUnderMcuControl, 'false') = 'true') and
                                                                        (node:fallback(., 'PFEMAC1_TX_DIV_CLK') = 'PFEMAC1_TX_DIV_CLK') and
                                                                        (node:fallback(../../McuCgm2ClockMux2/McuClkMux2Div0_En, 'false') = 'false')
                                                                     )"
                                                               true="If 'PFEMAC1_TX_DIV_CLK' is selected as source clock, McuClkMux2Div0_En must be enabled (i.e. McuCgm2ClockMux2/McuClkMux2Div0_En = 'true'). Otherwise uncheck McuClockMuxUnderMcuControl"/>
                                                        </a:da>
                                                </v:var>

                                                <v:var name="McuGENCTRL1_EMAC1_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="PFE_MAC_1_TX_CLK Frequency"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:08430774-a7f3-4a20-9dd5-900550b3b673"/>
                                                    <a:a name="VISIBLE" type="XPath">
                                                        <a:tst expr="contains(ecu:get('MCU.CGM2.ClockMuxes.List'), 'GENCTRL1_1')" />
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                            num:f(
                                                                num:f(number(node:fallback(../McuGENCTRL1_EMAC1_Source,'PFEMAC1_TX_DIV_CLK')='PFEMAC1_TX_DIV_CLK')) *
                                                                num:f(node:fallback(../../McuCgm2ClockMux2/McuClockMux2Divider0_Frequency, num:i(125000000))) +
                                                                num:f(number(node:fallback(../McuGENCTRL1_EMAC1_Source,'PFEMAC1_TX_DIV_CLK')='SERDES_1_XPCS_1_TX')) *
                                                                num:f(node:fallback(../../../../../McuInternalPAD_SERDES_1_XPCS_1_TX_FrequencyHz, num:i(125000000)))
                                                            )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 800000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 800000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(
                                                                                    num:f(number(node:fallback(../McuGENCTRL1_EMAC1_Source,'PFEMAC1_TX_DIV_CLK')='PFEMAC1_TX_DIV_CLK')) *
                                                                                    num:f(node:fallback(../../McuCgm2ClockMux2/McuClockMux2Divider0_Frequency, num:i(125000000))) +
                                                                                    num:f(number(node:fallback(../McuGENCTRL1_EMAC1_Source,'PFEMAC1_TX_DIV_CLK')='SERDES_1_XPCS_1_TX')) *
                                                                                    num:f(node:fallback(../../../../../McuInternalPAD_SERDES_1_XPCS_1_TX_FrequencyHz, num:i(125000000)))
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &gt; num:i(ecu:get('MCU.AuxClock.Limits.GENCTRL1Mux_CLK.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &lt; num:i(0)
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.GENCTRL1Mux_CLK.High')"/>
                                                        <a:tst expr="&gt;=num:i(ecu:get('MCU.AuxClock.Limits.GENCTRL1Mux_CLK.Low') * num:i(contains(ecu:get('MCU.CGM2.ClockMuxes.List'), 'GENCTRL1_1')))"/>
                                                    </a:a>
                                                </v:var>
                                            </v:ctr>

                                            <v:ctr name="McuGENCTRL1_EMAC2" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            On S32G3XX, this container enables and selects the configuration clocks for PFE_MAC_2_TX_CLK. <br />
                                                            This container is not supported on S32R45 and S32G2XX platforms. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuGENCTRL1_EMAC2"/>
                                                <a:a name="UUID" value="ECUC:71f43071-99df-4944-8697-e32f4b3960eb"/>
                                                <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.CGM2.ClockMuxes.List'), 'GENCTRL1_2')" />
                                                </a:a>

                                                <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock mux is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="Generic Control 1 under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:cd8f6f24-c5b0-4ad0-9234-7a688a53dc7e"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                </v:var>

                                                <v:var name="McuGENCTRL1_EMAC2_Source" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                PFE_MAC_0_TX_CLK Source Selection. <br />
                                                                Sets the GENCTRL1[CTRL] field register. <br />
                                                                Sets the GENCTRL1[CTRL] - This field selects the source clock for PFE_MAC_2_TX_CLK. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                     </a:a>
                                                     <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PFE_MAC_2_TX_CLK Source"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:334287a2-2afe-4bf0-86f1-3cf46659c1d2"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.GENCTRL1.EMAC2.Default')"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.GENCTRL1.EMAC2.List')"/>
                                                    <a:a name="VISIBLE" type="XPath">
                                                        <a:tst expr="contains(ecu:get('MCU.CGM2.ClockMuxes.List'), 'GENCTRL1_2')" />
                                                    </a:a>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="(  (node:fallback(../McuClockMuxUnderMcuControl, 'false') = 'true') and
                                                                        (node:fallback(., 'PFEMAC2_TX_DIV_CLK') = 'PFEMAC2_TX_DIV_CLK') and
                                                                        (node:fallback(../../McuCgm2ClockMux3/McuClkMux3Div0_En, 'false') = 'false')
                                                                     )"
                                                               true="If 'PFEMAC2_TX_DIV_CLK' is selected as source clock, McuClkMux3Div0_En must be enabled (i.e. McuCgm2ClockMux3/McuClkMux3Div0_En = 'true'). Otherwise uncheck McuClockMuxUnderMcuControl"/>
                                                        </a:da>
                                                </v:var>

                                                <v:var name="McuGENCTRL1_EMAC2_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="PFE_MAC_2_TX_CLK Frequency"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:08430774-a7f3-4f60-9ea5-900550b3b673"/>
                                                    <a:a name="VISIBLE" type="XPath">
                                                        <a:tst expr="contains(ecu:get('MCU.CGM2.ClockMuxes.List'), 'GENCTRL1_2')" />
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                            num:f(
                                                                num:f(number(node:fallback(../McuGENCTRL1_EMAC2_Source,'PFEMAC2_TX_DIV_CLK')='PFEMAC2_TX_DIV_CLK')) *
                                                                num:f(node:fallback(../../McuCgm2ClockMux3/McuClockMux3Divider0_Frequency, num:i(125000000))) +
                                                                num:f(number(node:fallback(../McuGENCTRL1_EMAC2_Source,'PFEMAC2_TX_DIV_CLK')='SERDES_0_XPCS_1_TX')) *
                                                                num:f(node:fallback(../../../../../McuInternalPAD_SERDES_0_XPCS_1_TX_FrequencyHz, num:i(125000000)))
                                                            )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 800000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 800000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(
                                                                                    num:f(number(node:fallback(../McuGENCTRL1_EMAC2_Source,'PFEMAC2_TX_DIV_CLK')='PFEMAC2_TX_DIV_CLK')) *
                                                                                    num:f(node:fallback(../../McuCgm2ClockMux3/McuClockMux3Divider0_Frequency, num:i(125000000))) +
                                                                                    num:f(number(node:fallback(../McuGENCTRL1_EMAC2_Source,'PFEMAC2_TX_DIV_CLK')='SERDES_0_XPCS_1_TX')) *
                                                                                    num:f(node:fallback(../../../../../McuInternalPAD_SERDES_0_XPCS_1_TX_FrequencyHz, num:i(125000000)))
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &gt; num:i(ecu:get('MCU.AuxClock.Limits.GENCTRL1Mux_CLK.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &lt; num:i(0)
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.GENCTRL1Mux_CLK.High')"/>
                                                        <a:tst expr="&gt;=num:i(ecu:get('MCU.AuxClock.Limits.GENCTRL1Mux_CLK.Low') * num:i(contains(ecu:get('MCU.CGM2.ClockMuxes.List'), 'GENCTRL1_2')))"/>
                                                    </a:a>
                                                </v:var>
                                            </v:ctr>

                                            <v:ctr name="McuCgm2ClockMux2" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            On S32G3XX, this container enables and selects the configuration clocks for PFE_MAC_1_TX_DIV_CLK. <br />
                                                            On S32R45, this container enables and selects the configuration clocks for GMAC_1_TX_CLK. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuCgm2ClockMux2"/>
                                                <a:a name="UUID" value="ECUC:a45333ad-adde-4328-afe7-4ef1cb634d56"/>
                                                <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.CGM2.ClockMuxes.List'), 'CLKMUX_2')" />
                                                </a:a>

                                                <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock mux is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM2 Clock Mux under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:e4262a8b-1163-463a-b4b2-cc0f8778243e"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMux2_Source" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 2 Source Selection. <br />
                                                                Sets the MC_CGM_2_MUX_2_CSC[SELCTL] field register. <br />
                                                                MC_CGM_2_MUX_2_CSC[SELCTL] - This field selects the source clock for Clock Mux 2. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                     </a:a>
                                                     <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM2 Clock Mux2 Source"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:1048e84c-69b9-4773-8324-3cfbdab5456b"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM2.ClockMux2.Default')"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM2.ClockMux2.List')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'PERIPH_PLL_PHI5_CLK') and
                                                                       (node:fallback(../../../McuPll_1/McuPll_Configuration/McuPllOdiv5_En, 'false') = 'false')
                                                                     )"
                                                            true="If 'PERIPH_PLL_PHI5_CLK' is selected as source clock, PeriphPLL_ODIV5 must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'CORE_PLL_PHI0_CLK') and
                                                                       (node:fallback(../../../McuPll_0/McuPll_Configuration/McuPllOdiv0_En, 'false') = 'false')
                                                                     )"
                                                            true="If 'CORE_PLL_PHI0_CLK' is selected as source clock, PeriphPLL_ODIV0 must be enabled."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClkMux2Div0_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 2 Divider enable. <br />
                                                                This field enables the Clock Divider for: <br />
                                                                S32G2XX - PFE_MAC_1_TX_CLK <br />
                                                                S32G3XX - PFE_MAC_1_TX_DIV_CLK <br />
                                                                S32R45  - GMAC_1_TX_CLK <br />
                                                                S32V344 - REC_CLK <br />
                                                                Sets the MC_CGM_2_MUX_2_DC_0[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                If it is set to 0 (Divider 0 is disabled), any write access to the MC_CGM_2_MUX_2_DC_0[DIV] field is ignored and the PFE_MAC_1_TX_CLK, GMAC_1_TX_CLK, PFE_MAC_1_TX_DIV_CLK or REC_CLK clock remains disabled. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM2 Clock Mux2 Divider0 Enable (PFE_MAC_1_TX_CLK, GMAC_1_TX_CLK, REC_CLK, PFE_MAC_1_TX_DIV_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:0f3e91a1-f7b1-4a9f-87e0-d6259163bf49"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM2.ClockMux2.Divider0.DivEn.Default')"/>
                                                </v:var>

                                                <v:var name="McuClkMux2Div0_Divisor" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 2 Division value. <br />
                                                                Sets the MC_CGM_2_MUX_2_DC_0[DIV] field register. <br />
                                                                MC_CGM_2_MUX_2_DC_0[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider. <br />
                                                                This parameter is enabled only if McuClkMux2Div0_En is true. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM2 Clock Mux2 Divisor0 (PFE_MAC_1_TX_CLK, GMAC_1_TX_CLK, REC_CLK, PFE_MAC_1_TX_DIV_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:b6484e12-7141-46e7-b87a-791ae873405e"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM2.ClockMux2.Divider0.Default')"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuClkMux2Div0_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.CGM2.ClockMux2.Divider0.Limit')"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClockMux2Divider0_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux2 Divider0 Frequency (PFE_MAC_1_TX_CLK, GMAC_1_TX_CLK, REC_CLK, PFE_MAC_1_TX_DIV_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8cfb9260-3b15-4f40-90ec-bd775b298c2f"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuClkMux2Div0_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:i(number(node:fallback(../McuClkMux2Div0_En, 'false') = 'true')) *
                                                            num:f(
                                                                num:f(
                                                                    num:i(number(node:fallback(../McuClkMux2_Source,'FIRC_CLK')='CORE_PLL_PHI0_CLK')) *
                                                                    num:i(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI0_Frequency, num:i(125000000))) +
                                                                    num:i(number(node:fallback(../McuClkMux2_Source,'FIRC_CLK')='PERIPH_PLL_PHI5_CLK')) *
                                                                    num:i(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI5_Frequency, num:i(125000000))) +
                                                                    num:i(number(node:fallback(../McuClkMux2_Source,'FIRC_CLK')='SERDES_1_LANE_1_TX')) *
                                                                    num:i(node:fallback(../../../../../McuInternalPAD_SERDES_1_LANE_1_TX_FrequencyHz, num:i(330000000))) +
                                                                    num:i(number(node:fallback(../McuClkMux2_Source,'FIRC_CLK')='SERDES_1_LANE_0_TX')) *
                                                                    num:i(node:fallback(../../../../../McuInternalPAD_SERDES_1_LANE_0_TX_FrequencyHz, num:i(330000000))) +
                                                                    num:i(number(node:fallback(../McuClkMux2_Source,'FIRC_CLK')='SERDES_1_XPCS_1_TX')) *
                                                                    num:i(node:fallback(../../../../../McuInternalPAD_SERDES_1_XPCS_1_TX_FrequencyHz, num:i(330000000))) +
                                                                    num:i(number(node:fallback(../McuClkMux2_Source,'FIRC_CLK')='SERDES_1_XPCS_0_TX')) *
                                                                    num:i(node:fallback(../../../../../McuInternalPAD_SERDES_1_XPCS_0_TX_FrequencyHz, num:i(330000000))) +
                                                                    num:i(number(node:fallback(../McuClkMux2_Source,'FIRC_CLK')='PFE_MAC_1_EXT_TX_CLK')) *
                                                                    num:i(node:fallback(../../../../../McuExternalPAD_PFE_MAC_1_EXT_TX_CLK_FrequencyHz, num:i(960000000))) +
                                                                    num:i(number(node:fallback(../McuClkMux2_Source,'FIRC_CLK')='PFE_MAC_1_EXT_REF_CLK')) *
                                                                    num:i(node:fallback(../../../../../McuExternalPAD_PFE_MAC_1_EXT_REF_CLK_FrequencyHz, num:i(960000000))) +
                                                                    num:i(number(node:fallback(../McuClkMux2_Source,'FIRC_CLK')='GMAC_1_EXT_TX_CLK')) *
                                                                    num:i(node:fallback(../../../../../McuExternalPAD_GMAC_1_EXT_TX_CLK_FrequencyHz, num:i(125000000))) +
                                                                    num:i(number(node:fallback(../McuClkMux2_Source,'FIRC_CLK')='GMAC_1_EXT_REF_CLK')) *
                                                                    num:i(node:fallback(../../../../../McuExternalPAD_GMAC_1_EXT_REF_CLK_FrequencyHz, num:i(50000000))) +
                                                                    num:i(number(node:fallback(../McuClkMux2_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                    num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                                ) div
                                                                num:f(
                                                                    node:fallback(../McuClkMux2Div0_Divisor, num:i(0)) + num:f(1)
                                                                )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 800000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 800000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:i(number(node:fallback(../McuClkMux2Div0_En, 'false') = 'true')) *
                                                                                num:f(
                                                                                    num:f(
                                                                                        num:i(number(node:fallback(../McuClkMux2_Source,'FIRC_CLK')='CORE_PLL_PHI0_CLK')) *
                                                                                        num:i(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI0_Frequency, num:i(125000000))) +
                                                                                        num:i(number(node:fallback(../McuClkMux2_Source,'FIRC_CLK')='PERIPH_PLL_PHI5_CLK')) *
                                                                                        num:i(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI5_Frequency, num:i(125000000))) +
                                                                                        num:i(number(node:fallback(../McuClkMux2_Source,'FIRC_CLK')='SERDES_1_LANE_1_TX')) *
                                                                                        num:i(node:fallback(../../../../../McuInternalPAD_SERDES_1_LANE_1_TX_FrequencyHz, num:i(330000000))) +
                                                                                        num:i(number(node:fallback(../McuClkMux2_Source,'FIRC_CLK')='SERDES_1_LANE_0_TX')) *
                                                                                        num:i(node:fallback(../../../../../McuInternalPAD_SERDES_1_LANE_0_TX_FrequencyHz, num:i(330000000))) +
                                                                                        num:i(number(node:fallback(../McuClkMux2_Source,'FIRC_CLK')='SERDES_1_XPCS_1_TX')) *
                                                                                        num:i(node:fallback(../../../../../McuInternalPAD_SERDES_1_XPCS_1_TX_FrequencyHz, num:i(330000000))) +
                                                                                        num:i(number(node:fallback(../McuClkMux2_Source,'FIRC_CLK')='SERDES_1_XPCS_0_TX')) *
                                                                                        num:i(node:fallback(../../../../../McuInternalPAD_SERDES_1_XPCS_0_TX_FrequencyHz, num:i(330000000))) +
                                                                                        num:i(number(node:fallback(../McuClkMux2_Source,'FIRC_CLK')='PFE_MAC_1_EXT_TX_CLK')) *
                                                                                        num:i(node:fallback(../../../../../McuExternalPAD_PFE_MAC_1_EXT_TX_CLK_FrequencyHz, num:i(960000000))) +
                                                                                        num:i(number(node:fallback(../McuClkMux2_Source,'FIRC_CLK')='PFE_MAC_1_EXT_REF_CLK')) *
                                                                                        num:i(node:fallback(../../../../../McuExternalPAD_PFE_MAC_1_EXT_REF_CLK_FrequencyHz, num:i(960000000))) +
                                                                                        num:i(number(node:fallback(../McuClkMux2_Source,'FIRC_CLK')='GMAC_1_EXT_TX_CLK')) *
                                                                                        num:i(node:fallback(../../../../../McuExternalPAD_GMAC_1_EXT_TX_CLK_FrequencyHz, num:i(125000000))) +
                                                                                        num:i(number(node:fallback(../McuClkMux2_Source,'FIRC_CLK')='GMAC_1_EXT_REF_CLK')) *
                                                                                        num:i(node:fallback(../../../../../McuExternalPAD_GMAC_1_EXT_REF_CLK_FrequencyHz, num:i(50000000))) +
                                                                                        num:i(number(node:fallback(../McuClkMux2_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                        num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                                                    ) div
                                                                                    num:f(
                                                                                        node:fallback(../McuClkMux2Div0_Divisor, num:i(0)) + num:f(1)
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &gt; num:i(ecu:get('MCU.AuxClock.Limits.Cgm2Mux2_CLK.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &lt; num:i(0)
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.Cgm2Mux2_CLK.High')"/>
                                                        <a:tst expr="&gt;=(ecu:get('MCU.AuxClock.Limits.Cgm2Mux2_CLK.Low') * num:i(number(node:fallback(../McuClkMux2Div0_En, 'false') = 'true')))"/>
                                                    </a:a>
                                                </v:var>
                                            </v:ctr>

                                            <v:ctr name="McuCgm2ClockMux3" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            On S32G2XX, this container enables and selects the configuration clocks for PFE_MAC_2_TX_CLK. <br />
                                                            On S32G2XX, this container enables and selects the configuration clocks for PFE_MAC_2_TX_DIV_CLK. <br />
                                                            On S32R45, this container enables and selects the configuration clocks for GMAC_1_REF_DIV_CLK. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuCgm2ClockMux3"/>
                                                <a:a name="UUID" value="ECUC:a44203ad-adde-43a8-ade7-4ef1cb634d56"/>
                                                <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.CGM2.ClockMuxes.List'), 'CLKMUX_3')" />
                                                </a:a>

                                                <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock mux is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM2 Clock Mux under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:e4d34a8b-1163-f63a-b4b2-cc0f8778843e"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMux3_Source" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 3 Source Selection. <br />
                                                                Sets the MC_CGM_2_MUX_3_CSC[SELCTL] field register. <br />
                                                                MC_CGM_2_MUX_3_CSC[SELCTL] - This field selects the source clock for Clock Mux 3. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                     </a:a>
                                                     <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM2 Clock Mux3 Source"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:104ae84c-71b9-8873-8324-3cfbd5b5456b"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM2.ClockMux3.Default')"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM2.ClockMux3.List')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'PERIPH_PLL_PHI5_CLK') and
                                                                       (node:fallback(../../../McuPll_1/McuPll_Configuration/McuPllOdiv5_En, 'false') = 'false')
                                                                     )"
                                                            true="If 'PERIPH_PLL_PHI5_CLK' is selected as source clock, PeriphPLL_ODIV5 must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'CORE_PLL_DFS6_CLK') and
                                                                       (node:fallback(../../../McuCoreDfs/McuDfs_6/McuDFSPort_En, 'false') = 'false')
                                                                     )"
                                                            true="If 'CORE_PLL_DFS6_CLK' is selected as source clock, CoresDFS6 must be enabled."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClockMux3_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux3 Frequency (ISP_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8cfb9660-3b15-4d40-12ec-66efd94f9892"/>
                                                    <a:a name="VISIBLE" type="XPath">
                                                        <a:tst expr="text:tolower(ecu:get('MCU.CGM2.ClockMux3.HasUndividedOutput')) = 'true'" />
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(
                                                                num:f(number(node:fallback(../McuClkMux3_Source,'FIRC_CLK')='CORE_PLL_DFS6_CLK')) *
                                                                num:f(node:fallback(../../../McuCoreDfs/McuDfs_6/DFS_CLK_Frequency, num:i(125000000))) +
                                                                num:f(number(node:fallback(../McuClkMux3_Source,'FIRC_CLK')='PERIPH_PLL_PHI5_CLK')) *
                                                                num:f(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI5_Frequency, num:i(125000000))) +
                                                                num:f(number(node:fallback(../McuClkMux3_Source,'FIRC_CLK')='SERDES_0_LANE_1_TX')) *
                                                                num:f(node:fallback(../../../../../McuInternalPAD_SERDES_0_LANE_1_TX_FrequencyHz, num:i(330000000))) +
                                                                num:f(number(node:fallback(../McuClkMux3_Source,'FIRC_CLK')='SERDES_0_XPCS_1_TX')) *
                                                                num:f(node:fallback(../../../../../McuInternalPAD_SERDES_0_XPCS_1_TX_FrequencyHz, num:i(330000000))) +
                                                                num:f(number(node:fallback(../McuClkMux3_Source,'FIRC_CLK')='PFE_MAC_2_EXT_TX_CLK')) *
                                                                num:f(node:fallback(../../../../../McuExternalPAD_PFE_MAC_2_EXT_TX_CLK_FrequencyHz, num:i(960000000))) +
                                                                num:f(number(node:fallback(../McuClkMux3_Source,'FIRC_CLK')='PFE_MAC_2_EXT_REF_CLK')) *
                                                                num:f(node:fallback(../../../../../McuExternalPAD_PFE_MAC_2_EXT_REF_CLK_FrequencyHz, num:i(960000000))) +
                                                                num:f(number(node:fallback(../McuClkMux3_Source,'FIRC_CLK')='GMAC_1_EXT_REF_CLK')) *
                                                                num:f(node:fallback(../../../../../McuExternalPAD_GMAC_1_EXT_REF_CLK_FrequencyHz, num:i(960000000))) +
                                                                num:f(number(node:fallback(../McuClkMux3_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                num:f(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                num:f(number(node:fallback(../McuClkMux3_Source,'FIRC_CLK')='PFE_MAC_0_EXT_REF_CLK_1')) *
                                                                num:f(node:fallback(../../../../../McuExternalPAD_PFE_MAC_0_EXT_REF_CLK_FrequencyHz, num:i(960000000)))
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    text:tolower(ecu:get('MCU.CGM2.ClockMux3.HasUndividedOutput')) = 'true'
                                                                )
                                                                and
                                                                (
                                                                    (
                                                                        not( node:empty( node:fallback(., 800000000) ) )
                                                                        and
                                                                        (
                                                                            num:f( node:fallback(., 800000000) ) !=
                                                                            (
                                                                                num:f(
                                                                                    num:f(
                                                                                        num:f(number(node:fallback(../McuClkMux3_Source,'FIRC_CLK')='CORE_PLL_DFS6_CLK')) *
                                                                                        num:f(node:fallback(../../../McuCoreDfs/McuDfs_6/DFS_CLK_Frequency, num:i(125000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux3_Source,'FIRC_CLK')='PERIPH_PLL_PHI5_CLK')) *
                                                                                        num:f(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI5_Frequency, num:i(125000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux3_Source,'FIRC_CLK')='SERDES_0_LANE_1_TX')) *
                                                                                        num:f(node:fallback(../../../../../McuInternalPAD_SERDES_0_LANE_1_TX_FrequencyHz, num:i(330000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux3_Source,'FIRC_CLK')='SERDES_0_XPCS_1_TX')) *
                                                                                        num:f(node:fallback(../../../../../McuInternalPAD_SERDES_0_XPCS_1_TX_FrequencyHz, num:i(330000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux3_Source,'FIRC_CLK')='PFE_MAC_2_EXT_TX_CLK')) *
                                                                                        num:f(node:fallback(../../../../../McuExternalPAD_PFE_MAC_2_EXT_TX_CLK_FrequencyHz, num:i(960000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux3_Source,'FIRC_CLK')='PFE_MAC_2_EXT_REF_CLK')) *
                                                                                        num:f(node:fallback(../../../../../McuExternalPAD_PFE_MAC_2_EXT_REF_CLK_FrequencyHz, num:i(960000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux3_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                        num:f(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                                        num:f(number(node:fallback(../McuClkMux3_Source,'FIRC_CLK')='PFE_MAC_0_EXT_REF_CLK_1')) *
                                                                                        num:f(node:fallback(../../../../../McuExternalPAD_PFE_MAC_0_EXT_REF_CLK_FrequencyHz, num:i(960000000)))
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                    or
                                                                    (
                                                                        node:fallback(., num:i(40000000)) &gt; num:i(ecu:get('MCU.AuxClock.Limits.Cgm2Mux3_CLK.High'))
                                                                    )
                                                                    or
                                                                    (
                                                                        node:fallback(., num:i(40000000)) &lt; num:i(0)
                                                                    )
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.Cgm2Mux3_CLK.High')"/>
                                                        <a:tst expr="&gt;=ecu:get('MCU.AuxClock.Limits.Cgm2Mux3_CLK.Low')"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClkMux3Div0_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 3 Divider enable. <br />
                                                                This field enables the Clock Divider for: <br />
                                                                S32G2XX - PFE_MAC_2_TX_CLK <br />
                                                                S32G3XX - PFE_MAC_2_TX_DIV_CLK <br />
                                                                S32R45  - GMAC_1_REF_DIV_CLK <br />
                                                                Sets the MC_CGM_2_MUX_3_DC_0[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                If it is set to 0 (Divider 0 is disabled), any write access to the MC_CGM_2_MUX_3_DC_0[DIV] field is ignored and the PFE_MAC_2_TX_CLK or GMAC_1_REF_DIV_CLK, PFE_MAC_2_TX_DIV_CLK clock remains disabled. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM2 Clock Mux3 Divider0 Enable (PFE_MAC_2_TX_CLK, GMAC_1_REF_DIV_CLK, PFE_MAC_2_TX_DIV_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:0b3261a1-f7b1-4a2f-87e0-d6250163bf49"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM2.ClockMux3.Divider0.DivEn.Default')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="(ecu:get('MCU.CGM2.ClockMux3.Divider0.Limit') = 0) and (node:value(.) = 'true')"
                                                               true="This field is not supported on this platform. Please uncheck this field."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClkMux3Div0_Divisor" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 3 Division value. <br />
                                                                Sets the MC_CGM_2_MUX_3_DC_0[DIV] field register. <br />
                                                                MC_CGM_2_MUX_3_DC_0[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider. <br />
                                                                This parameter is enabled only if McuClkMux3Div0_En is true. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM2 Clock Mux3 Divisor0 (PFE_MAC_2_TX_CLK, GMAC_1_REF_DIV_CLK, PFE_MAC_2_TX_DIV_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:b6464e12-7b41-46e7-b87a-734aa873405e"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM2.ClockMux3.Divider0.Default')"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuClkMux3Div0_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.CGM2.ClockMux3.Divider0.Limit')"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClockMux3Divider0_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux3 Divider0 Frequency (PFE_MAC_2_TX_CLK, GMAC_1_REF_DIV_CLK, PFE_MAC_2_TX_DIV_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8cfb9660-3b15-4d40-12ec-12366daba8c2"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuClkMux3Div0_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:i(number(node:fallback(../McuClkMux3Div0_En, 'false') = 'true')) *
                                                            num:f(
                                                                num:f(
                                                                    num:i(number(node:fallback(../McuClkMux3_Source,'FIRC_CLK')='CORE_PLL_DFS6_CLK')) *
                                                                    num:i(node:fallback(../../../McuCoreDfs/McuDfs_6/DFS_CLK_Frequency, num:i(125000000))) +
                                                                    num:i(number(node:fallback(../McuClkMux3_Source,'FIRC_CLK')='PERIPH_PLL_PHI5_CLK')) *
                                                                    num:i(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI5_Frequency, num:i(125000000))) +
                                                                    num:i(number(node:fallback(../McuClkMux3_Source,'FIRC_CLK')='SERDES_0_LANE_1_TX')) *
                                                                    num:i(node:fallback(../../../../../McuInternalPAD_SERDES_0_LANE_1_TX_FrequencyHz, num:i(330000000))) +
                                                                    num:i(number(node:fallback(../McuClkMux3_Source,'FIRC_CLK')='SERDES_0_XPCS_1_TX')) *
                                                                    num:i(node:fallback(../../../../../McuInternalPAD_SERDES_0_XPCS_1_TX_FrequencyHz, num:i(330000000))) +
                                                                    num:i(number(node:fallback(../McuClkMux3_Source,'FIRC_CLK')='PFE_MAC_2_EXT_TX_CLK')) *
                                                                    num:i(node:fallback(../../../../../McuExternalPAD_PFE_MAC_2_EXT_TX_CLK_FrequencyHz, num:i(960000000))) +
                                                                    num:i(number(node:fallback(../McuClkMux3_Source,'FIRC_CLK')='PFE_MAC_2_EXT_REF_CLK')) *
                                                                    num:i(node:fallback(../../../../../McuExternalPAD_PFE_MAC_2_EXT_REF_CLK_FrequencyHz, num:i(960000000))) +
                                                                    num:i(number(node:fallback(../McuClkMux3_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                    num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                    num:i(number(node:fallback(../McuClkMux3_Source,'FIRC_CLK')='GMAC_1_EXT_REF_CLK')) *
                                                                    num:i(node:fallback(../../../../../McuExternalPAD_GMAC_1_EXT_REF_CLK_FrequencyHz, num:i(960000000)))
                                                                ) div
                                                                num:f(
                                                                    node:fallback(../McuClkMux3Div0_Divisor, num:i(0)) + num:f(1)
                                                                )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 800000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 800000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:i(number(node:fallback(../McuClkMux3Div0_En, 'false') = 'true')) *
                                                                                num:f(
                                                                                    num:f(
                                                                                        num:i(number(node:fallback(../McuClkMux3_Source,'FIRC_CLK')='CORE_PLL_DFS6_CLK')) *
                                                                                        num:i(node:fallback(../../../McuCoreDfs/McuDfs_6/DFS_CLK_Frequency, num:i(125000000))) +
                                                                                        num:i(number(node:fallback(../McuClkMux3_Source,'FIRC_CLK')='PERIPH_PLL_PHI5_CLK')) *
                                                                                        num:i(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI5_Frequency, num:i(125000000))) +
                                                                                        num:i(number(node:fallback(../McuClkMux3_Source,'FIRC_CLK')='SERDES_0_LANE_1_TX')) *
                                                                                        num:i(node:fallback(../../../../../McuInternalPAD_SERDES_0_LANE_1_TX_FrequencyHz, num:i(330000000))) +
                                                                                        num:i(number(node:fallback(../McuClkMux3_Source,'FIRC_CLK')='SERDES_0_XPCS_1_TX')) *
                                                                                        num:i(node:fallback(../../../../../McuInternalPAD_SERDES_0_XPCS_1_TX_FrequencyHz, num:i(330000000))) +
                                                                                        num:i(number(node:fallback(../McuClkMux3_Source,'FIRC_CLK')='PFE_MAC_2_EXT_TX_CLK')) *
                                                                                        num:i(node:fallback(../../../../../McuExternalPAD_PFE_MAC_2_EXT_TX_CLK_FrequencyHz, num:i(960000000))) +
                                                                                        num:i(number(node:fallback(../McuClkMux3_Source,'FIRC_CLK')='PFE_MAC_2_EXT_REF_CLK')) *
                                                                                        num:i(node:fallback(../../../../../McuExternalPAD_PFE_MAC_2_EXT_REF_CLK_FrequencyHz, num:i(960000000))) +
                                                                                        num:i(number(node:fallback(../McuClkMux3_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                        num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                                        num:i(number(node:fallback(../McuClkMux3_Source,'FIRC_CLK')='GMAC_1_EXT_REF_CLK')) *
                                                                                        num:i(node:fallback(../../../../../McuExternalPAD_GMAC_1_EXT_REF_CLK_FrequencyHz, num:i(960000000)))
                                                                                    ) div
                                                                                    num:f(
                                                                                        node:fallback(../McuClkMux3Div0_Divisor, num:i(0)) + num:f(1)
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &gt; num:i(ecu:get('MCU.AuxClock.Limits.Cgm2Mux3_CLK.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &lt; num:i(0)
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.Cgm2Mux3_CLK.High')"/>
                                                        <a:tst expr="&gt;=(ecu:get('MCU.AuxClock.Limits.Cgm2Mux3_CLK.Low') * num:i(number(node:fallback(../McuClkMux3Div0_En, 'false') = 'true')))"/>
                                                    </a:a>
                                                </v:var>

                                            </v:ctr>

                                            <v:ctr name="McuCgm2ClockMux4" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            On S32G2XX, this container enables and selects the configuration clocks for PFE_MAC_0_RX_CLK. <br />
                                                            On S32R45, this container enables and selects the configuration clocks for GMAC_1_RX_CLK. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuCgm2ClockMux4"/>
                                                <a:a name="UUID" value="ECUC:a41731ad-add5-43a8-ade7-4ef1cf634d56"/>
                                                <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.CGM2.ClockMuxes.List'), 'CLKMUX_4')" />
                                                </a:a>

                                                <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock mux is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM2 Clock Mux under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:e4d88a8b-11f3-fc3a-b4b2-cc0f8778843e"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMux4_Source" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 4 Source Selection. <br />
                                                                Sets the MC_CGM_2_MUX_4_CSC[SELCTL] field register. <br />
                                                                MC_CGM_2_MUX_4_CSC[SELCTL] - This field selects the source clock for Clock Mux 4. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                     </a:a>
                                                     <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM2 Clock Mux4 Source"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:78fae84c-71b9-4a73-2724-3cfcd5b5456b"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM2.ClockMux4.Default')"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM2.ClockMux4.List')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'PFEMAC0_REF_DIV_CLK') and
                                                                       (node:fallback(../../McuCgm2ClockMux7/McuClkMux7Div0_En, 'false') = 'false')
                                                                     )"
                                                               true="If 'PFEMAC0_REF_DIV_CLK' is selected as source clock, McuClkMux7Div0_En must be enabled (i.e. McuCgm2ClockMux7/McuClkMux7Div0_En = 'true')."/>
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'PFEMAC0_REF_DIV_CLK_1') and
                                                                       (node:fallback(../../McuCgm2ClockMux3/McuClkMux3Div0_En, 'false') = 'false')
                                                                     )"
                                                               true="If 'PFEMAC0_REF_DIV_CLK' is selected as source clock, McuClkMux2Div0_En must be enabled (i.e. McuCgm2ClockMux3/McuClkMux3Div0_En = 'true')."/>
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'GMAC1_REF_DIV_CLK') and
                                                                       (node:fallback(../../McuCgm2ClockMux3/McuClkMux3Div0_En, 'false') = 'false')
                                                                     )"
                                                               true="If 'GMAC1_REF_DIV_CLK' is selected as source clock, McuClkMux2Div0_En must be enabled (i.e. McuCgm2ClockMux3/McuClkMux3Div0_En = 'true')."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClockMux4_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux4 Frequency (PFE_MAC_0_RX_CLK, GMAC_1_RX_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8cabf2d0-3b63-e345-a0ec-bd7353308c2f"/>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(
                                                                num:f(number(node:fallback(../McuClkMux4_Source,'FIRC_CLK')='PFEMAC0_REF_DIV_CLK')) *
                                                                num:f(node:fallback(../../McuCgm2ClockMux7/McuClockMux7Divider0_Frequency, num:i(800000000))) +
                                                                num:f(number(node:fallback(../McuClkMux4_Source,'FIRC_CLK')='PFE_MAC_0_EXT_RX_CLK')) *
                                                                num:f(node:fallback(../../../../../McuExternalPAD_PFE_MAC_0_EXT_RX_CLK_FrequencyHz, num:i(800000000))) +
                                                                num:f(number(node:fallback(../McuClkMux4_Source,'FIRC_CLK')='SERDES_1_LANE_0_CDR')) *
                                                                num:f(node:fallback(../../../../../McuInternalPAD_SERDES_1_LANE_0_CDR_FrequencyHz, num:i(800000000))) +
                                                                num:f(number(node:fallback(../McuClkMux4_Source,'FIRC_CLK')='SERDES_1_XPCS_0_CDR')) *
                                                                num:f(node:fallback(../../../../../McuInternalPAD_SERDES_1_XPCS_0_CDR_FrequencyHz, num:i(800000000))) +
                                                                num:f(number(node:fallback(../McuClkMux4_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                num:f(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                num:f(number(node:fallback(../McuClkMux4_Source,'FIRC_CLK')='GMAC_1_EXT_RX_CLK')) *
                                                                num:f(node:fallback(../../../../../McuExternalPAD_GMAC_1_EXT_RX_CLK_FrequencyHz, num:i(125000000))) +
                                                                num:f(number(node:fallback(../McuClkMux4_Source,'FIRC_CLK')='GMAC1_REF_DIV_CLK')) *
                                                                num:f(node:fallback(../../McuCgm2ClockMux3/McuClockMux3Divider0_Frequency, num:i(50000000))) +
                                                                num:f(number(node:fallback(../McuClkMux4_Source,'FIRC_CLK')='PFEMAC0_REF_DIV_CLK_1')) *
                                                                num:f(node:fallback(../../McuCgm2ClockMux3/McuClockMux3Divider0_Frequency, num:i(800000000))) +
                                                                num:f(number(node:fallback(../McuClkMux4_Source,'FIRC_CLK')='PFE_MAC_0_EXT_RX_CLK_1')) *
                                                                num:f(node:fallback(../../../../../McuExternalPAD_PFE_MAC_0_EXT_RX_CLK_FrequencyHz, num:i(800000000))) +
                                                                num:f(number(node:fallback(../McuClkMux4_Source,'FIRC_CLK')='SERDES_1_LANE_1_CDR')) *
                                                                num:f(node:fallback(../../../../../McuInternalPAD_SERDES_1_LANE_1_CDR_FrequencyHz, num:i(800000000))) +
                                                                num:f(number(node:fallback(../McuClkMux4_Source,'FIRC_CLK')='SERDES_1_XPCS_1_CDR')) *
                                                                num:f(node:fallback(../../../../../McuInternalPAD_SERDES_1_XPCS_1_CDR_FrequencyHz, num:i(800000000)))
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 800000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 800000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(
                                                                                    num:f(number(node:fallback(../McuClkMux4_Source,'FIRC_CLK')='PFEMAC0_REF_DIV_CLK')) *
                                                                                    num:f(node:fallback(../../McuCgm2ClockMux7/McuClockMux7Divider0_Frequency, num:i(800000000))) +
                                                                                    num:f(number(node:fallback(../McuClkMux4_Source,'FIRC_CLK')='PFE_MAC_0_EXT_RX_CLK')) *
                                                                                    num:f(node:fallback(../../../../../McuExternalPAD_PFE_MAC_0_EXT_RX_CLK_FrequencyHz, num:i(800000000))) +
                                                                                    num:f(number(node:fallback(../McuClkMux4_Source,'FIRC_CLK')='SERDES_1_LANE_0_CDR')) *
                                                                                    num:f(node:fallback(../../../../../McuInternalPAD_SERDES_1_LANE_0_CDR_FrequencyHz, num:i(800000000))) +
                                                                                    num:f(number(node:fallback(../McuClkMux4_Source,'FIRC_CLK')='SERDES_1_XPCS_0_CDR')) *
                                                                                    num:f(node:fallback(../../../../../McuInternalPAD_SERDES_1_XPCS_0_CDR_FrequencyHz, num:i(800000000))) +
                                                                                    num:f(number(node:fallback(../McuClkMux4_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                    num:f(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                                    num:f(number(node:fallback(../McuClkMux4_Source,'FIRC_CLK')='GMAC_1_EXT_RX_CLK')) *
                                                                                    num:f(node:fallback(../../../../../McuExternalPAD_GMAC_1_EXT_RX_CLK_FrequencyHz, num:i(125000000))) +
                                                                                    num:f(number(node:fallback(../McuClkMux4_Source,'FIRC_CLK')='GMAC1_REF_DIV_CLK')) *
                                                                                    num:f(node:fallback(../../McuCgm2ClockMux3/McuClockMux3Divider0_Frequency, num:i(50000000))) +
                                                                                    num:f(number(node:fallback(../McuClkMux4_Source,'FIRC_CLK')='PFEMAC0_REF_DIV_CLK_1')) *
                                                                                    num:f(node:fallback(../../McuCgm2ClockMux3/McuClockMux3Divider0_Frequency, num:i(800000000))) +
                                                                                    num:f(number(node:fallback(../McuClkMux4_Source,'FIRC_CLK')='PFE_MAC_0_EXT_RX_CLK_1')) *
                                                                                    num:f(node:fallback(../../../../../McuExternalPAD_PFE_MAC_0_EXT_RX_CLK_FrequencyHz, num:i(800000000))) +
                                                                                    num:f(number(node:fallback(../McuClkMux4_Source,'FIRC_CLK')='SERDES_1_LANE_1_CDR')) *
                                                                                    num:f(node:fallback(../../../../../McuInternalPAD_SERDES_1_LANE_1_CDR_FrequencyHz, num:i(800000000))) +
                                                                                    num:f(number(node:fallback(../McuClkMux4_Source,'FIRC_CLK')='SERDES_1_XPCS_1_CDR')) *
                                                                                    num:f(node:fallback(../../../../../McuInternalPAD_SERDES_1_XPCS_1_CDR_FrequencyHz, num:i(800000000)))
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &gt; num:i(ecu:get('MCU.AuxClock.Limits.Cgm2Mux4_CLK.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &lt; num:i(0)
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.Cgm2Mux4_CLK.High')"/>
                                                        <a:tst expr="&gt;=ecu:get('MCU.AuxClock.Limits.Cgm2Mux4_CLK.Low')"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClkMux4Div0_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 4 Divider enable. <br />
                                                                This field enables the Clock Divider for: <br />
                                                                S32V344 - PFEMAC0_REF_DIV_CLK (represented by the name PFEMAC0_REF_DIV_CLK_2) <br />
                                                                Sets the MC_CGM_2_MUX_4_DC_0[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                If it is set to 0 (Divider 0 is disabled), any write access to the MC_CGM_2_MUX_4_DC_0[DIV] field is ignored and the PFEMAC0_REF_DIV_CLK_2 clock remains disabled. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM2 Clock Mux4 Divider0 Enable (PFEMAC0_REF_DIV_CLK_2)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:0b3261a1-f7b1-4a2f-87e0-d628e163bf49"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM2.ClockMux4.Divider0.DivEn.Default')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="(ecu:get('MCU.CGM2.ClockMux4.Divider0.Limit') = 0) and (node:value(.) = 'true')"
                                                               true="This field is not supported on this platform. Please uncheck this field."/>
                                                    </a:da>
                                                    <a:a name="VISIBLE" type="XPath">
                                                        <a:tst expr="contains(ecu:get('MCU.CGM2.ClockMux4.Dividers.List'), 'Div0')" />
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClkMux4Div0_Divisor" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 4 Division value. <br />
                                                                Sets the MC_CGM_2_MUX_4_DC_0[DIV] field register. <br />
                                                                MC_CGM_2_MUX_4_DC_0[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider. <br />
                                                                This parameter is enabled only if McuClkMux4Div0_En is true. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM2 Clock Mux4 Divisor0 (PFEMAC0_REF_DIV_CLK_2)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:b6ec4e12-7b41-46e7-b87a-734aa873405e"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM2.ClockMux4.Divider0.Default')"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuClkMux4Div0_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:a name="VISIBLE" type="XPath">
                                                        <a:tst expr="contains(ecu:get('MCU.CGM2.ClockMux4.Dividers.List'), 'Div0')" />
                                                    </a:a>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.CGM2.ClockMux4.Divider0.Limit')"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClockMux4Divider0_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux4 Divider0 Frequency (PFEMAC0_REF_DIV_CLK_2)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8cf1f660-3b15-4da0-12ec-bda75b298c2f"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuClkMux4Div0_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:a name="VISIBLE" type="XPath">
                                                        <a:tst expr="contains(ecu:get('MCU.CGM2.ClockMux4.Dividers.List'), 'Div0')" />
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:i(number(node:fallback(../McuClkMux4Div0_En, 'false') = 'true')) *
                                                            num:f(
                                                                num:f(
                                                                    num:f(
                                                                        num:f(number(node:fallback(../McuClkMux4_Source,'FIRC_CLK')='PFEMAC0_REF_DIV_CLK')) *
                                                                        num:f(node:fallback(../../McuCgm2ClockMux7/McuClockMux7Divider0_Frequency, num:i(800000000))) +
                                                                        num:f(number(node:fallback(../McuClkMux4_Source,'FIRC_CLK')='PFE_MAC_0_EXT_RX_CLK')) *
                                                                        num:f(node:fallback(../../../../../McuExternalPAD_PFE_MAC_0_EXT_RX_CLK_FrequencyHz, num:i(800000000))) +
                                                                        num:f(number(node:fallback(../McuClkMux4_Source,'FIRC_CLK')='SERDES_1_LANE_0_CDR')) *
                                                                        num:f(node:fallback(../../../../../McuInternalPAD_SERDES_1_LANE_0_CDR_FrequencyHz, num:i(800000000))) +
                                                                        num:f(number(node:fallback(../McuClkMux4_Source,'FIRC_CLK')='SERDES_1_XPCS_0_CDR')) *
                                                                        num:f(node:fallback(../../../../../McuInternalPAD_SERDES_1_XPCS_0_CDR_FrequencyHz, num:i(800000000))) +
                                                                        num:f(number(node:fallback(../McuClkMux4_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                        num:f(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                        num:f(number(node:fallback(../McuClkMux4_Source,'FIRC_CLK')='PFEMAC0_REF_DIV_CLK_1')) *
                                                                        num:f(node:fallback(../../McuCgm2ClockMux3/McuClockMux3Divider0_Frequency, num:i(800000000))) +
                                                                        num:f(number(node:fallback(../McuClkMux4_Source,'FIRC_CLK')='PFE_MAC_0_EXT_RX_CLK_1')) *
                                                                        num:f(node:fallback(../../../../../McuExternalPAD_PFE_MAC_0_EXT_RX_CLK_FrequencyHz, num:i(800000000))) +
                                                                        num:f(number(node:fallback(../McuClkMux4_Source,'FIRC_CLK')='SERDES_1_LANE_1_CDR')) *
                                                                        num:f(node:fallback(../../../../../McuInternalPAD_SERDES_1_LANE_1_CDR_FrequencyHz, num:i(800000000))) +
                                                                        num:f(number(node:fallback(../McuClkMux4_Source,'FIRC_CLK')='SERDES_1_XPCS_1_CDR')) *
                                                                        num:f(node:fallback(../../../../../McuInternalPAD_SERDES_1_XPCS_1_CDR_FrequencyHz, num:i(800000000)))
                                                                    )
                                                                ) div
                                                                num:f(
                                                                    node:fallback(../McuClkMux4Div0_Divisor, num:i(0)) + num:f(1)
                                                                )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 800000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 800000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:i(number(node:fallback(../McuClkMux4Div0_En, 'false') = 'true')) *
                                                                                num:f(
                                                                                    num:f(
                                                                                        num:f(
                                                                                            num:f(number(node:fallback(../McuClkMux4_Source,'FIRC_CLK')='PFEMAC0_REF_DIV_CLK')) *
                                                                                            num:f(node:fallback(../../McuCgm2ClockMux7/McuClockMux7Divider0_Frequency, num:i(800000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux4_Source,'FIRC_CLK')='PFE_MAC_0_EXT_RX_CLK')) *
                                                                                            num:f(node:fallback(../../../../../McuExternalPAD_PFE_MAC_0_EXT_RX_CLK_FrequencyHz, num:i(800000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux4_Source,'FIRC_CLK')='SERDES_1_LANE_0_CDR')) *
                                                                                            num:f(node:fallback(../../../../../McuInternalPAD_SERDES_1_LANE_0_CDR_FrequencyHz, num:i(800000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux4_Source,'FIRC_CLK')='SERDES_1_XPCS_0_CDR')) *
                                                                                            num:f(node:fallback(../../../../../McuInternalPAD_SERDES_1_XPCS_0_CDR_FrequencyHz, num:i(800000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux4_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                            num:f(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                                            num:f(number(node:fallback(../McuClkMux4_Source,'FIRC_CLK')='PFEMAC0_REF_DIV_CLK_1')) *
                                                                                            num:f(node:fallback(../../McuCgm2ClockMux3/McuClockMux3Divider0_Frequency, num:i(800000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux4_Source,'FIRC_CLK')='PFE_MAC_0_EXT_RX_CLK_1')) *
                                                                                            num:f(node:fallback(../../../../../McuExternalPAD_PFE_MAC_0_EXT_RX_CLK_FrequencyHz, num:i(800000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux4_Source,'FIRC_CLK')='SERDES_1_LANE_1_CDR')) *
                                                                                            num:f(node:fallback(../../../../../McuInternalPAD_SERDES_1_LANE_1_CDR_FrequencyHz, num:i(800000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux4_Source,'FIRC_CLK')='SERDES_1_XPCS_1_CDR')) *
                                                                                            num:f(node:fallback(../../../../../McuInternalPAD_SERDES_1_XPCS_1_CDR_FrequencyHz, num:i(800000000)))
                                                                                        )
                                                                                    ) div
                                                                                    num:f(
                                                                                        node:fallback(../McuClkMux4Div0_Divisor, num:i(0)) + num:f(1)
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &gt; num:i(ecu:get('MCU.AuxClock.Limits.Cgm2Mux4_CLK.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &lt; num:i(0)
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.Cgm2Mux4_CLK.High')"/>
                                                        <a:tst expr="&gt;=(ecu:get('MCU.AuxClock.Limits.Cgm2Mux4_CLK.Low') * num:i(number(node:fallback(../McuClkMux4Div0_En, 'false') = 'true')))"/>
                                                    </a:a>
                                                </v:var>
                                            </v:ctr>

                                            <v:ctr name="McuCgm2ClockMux5" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            On S32G2XX, this container enables and selects the configuration clocks for PFE_MAC_1_RX_CLK. <br />
                                                            This container is not supported on S32R45 platform. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuCgm2ClockMux5"/>
                                                <a:a name="UUID" value="ECUC:a41631ad-add5-43a8-adeb-4ef1c3634d56"/>
                                                <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.CGM2.ClockMuxes.List'), 'CLKMUX_5')" />
                                                </a:a>

                                                <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock mux is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM2 Clock Mux under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:e4d9ca8b-37f3-fc3a-b8b2-cc0f8778843e"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:da name="EDITABLE" type="XPath">
                                                        <a:tst expr="contains(ecu:get('MCU.CGM2.ClockMuxes.List'),'CLKMUX_5') or (node:fallback(.,'true') = 'true')"/>
                                                    </a:da>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="not(contains(ecu:get('MCU.CGM2.ClockMuxes.List'),'CLKMUX_5')) and (node:fallback(.,'true') = 'true')"
                                                               true="This clock mux is not supported on this platform. Please uncheck this field."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClkMux5_Source" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 5 Source Selection. <br />
                                                                Sets the MC_CGM_2_MUX_5_CSC[SELCTL] field register. <br />
                                                                MC_CGM_2_MUX_5_CSC[SELCTL] - This field selects the source clock for Clock Mux 5. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                     </a:a>
                                                     <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM2 Clock Mux5 Source"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:80fa684c-d1b9-ba73-8324-3cfcd5b5456b"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM2.ClockMux5.Default')"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM2.ClockMux5.List')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'CORE_PLL_PHI1_CLK') and
                                                                       (node:fallback(../../../McuPll_0/McuPll_Configuration/McuPllOdiv1_En, 'false') = 'false')
                                                                     )"
                                                               true="If 'CORE_PLL_PHI1_CLK' is selected as source clock, CorePLL_ODIV1 must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'PFEMAC1_REF_DIV_CLK') and
                                                                       (node:fallback(../../McuCgm2ClockMux8/McuClkMux8Div0_En, 'false') = 'false')
                                                                     )"
                                                               true="If 'PFEMAC1_REF_DIV_CLK' is selected as source clock, McuClkMux8Div0 must be enabled (i.e. McuCgm2ClockMux8/McuClkMux8Div0_En = 'true')."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClockMux5_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux5 Frequency (PFE_MAC_1_RX_CLK, SEQ_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8cfbf2d0-3b63-e345-a0ec-bd1753308c2f"/>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(
                                                                num:f(number(node:fallback(../McuClkMux5_Source,'FIRC_CLK')='PFE_MAC_1_EXT_RX_CLK')) *
                                                                num:f(node:fallback(../../../../../McuExternalPAD_PFE_MAC_1_EXT_RX_CLK_FrequencyHz, num:i(800000000))) +
                                                                num:f(number(node:fallback(../McuClkMux5_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                num:f(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                num:f(number(node:fallback(../McuClkMux5_Source,'FIRC_CLK')='CORE_PLL_PHI1_CLK')) *
                                                                num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI1_Frequency, num:i(125000000))) +
                                                                num:f(number(node:fallback(../McuClkMux5_Source,'FIRC_CLK')='PFEMAC1_REF_DIV_CLK')) *
                                                                num:f(node:fallback(../../McuCgm2ClockMux8/McuClockMux8Divider0_Frequency, num:i(800000000))) +
                                                                num:f(number(node:fallback(../McuClkMux5_Source,'FIRC_CLK')='SERDES_1_LANE_1_CDR')) *
                                                                num:f(node:fallback(../../../../../McuInternalPAD_SERDES_1_LANE_1_CDR_FrequencyHz, num:i(800000000))) +
                                                                num:f(number(node:fallback(../McuClkMux5_Source,'FIRC_CLK')='SERDES_1_XPCS_1_CDR')) *
                                                                num:f(node:fallback(../../../../../McuInternalPAD_SERDES_1_XPCS_1_CDR_FrequencyHz, num:i(800000000)))
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 800000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 800000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(
                                                                                    num:f(number(node:fallback(../McuClkMux5_Source,'FIRC_CLK')='PFE_MAC_1_EXT_RX_CLK')) *
                                                                                    num:f(node:fallback(../../../../../McuExternalPAD_PFE_MAC_1_EXT_RX_CLK_FrequencyHz, num:i(800000000))) +
                                                                                    num:f(number(node:fallback(../McuClkMux5_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                    num:f(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                                    num:f(number(node:fallback(../McuClkMux5_Source,'FIRC_CLK')='CORE_PLL_PHI1_CLK')) *
                                                                                    num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI1_Frequency, num:i(125000000))) +
                                                                                    num:f(number(node:fallback(../McuClkMux5_Source,'FIRC_CLK')='PFEMAC1_REF_DIV_CLK')) *
                                                                                    num:f(node:fallback(../../McuCgm2ClockMux8/McuClockMux8Divider0_Frequency, num:i(800000000))) +
                                                                                    num:f(number(node:fallback(../McuClkMux5_Source,'FIRC_CLK')='SERDES_1_LANE_1_CDR')) *
                                                                                    num:f(node:fallback(../../../../../McuInternalPAD_SERDES_1_LANE_1_CDR_FrequencyHz, num:i(800000000))) +
                                                                                    num:f(number(node:fallback(../McuClkMux5_Source,'FIRC_CLK')='SERDES_1_XPCS_1_CDR')) *
                                                                                    num:f(node:fallback(../../../../../McuInternalPAD_SERDES_1_XPCS_1_CDR_FrequencyHz, num:i(800000000)))
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &gt; num:i(ecu:get('MCU.AuxClock.Limits.Cgm2Mux5_CLK.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &lt; num:i(0)
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.Cgm2Mux5_CLK.High')"/>
                                                        <a:tst expr="&gt;=(ecu:get('MCU.AuxClock.Limits.Cgm2Mux5_CLK.Low') * num:i(number(contains(ecu:get('MCU.CGM2.ClockMuxes.List'),'CLKMUX_5') = 'true')))"/>
                                                    </a:a>
                                                </v:var>
                                            </v:ctr>

                                            <v:ctr name="McuCgm2ClockMux6" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            On S32G2XX, this container enables and selects the configuration clocks for PFE_MAC_2_RX_CLK. <br />
                                                            This container is not supported on S32R45 platform. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuCgm2ClockMux6"/>
                                                <a:a name="UUID" value="ECUC:a41731ad-add5-89a8-ade7-4ef1cf634d56"/>
                                                <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.CGM2.ClockMuxes.List'), 'CLKMUX_6')" />
                                                </a:a>

                                                <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock mux is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM2 Clock Mux under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:e4d88a8b-11f3-fc3a-b4b2-cc0f2278843e"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:da name="EDITABLE" type="XPath">
                                                        <a:tst expr="contains(ecu:get('MCU.CGM2.ClockMuxes.List'),'CLKMUX_6') or (node:fallback(.,'true') = 'true')"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClkMux6_Source" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 6 Source Selection. <br />
                                                                Sets the MC_CGM_2_MUX_6_CSC[SELCTL] field register. <br />
                                                                MC_CGM_2_MUX_6_CSC[SELCTL] - This field selects the source clock for Clock Mux 6. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                     </a:a>
                                                     <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM2 Clock Mux6 Source"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:78aae84c-71b9-4a55-2724-3cfcd5b5456b"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM2.ClockMux6.Default')"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM2.ClockMux6.List')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'PFEMAC2_REF_DIV_CLK') and
                                                                       (node:fallback(../../McuCgm2ClockMux9/McuClkMux9Div0_En, 'false') = 'false')
                                                                     )"
                                                               true="If 'PFEMAC2_REF_DIV_CLK' is selected as source clock, McuClkMux9Div0_En must be enabled (i.e. McuCgm2ClockMux9/McuClkMux9Div0_En = 'true')."/>
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'ACCEL_PLL_PHI0_CLK') and
                                                                       (node:fallback(../../../McuPll_2/McuPll_Configuration/McuPllOdiv0_En, 'false') = 'false')
                                                                     )"
                                                               true="If 'ACCEL_PLL_PHI0_CLK' is selected as source clock, AccelPLL_ODIV0 must be enabled (i.e. McuPll_2/McuPll_Configuration/McuPllOdiv0_En = 'true')."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClockMux6_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux6 Frequency (PFE_MAC_2_RX_CLK, APEXD_0_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8cfbf2d0-3b63-e345-a0ec-bd7353308c2f"/>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(
                                                                num:f(number(node:fallback(../McuClkMux6_Source,'FIRC_CLK')='PFEMAC2_REF_DIV_CLK')) *
                                                                num:f(node:fallback(../../McuCgm2ClockMux9/McuClockMux9Divider0_Frequency, num:i(800000000))) +
                                                                num:f(number(node:fallback(../McuClkMux6_Source,'FIRC_CLK')='PFE_MAC_2_EXT_RX_CLK')) *
                                                                num:f(node:fallback(../../../../../McuExternalPAD_PFE_MAC_2_EXT_RX_CLK_FrequencyHz, num:i(800000000))) +
                                                                num:f(number(node:fallback(../McuClkMux6_Source,'FIRC_CLK')='SERDES_0_LANE_1_CDR')) *
                                                                num:f(node:fallback(../../../../../McuInternalPAD_SERDES_0_LANE_1_CDR_FrequencyHz, num:i(800000000))) +
                                                                num:f(number(node:fallback(../McuClkMux6_Source,'FIRC_CLK')='SERDES_0_XPCS_1_CDR')) *
                                                                num:f(node:fallback(../../../../../McuInternalPAD_SERDES_0_XPCS_1_CDR_FrequencyHz, num:i(800000000))) +
                                                                num:f(number(node:fallback(../McuClkMux6_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                num:f(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                num:f(number(node:fallback(../McuClkMux6_Source,'FIRC_CLK')='ACCEL_PLL_PHI0_CLK')) *
                                                                num:f(node:fallback(../../../McuPll_2/McuPll_Parameter/PLL_PHI0_Frequency, num:i(800000000)))
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 800000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 800000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(
                                                                                    num:f(number(node:fallback(../McuClkMux6_Source,'FIRC_CLK')='PFEMAC2_REF_DIV_CLK')) *
                                                                                    num:f(node:fallback(../../McuCgm2ClockMux9/McuClockMux9Divider0_Frequency, num:i(800000000))) +
                                                                                    num:f(number(node:fallback(../McuClkMux6_Source,'FIRC_CLK')='PFE_MAC_2_EXT_RX_CLK')) *
                                                                                    num:f(node:fallback(../../../../../McuExternalPAD_PFE_MAC_2_EXT_RX_CLK_FrequencyHz, num:i(800000000))) +
                                                                                    num:f(number(node:fallback(../McuClkMux6_Source,'FIRC_CLK')='SERDES_0_LANE_1_CDR')) *
                                                                                    num:f(node:fallback(../../../../../McuInternalPAD_SERDES_0_LANE_1_CDR_FrequencyHz, num:i(800000000))) +
                                                                                    num:f(number(node:fallback(../McuClkMux6_Source,'FIRC_CLK')='SERDES_0_XPCS_1_CDR')) *
                                                                                    num:f(node:fallback(../../../../../McuInternalPAD_SERDES_0_XPCS_1_CDR_FrequencyHz, num:i(800000000))) +
                                                                                    num:f(number(node:fallback(../McuClkMux6_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                    num:f(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                                    num:f(number(node:fallback(../McuClkMux6_Source,'FIRC_CLK')='ACCEL_PLL_PHI0_CLK')) *
                                                                                    num:f(node:fallback(../../../McuPll_2/McuPll_Parameter/PLL_PHI0_Frequency, num:i(800000000)))
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &gt; num:i(ecu:get('MCU.AuxClock.Limits.Cgm2Mux6_CLK.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &lt; num:i(0)
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.Cgm2Mux6_CLK.High')"/>
                                                        <a:tst expr="&gt;=(ecu:get('MCU.AuxClock.Limits.Cgm2Mux6_CLK.Low') * num:i(number(contains(ecu:get('MCU.CGM2.ClockMuxes.List'),'CLKMUX_6') = 'true')))"/>
                                                    </a:a>
                                                </v:var>
                                            </v:ctr>

                                            <v:ctr name="McuCgm2ClockMux7" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            On S32G2XX, this container enables and selects the configuration clocks for PFEMAC0_REF_DIV_CLK. <br />
                                                            This container is not supported on S32R45 platform. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuCgm2ClockMux7"/>
                                                <a:a name="UUID" value="ECUC:a41831ad-add5-43a8-adeb-4ef1c3634d56"/>
                                                <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.CGM2.ClockMuxes.List'), 'CLKMUX_7')" />
                                                </a:a>

                                                <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock mux is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM2 Clock Mux under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:e4d9ca8b-37f3-fc3a-b8b2-cc0f2278843e"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:da name="EDITABLE" type="XPath">
                                                        <a:tst expr="contains(ecu:get('MCU.CGM2.ClockMuxes.List'),'CLKMUX_7') or (node:fallback(.,'true') = 'true')"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClkMux7_Source" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 7 Source Selection. <br />
                                                                Sets the MC_CGM_2_MUX_7_CSC[SELCTL] field register. <br />
                                                                MC_CGM_2_MUX_7_CSC[SELCTL] - This field selects the source clock for Clock Mux 7. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                     </a:a>
                                                     <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM2 Clock Mux7 Source"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:09fa684c-d1b9-ba73-8324-3cfcd5b5456b"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM2.ClockMux7.Default')"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM2.ClockMux7.List')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'CORE_PLL_DFS5_CLK') and
                                                                       (node:fallback(../../../McuCoreDfs/McuDfs_5/McuDFSPort_En, 'false') = 'false')
                                                                     )"
                                                               true="If 'CORE_PLL_DFS5_CLK' is selected as source clock, CoresDFS5 must be enabled (i.e. McuCoreDfs/McuDfs_5/McuDFSPort_En = 'true')."/>
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'ACCEL_PLL_PHI0_CLK') and
                                                                       (node:fallback(../../../McuPll_2/McuPll_Configuration/McuPllOdiv0_En, 'false') = 'false')
                                                                     )"
                                                               true="If 'ACCEL_PLL_PHI0_CLK' is selected as source clock, AccelPLL_ODIV0 must be enabled (i.e. McuPll_2/McuPll_Configuration/McuPllOdiv0_En = 'true')."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClockMux7_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux7 Frequency (APEXD_1_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8cfbf2d0-3b14-e345-a0ec-dd1753308c2f"/>
                                                    <a:a name="VISIBLE" type="XPath">
                                                        <a:tst expr="text:tolower(ecu:get('MCU.CGM2.ClockMux7.HasUndividedOutput')) = 'true'" />
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(
                                                                num:f(number(node:fallback(../McuClkMux7_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                num:f(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                num:f(number(node:fallback(../McuClkMux7_Source,'FIRC_CLK')='ACCEL_PLL_PHI0_CLK')) *
                                                                num:f(node:fallback(../../../McuPll_2/McuPll_Parameter/PLL_PHI0_Frequency, num:i(800000000))) +
                                                                num:f(number(node:fallback(../McuClkMux7_Source,'FIRC_CLK')='CORE_PLL_DFS5_CLK')) *
                                                                num:f(node:fallback(../../../McuCoreDfs/McuDfs_5/DFS_CLK_Frequency, num:i(800000000)))
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    text:tolower(ecu:get('MCU.CGM2.ClockMux7.HasUndividedOutput')) = 'true'
                                                                )
                                                                and
                                                                (
                                                                    (
                                                                        not( node:empty( node:fallback(., 800000000) ) )
                                                                        and
                                                                        (
                                                                            num:f( node:fallback(., 800000000) ) !=
                                                                            (
                                                                                num:f(
                                                                                    num:f(
                                                                                        num:f(number(node:fallback(../McuClkMux7_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                        num:f(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                                        num:f(number(node:fallback(../McuClkMux7_Source,'FIRC_CLK')='ACCEL_PLL_PHI0_CLK')) *
                                                                                        num:f(node:fallback(../../../McuPll_2/McuPll_Parameter/PLL_PHI0_Frequency, num:i(800000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux7_Source,'FIRC_CLK')='CORE_PLL_DFS5_CLK')) *
                                                                                        num:f(node:fallback(../../../McuCoreDfs/McuDfs_5/DFS_CLK_Frequency, num:i(800000000)))
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                    or
                                                                    (
                                                                        node:fallback(., num:i(40000000)) &gt; num:i(ecu:get('MCU.AuxClock.Limits.Cgm2Mux7_CLK'))
                                                                    )
                                                                    or
                                                                    (
                                                                        node:fallback(., num:i(40000000)) &lt; num:i(0)
                                                                    )
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.Cgm2Mux7_CLK')"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClkMux7Div0_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 7 Divider enable. <br />
                                                                This field enables the Clock Divider for: <br />
                                                                S32G2XX - PFEMAC0_REF_DIV_CLK <br />
                                                                Sets the MC_CGM_2_MUX_7_DC_0[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                If it is set to 0 (Divider 0 is disabled), any write access to the MC_CGM_2_MUX_7_DC_0[DIV] field is ignored and the PFEMAC0_REF_DIV_CLK clock remains disabled. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM2 Clock Mux7 Divider0 Enable (PFEMAC0_REF_DIV_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:0b519611-f7b1-fa2f-b7e0-d53501c32f49"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM2.ClockMux7.Divider0.DivEn.Default')"/>
                                                </v:var>

                                                <v:var name="McuClkMux7Div0_Divisor" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 7 Division value. <br />
                                                                Sets the MC_CGM_2_MUX_7_DC_0[DIV] field register. <br />
                                                                MC_CGM_2_MUX_7_DC_0[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider. <br />
                                                                This parameter is enabled only if McuClkMux7Div0_En is true. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM2 Clock Mux7 Divisor0 (PFEMAC0_REF_DIV_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:b61741f2-7b4c-28d7-b8da-791aaa73405e"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM2.ClockMux7.Divider0.Default')"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuClkMux7Div0_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.CGM2.ClockMux7.Divider0.Limit')"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClockMux7Divider0_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux7 Divider0 Frequency (PFEMAC0_REF_DIV_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8cfb9620-3b85-4d98-90e6-3da74f298c2f"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuClkMux7Div0_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:i(number(node:fallback(../McuClkMux7Div0_En, 'true') = 'true')) *
                                                            num:f(
                                                                num:f(
                                                                    num:f(number(node:fallback(../McuClkMux7_Source,'FIRC_CLK')='PFE_MAC_0_EXT_REF_CLK')) *
                                                                    num:f(node:fallback(../../../../../McuExternalPAD_PFE_MAC_0_EXT_REF_CLK_FrequencyHz, num:i(800000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux7_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                    num:f(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                                )
                                                                div
                                                                num:f(
                                                                    node:fallback(../McuClkMux7Div0_Divisor, num:i(0)) + num:f(1)
                                                                )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 800000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 800000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:i(number(node:fallback(../McuClkMux7Div0_En, 'true') = 'true')) *
                                                                                num:f(
                                                                                    num:f(
                                                                                        num:f(number(node:fallback(../McuClkMux7_Source,'FIRC_CLK')='PFE_MAC_0_EXT_REF_CLK')) *
                                                                                        num:f(node:fallback(../../../../../McuExternalPAD_PFE_MAC_0_EXT_REF_CLK_FrequencyHz, num:i(800000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux7_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                        num:f(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                                                    )
                                                                                    div
                                                                                    num:f(
                                                                                        node:fallback(../McuClkMux7Div0_Divisor, num:i(0)) + num:f(1)
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &gt; num:i(ecu:get('MCU.AuxClock.Limits.Cgm2Mux7_CLK'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &lt; num:i(0)
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.Cgm2Mux7_CLK')"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>
                                            </v:ctr>

                                            <v:ctr name="McuCgm2ClockMux8" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            On S32G2XX, this container enables and selects the configuration clocks for PFEMAC1_REF_DIV_CLK. <br />
                                                            This container is not supported on S32R45 platform. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuCgm2ClockMux8"/>
                                                <a:a name="UUID" value="ECUC:a41731ad-add5-73a8-ade7-4ef1cf634d56"/>
                                                <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.CGM2.ClockMuxes.List'), 'CLKMUX_8')" />
                                                </a:a>

                                                <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock mux is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM2 Clock Mux under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:e4d88a8b-11f3-fc3a-b4b2-cc0f5778843e"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:da name="EDITABLE" type="XPath">
                                                        <a:tst expr="contains(ecu:get('MCU.CGM2.ClockMuxes.List'),'CLKMUX_8') or (node:fallback(.,'true') = 'true')"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClkMux8_Source" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 8 Source Selection. <br />
                                                                Sets the MC_CGM_2_MUX_8_CSC[SELCTL] field register. <br />
                                                                MC_CGM_2_MUX_8_CSC[SELCTL] - This field selects the source clock for Clock Mux 8. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                     </a:a>
                                                     <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM2 Clock Mux8 Source"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:78fae84c-71b9-4a55-2724-3cfcd5b5456b"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM2.ClockMux8.Default')"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM2.ClockMux8.List')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'PFEMAC1_REF_DIV_CLK') and
                                                                       (node:fallback(../../McuCgm0ClockMux5/McuClkMux5Div0_En, 'false') = 'false')
                                                                     )"
                                                               true="If 'PFEMAC1_REF_DIV_CLK' is selected as source clock, McuClkMux5Div0_En must be enabled (i.e. McuCgm0ClockMux5/McuClkMux5Div0_En = 'true')."/>
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'ACCEL_PLL_PHI1_CLK') and
                                                                       (node:fallback(../../../McuPll_2/McuPll_Configuration/McuPllOdiv1_En, 'false') = 'false')
                                                                     )"
                                                               true="If 'ACCEL_PLL_PHI1_CLK' is selected as source clock, AccelPLL_ODIV1 must be enabled (i.e. McuPll_2/McuPll_Configuration/McuPllOdiv1_En = 'true')."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClockMux8_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux8 Frequency (PFEMAC1_REF_DIV_CLK, APEXD_2_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8cfbf2d0-3b63-e375-a0ec-bd7353308c2f"/>
                                                    <a:a name="VISIBLE" type="XPath">
                                                        <a:tst expr="text:tolower(ecu:get('MCU.CGM2.ClockMux8.HasUndividedOutput')) = 'true'" />
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(
                                                                num:f(number(node:fallback(../McuClkMux8_Source,'FIRC_CLK')='ACCEL_PLL_PHI1_CLK')) *
                                                                num:f(node:fallback(../../../McuPll_2/McuPll_Parameter/PLL_PHI1_Frequency, num:i(125000000))) +
                                                                num:f(number(node:fallback(../McuClkMux8_Source,'FIRC_CLK')='PFE_MAC_1_EXT_REF_CLK')) *
                                                                num:f(node:fallback(../../../../../McuExternalPAD_PFE_MAC_1_EXT_REF_CLK_FrequencyHz, num:i(800000000))) +
                                                                num:f(number(node:fallback(../McuClkMux8_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                num:f(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    text:tolower(ecu:get('MCU.CGM2.ClockMux8.HasUndividedOutput')) = 'true'
                                                                )
                                                                and
                                                                (
                                                                    (
                                                                        not( node:empty( node:fallback(., 800000000) ) )
                                                                        and
                                                                        (
                                                                            num:f( node:fallback(., 800000000) ) !=
                                                                            (
                                                                                num:f(
                                                                                    num:f(
                                                                                        num:f(number(node:fallback(../McuClkMux8_Source,'FIRC_CLK')='ACCEL_PLL_PHI1_CLK')) *
                                                                                        num:f(node:fallback(../../../McuPll_2/McuPll_Parameter/PLL_PHI1_Frequency, num:i(125000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux8_Source,'FIRC_CLK')='PFE_MAC_1_EXT_REF_CLK')) *
                                                                                        num:f(node:fallback(../../../../../McuExternalPAD_PFE_MAC_1_EXT_REF_CLK_FrequencyHz, num:i(800000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux8_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                        num:f(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                    or
                                                                    (
                                                                        node:fallback(., num:i(40000000)) &gt; num:i(ecu:get('MCU.AuxClock.Limits.Cgm2Mux8_CLK'))
                                                                    )
                                                                    or
                                                                    (
                                                                        node:fallback(., num:i(40000000)) &lt; num:i(0)
                                                                    )
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.Cgm2Mux8_CLK')"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClkMux8Div0_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 8 Divider enable. <br />
                                                                This field enables the Clock Divider for: <br />
                                                                S32G2XX - PFEMAC1_REF_DIV_CLK <br />
                                                                Sets the MC_CGM_2_MUX_8_DC_0[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                If it is set to 0 (Divider 0 is disabled), any write access to the MC_CGM_2_MUX_8_DC_0[DIV] field is ignored and the PFEMAC1_REF_DIV_CLK clock remains disabled. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM2 Clock Mux8 Divider0 Enable (PFEMAC1_REF_DIV_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:0b519611-f7b1-fa2f-b7e0-d39501c32f49"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM2.ClockMux8.Divider0.DivEn.Default')"/>
                                                </v:var>

                                                <v:var name="McuClkMux8Div0_Divisor" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 8 Division value. <br />
                                                                Sets the MC_CGM_2_MUX_8_DC_0[DIV] field register. <br />
                                                                MC_CGM_2_MUX_8_DC_0[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider. <br />
                                                                This parameter is enabled only if McuClkMux8Div0_En is true. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM2 Clock Mux8 Divisor0 (PFEMAC1_REF_DIV_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:b61741f2-7b4c-46d7-b8da-791aaa73405e"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM2.ClockMux8.Divider0.Default')"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuClkMux8Div0_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.CGM2.ClockMux8.Divider0.Limit')"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClockMux8Divider0_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux8 Divider0 Frequency (PFEMAC1_REF_DIV_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8cfb9620-3b85-4338-90e6-3da74b298c2f"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuClkMux8Div0_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:i(number(node:fallback(../McuClkMux8Div0_En, 'true') = 'true')) *
                                                            num:f(
                                                                num:f(
                                                                    num:f(number(node:fallback(../McuClkMux8_Source,'FIRC_CLK')='PFE_MAC_1_EXT_REF_CLK')) *
                                                                    num:f(node:fallback(../../../../../McuExternalPAD_PFE_MAC_1_EXT_REF_CLK_FrequencyHz, num:i(800000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux8_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                    num:f(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                                )
                                                                div
                                                                num:f(
                                                                    node:fallback(../McuClkMux8Div0_Divisor, num:i(0)) + num:f(1)
                                                                )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 800000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 800000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:i(number(node:fallback(../McuClkMux8Div0_En, 'true') = 'true')) *
                                                                                num:f(
                                                                                    num:f(
                                                                                        num:f(number(node:fallback(../McuClkMux8_Source,'FIRC_CLK')='PFE_MAC_1_EXT_REF_CLK')) *
                                                                                        num:f(node:fallback(../../../../../McuExternalPAD_PFE_MAC_1_EXT_REF_CLK_FrequencyHz, num:i(800000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux8_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                        num:f(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                                                    )
                                                                                    div
                                                                                    num:f(
                                                                                        node:fallback(../McuClkMux8Div0_Divisor, num:i(0)) + num:f(1)
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &gt; num:i(ecu:get('MCU.AuxClock.Limits.Cgm2Mux8_CLK'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &lt; num:i(0)
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.Cgm2Mux8_CLK')"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                            </v:ctr>

                                            <v:ctr name="McuCgm2ClockMux9" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            On S32G2XX, this container enables and selects the configuration clocks for PFEMAC2_REF_DIV_CLK. <br />
                                                            This container is not supported on S32R45 platform. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuCgm2ClockMux9"/>
                                                <a:a name="UUID" value="ECUC:a41441ad-add5-43a8-adeb-4ef1c3634d56"/>
                                                <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.CGM2.ClockMuxes.List'), 'CLKMUX_9')" />
                                                </a:a>

                                                <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock mux is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM2 Clock Mux under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:e4d9ca8b-37f3-fc3a-b8b2-cc0f2298843e"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:da name="EDITABLE" type="XPath">
                                                        <a:tst expr="contains(ecu:get('MCU.CGM2.ClockMuxes.List'),'CLKMUX_9') or (node:fallback(.,'true') = 'true')"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClkMux9_Source" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 9 Source Selection. <br />
                                                                Sets the MC_CGM_2_MUX_9_CSC[SELCTL] field register. <br />
                                                                MC_CGM_2_MUX_9_CSC[SELCTL] - This field selects the source clock for Clock Mux 9. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                     </a:a>
                                                     <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM2 Clock Mux9 Source"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:09fa684c-d1b9-ba73-5324-3cfcd5b5456b"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM2.ClockMux9.Default')"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM2.ClockMux9.List')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'PERIPH_PLL_DFS5_CLK') and
                                                                       (node:fallback(../../../McuPeriphDfs/McuDfs_5/McuDFSPort_En, 'false') = 'false')
                                                                     )"
                                                               true="If 'PERIPH_PLL_DFS5_CLK' is selected as source clock, PeriphDFS5 must be enabled (i.e. McuPeriphDfs/McuDfs_5/McuDFSPort_En = 'true')."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClockMux9_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux9 Frequency (DCU_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8cfbf2d0-3b14-e345-a0ec-bd1753308c2f"/>
                                                    <a:a name="VISIBLE" type="XPath">
                                                        <a:tst expr="text:tolower(ecu:get('MCU.CGM2.ClockMux9.HasUndividedOutput')) = 'true'" />
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(
                                                                num:f(number(node:fallback(../McuClkMux9_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                num:f(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                num:f(number(node:fallback(../McuClkMux9_Source,'FIRC_CLK')='PERIPH_PLL_DFS5_CLK')) *
                                                                num:f(node:fallback(../../../McuPeriphDfs/McuDfs_5/DFS_CLK_Frequency, num:i(800000000)))
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    text:tolower(ecu:get('MCU.CGM2.ClockMux9.HasUndividedOutput')) = 'true'
                                                                )
                                                                and
                                                                (
                                                                    (
                                                                        not( node:empty( node:fallback(., 800000000) ) )
                                                                        and
                                                                        (
                                                                            num:f( node:fallback(., 800000000) ) !=
                                                                            (
                                                                                num:f(
                                                                                    num:f(
                                                                                        num:f(number(node:fallback(../McuClkMux9_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                        num:f(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                                        num:f(number(node:fallback(../McuClkMux9_Source,'FIRC_CLK')='PERIPH_PLL_DFS5_CLK')) *
                                                                                        num:f(node:fallback(../../../McuPeriphDfs/McuDfs_5/DFS_CLK_Frequency, num:i(800000000)))
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                    or
                                                                    (
                                                                        node:fallback(., num:i(40000000)) &gt; num:i(ecu:get('MCU.AuxClock.Limits.Cgm2Mux9_CLK'))
                                                                    )
                                                                    or
                                                                    (
                                                                        node:fallback(., num:i(40000000)) &lt; num:i(0)
                                                                    )
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.Cgm2Mux9_CLK')"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClkMux9Div0_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 9 Divider enable. <br />
                                                                This field enables the Clock Divider for: <br />
                                                                S32G2XX - PFEMAC2_REF_DIV_CLK <br />
                                                                Sets the MC_CGM_2_MUX_9_DC_0[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                If it is set to 0 (Divider 0 is disabled), any write access to the MC_CGM_2_MUX_9_DC_0[DIV] field is ignored and the PFEMAC2_REF_DIV_CLK clock remains disabled. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM2 Clock Mux9 Divider0 Enable (PFEMAC2_REF_DIV_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:0b519611-a7b1-fa2f-b7e0-d53501c32f49"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM2.ClockMux9.Divider0.DivEn.Default')"/>
                                                </v:var>

                                                <v:var name="McuClkMux9Div0_Divisor" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 9 Division value. <br />
                                                                Sets the MC_CGM_2_MUX_9_DC_0[DIV] field register. <br />
                                                                MC_CGM_2_MUX_9_DC_0[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider. <br />
                                                                This parameter is enabled only if McuClkMux9Div0_En is true. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM2 Clock Mux9 Divisor0 (PFEMAC2_REF_DIV_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:b61741f2-7b4c-28d7-b8da-541aaa73405e"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM2.ClockMux9.Divider0.Default')"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuClkMux9Div0_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.CGM2.ClockMux9.Divider0.Limit')"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClockMux9Divider0_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux9 Divider0 Frequency (PFEMAC2_REF_DIV_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8cfb9620-3b85-4d98-00e6-3da74b298c2f"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuClkMux9Div0_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:i(number(node:fallback(../McuClkMux9Div0_En, 'true') = 'true')) *
                                                            num:f(
                                                                num:f(
                                                                    num:f(number(node:fallback(../McuClkMux9_Source,'FIRC_CLK')='PFE_MAC_2_EXT_REF_CLK')) *
                                                                    num:f(node:fallback(../../../../../McuExternalPAD_PFE_MAC_2_EXT_REF_CLK_FrequencyHz, num:i(800000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux9_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                    num:f(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                                )
                                                                div
                                                                num:f(
                                                                    node:fallback(../McuClkMux9Div0_Divisor, num:i(0)) + num:f(1)
                                                                )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 800000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 800000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:i(number(node:fallback(../McuClkMux9Div0_En, 'true') = 'true')) *
                                                                                num:f(
                                                                                    num:f(
                                                                                        num:f(number(node:fallback(../McuClkMux9_Source,'FIRC_CLK')='PFE_MAC_2_EXT_REF_CLK')) *
                                                                                        num:f(node:fallback(../../../../../McuExternalPAD_PFE_MAC_2_EXT_REF_CLK_FrequencyHz, num:i(800000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux9_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                        num:f(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                                                    )
                                                                                    div
                                                                                    num:f(
                                                                                        node:fallback(../McuClkMux9Div0_Divisor, num:i(0)) + num:f(1)
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &gt; num:i(ecu:get('MCU.AuxClock.Limits.Cgm2Mux9_CLK'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &lt; num:i(0)
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.Cgm2Mux9_CLK')"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>
                                            </v:ctr>

                                        </v:ctr>

                                        <v:ctr name="McuCgm5SettingConfig" type="IDENTIFIABLE">
                                        <a:a name="DESC">
                                            <a:v>
                                                <![CDATA[EN:<html>
                                                    This container contains the configuration for the CGM_5 settings of the MCU.
                                                </html>]]>
                                            </a:v>
                                        </a:a>
                                        <a:a name="UUID" value="ECUC:f605d1f7-3b16-424c-a177-afbb5af00bb9"/>

                                            <v:ctr name="McuCgm5ClockMux0" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container enables and selects the configuration clocks
                                                            for DDR_CLK.
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuCgm5ClockMux0"/>
                                                <a:a name="UUID" value="ECUC:a45619ad-5dde-462b-ae97-4e81cd424d50"/>

                                                <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock mux is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock refference points  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM5 Clock Mux under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:e42a4c8b-7f63-b5fa-b0b2-ac018378243e"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMux0_Source" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Select the Clock Mux 0 Source Selection.
                                                                Configure the MC_CGM_5_MUX_0_CSC[SELCTL] field register.
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                     </a:a>
                                                     <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM5 Clock Mux0 Source"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:fe43ec4c-73be-4b71-8a24-3cfb7ab5426b"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM5.ClockMux0.Default')"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM5.ClockMux0.List')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'DDR_PLL_PHI0_CLK') and
                                                                       (node:fallback(../../../McuPll_3/McuPll_Configuration/McuPllOdiv0_En, 'false') = 'false')
                                                                     )"
                                                            true="If 'DDR_PLL_PHI0_CLK' is selected as source clock, DDRPLL_ODIV0 must be enabled (i.e. McuPll_3/McuPll_Configuration/McuPllOdiv0_En = 'true')."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClockMux0_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux0 Frequency (DDR_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8cfbf6d0-3a61-43e0-96ec-bd735e308c2f"/>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(
                                                                num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='DDR_PLL_PHI0_CLK')) *
                                                                num:f(node:fallback(../../../McuPll_3/McuPll_Parameter/PLL_PHI0_Frequency, num:i(40000000))) +
                                                                num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                num:f(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 40000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 40000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(
                                                                                    num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='DDR_PLL_PHI0_CLK')) *
                                                                                    num:f(node:fallback(../../../McuPll_3/McuPll_Parameter/PLL_PHI0_Frequency, num:i(40000000))) +
                                                                                    num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                    num:f(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &gt; num:i(ecu:get('MCU.AuxClock.Limits.DDR_CLK.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &lt; num:i(ecu:get('MCU.AuxClock.Limits.DDR_CLK.Low'))
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.DDR_CLK.High')"/>
                                                        <a:tst expr="&gt;=ecu:get('MCU.AuxClock.Limits.DDR_CLK.Low')"/>
                                                    </a:a>
                                                </v:var>
                                            </v:ctr>
                                        </v:ctr>

                                        <v:ctr name="McuCgm6SettingConfig" type="IDENTIFIABLE">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        This container contains the configuration for the CGM_6 settings of the MCU.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="UUID" value="ECUC:f605d1f7-3b16-424c-a178-afbb5af00bb9"/>

                                            <v:ctr name="McuCgm6ClockMux0" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container enables and selects the configuration clocks
                                                            for GMAC_TS_CLK. <br />
                                                            This container is supported on S32G3XX derivatives only. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuCgm6ClockMux0"/>
                                                <a:a name="UUID" value="ECUC:a4073f7d-afd5-43a8-ad31-4af5c36b4d50"/>
                                                <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.CGM6.ClockMuxes.List'), 'CLKMUX_0')" />
                                                </a:a>

                                                <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock mux is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM6 Clock Mux under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:e4d99a8b-10f3-4c3a-08b5-cc1f0778a43e"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMux0_Source" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 0 Source Selection. <br />
                                                                Sets the MC_CGM_6_MUX_0_CSC[SELCTL] field register. <br />
                                                                MC_CGM_6_MUX_0_CSC[SELCTL] - This field selects the source clock for Clock Mux 0. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                     </a:a>
                                                     <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM6 Clock Mux0 Source"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:10f2684c-dab9-b573-83dc-3cfcf5b5426b"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM6.ClockMux0.Default')"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM6.ClockMux0.List')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'PERIPH_PLL_PHI4_CLK') and
                                                                       (node:fallback(../../../McuPll_1/McuPll_Configuration/McuPllOdiv4_En, 'false') = 'false')
                                                                     )"
                                                            true="If 'PERIPH_PLL_PHI4_CLK' is selected as source clock, PeriphPLL_ODIV4 must be enabled."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClkMux0Div0_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 0 Divider enable. <br />
                                                                This field enables the Clock Divider for GMAC_TS_CLK. <br />
                                                                Sets the MC_CGM_6_MUX_0_DC_0[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                If it is set to 0 (Divider 0 is disabled), any write access to the MC_CGM_6_MUX_0_DC_0[DIV] field is ignored and the GMAC_TS_CLK clock remains disabled. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM6 Clock Mux0 Divider0 Enable (GMAC_TS_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:0b519f11-f7bb-fa2f-9750-d6250fc30f10"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                </v:var>

                                                <v:var name="McuClkMux0Div0_Divisor" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 0 Division value. <br />
                                                                Sets the MC_CGM_6_MUX_0_DC_0[DIV] field register. <br />
                                                                MC_CGM_6_MUX_0_DC_0[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider. <br />
                                                                This parameter is enabled only if McuClkMux9Div0_En is true. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM6 Clock Mux0 Divisor0 (GMAC_TS_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:b6464af2-7bf0-46d7-b8ba-791a6a73406e"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuClkMux0Div0_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=255"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClockMux0Divider0_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux0 Divider0 Frequency (GMAC_TS_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8cfb9a00-3b85-4dfe-9fe6-3d375b298c3f"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuClkMux0Div0_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:i(number(node:fallback(../McuClkMux0Div0_En, 'true') = 'true')) *
                                                            num:f(
                                                                num:f(
                                                                    num:i(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='PERIPH_PLL_PHI4_CLK')) *
                                                                    num:i(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI4_Frequency, num:i(200000000))) +
                                                                    num:i(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='GMAC_EXT_TS_CLK')) *
                                                                    num:i(node:fallback(../../../../../McuExternalPAD_GMAC_EXT_TS_CLK_FrequencyHz, num:i(200000000))) +
                                                                    num:i(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                    num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                                ) div
                                                                num:f(
                                                                    node:fallback(../McuClkMux0Div0_Divisor, num:i(0)) + num:f(1)
                                                                )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 800000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 800000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:i(number(node:fallback(../McuClkMux0Div0_En, 'true') = 'true')) *
                                                                                num:f(
                                                                                    num:f(
                                                                                        num:i(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='PERIPH_PLL_PHI4_CLK')) *
                                                                                        num:i(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI4_Frequency, num:i(200000000))) +
                                                                                        num:i(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='GMAC_EXT_TS_CLK')) *
                                                                                        num:i(node:fallback(../../../../../McuExternalPAD_GMAC_EXT_TS_CLK_FrequencyHz, num:i(200000000))) +
                                                                                        num:i(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                        num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                                                    ) div
                                                                                    num:f(
                                                                                        node:fallback(../McuClkMux0Div0_Divisor, num:i(0)) + num:f(1)
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &gt; num:i(ecu:get('MCU.AuxClock.Limits.GMAC_TS_CLK.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &lt; (num:i(ecu:get('MCU.AuxClock.Limits.GMAC_TS_CLK.Low')) * num:i(number(node:fallback(../McuClkMux0Div0_En, 'false') = 'true')))
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.GMAC_TS_CLK.High')"/>
                                                        <a:tst expr="&gt;=(ecu:get('MCU.AuxClock.Limits.GMAC_TS_CLK.Low') * num:i(number(node:fallback(../McuClkMux0Div0_En, 'false') = 'true')))"/>
                                                    </a:a>
                                                </v:var>

                                            </v:ctr>

                                            <v:ctr name="McuCgm6ClockMux1" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container enables and selects the configuration clocks
                                                            for GMAC_0_TX_CLK. <br />
                                                            This container is supported on S32G3XX derivatives only. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuCgm6ClockMux1"/>
                                                <a:a name="UUID" value="ECUC:a4073f7d-afd0-43a8-a533-4af5b36b4d50"/>
                                                <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.CGM6.ClockMuxes.List'), 'CLKMUX_1')" />
                                                </a:a>

                                                <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock mux is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM6 Clock Mux under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:e4d99a8b-10f9-4c3a-08ba-cc0f077ca53e"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMux1_Source" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 1 Source Selection. <br />
                                                                Sets the MC_CGM_6_MUX_1_CSC[SELCTL] field register. <br />
                                                                MC_CGM_6_MUX_1_CSC[SELCTL] - This field selects the source clock for Clock Mux 1. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                     </a:a>
                                                     <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM6 Clock Mux1 Source"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:10f4684c-dab9-b573-83dc-3cfcf7b5426b"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM6.ClockMux1.Default')"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM6.ClockMux1.List')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'PERIPH_PLL_PHI5_CLK') and
                                                                       (node:fallback(../../../McuPll_1/McuPll_Configuration/McuPllOdiv5_En, 'false') = 'false')
                                                                     )"
                                                            true="If 'PERIPH_PLL_PHI5_CLK' is selected as source clock, PeriphPLL_ODIV5 must be enabled."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClkMux1Div0_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 1 Divider enable. <br />
                                                                This field enables the Clock Divider for GMAC_0_TX_CLK. <br />
                                                                Sets the MC_CGM_6_MUX_1_DC_0[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                If it is set to 0 (Divider 0 is disabled), any write access to the MC_CGM_6_MUX_1_DC_0[DIV] field is ignored and the GMAC_0_TX_CLK clock remains disabled. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM6 Clock Mux1 Divider0 Enable (GMAC_0_TX_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:0b519f1c-f7bb-fa2f-9780-d625bfc31f19"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                </v:var>

                                                <v:var name="McuClkMux1Div0_Divisor" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 1 Division value. <br />
                                                                Sets the MC_CGM_6_MUX_1_DC_0[DIV] field register. <br />
                                                                MC_CGM_6_MUX_1_DC_0[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider. <br />
                                                                This parameter is enabled only if McuClkMux1Div0_En is true. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM6 Clock Mux1 Divisor0 (GMAC_0_TX_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:b6464a92-7bf0-46d7-b8ba-791b6a73f157"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuClkMux1Div0_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=255"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClockMux1Divider0_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux1 Divider0 Frequency (GMAC_0_TX_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8cfb9a70-3b8c-4dfe-9fe6-3d475bf99c2f"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuClkMux1Div0_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:i(number(node:fallback(../McuClkMux1Div0_En, 'true') = 'true')) *
                                                            num:f(
                                                                num:f(
                                                                    num:i(number(node:fallback(../McuClkMux1_Source,'FIRC_CLK')='PERIPH_PLL_PHI5_CLK')) *
                                                                    num:i(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI5_Frequency, num:i(125000000))) +
                                                                    num:i(number(node:fallback(../McuClkMux1_Source,'FIRC_CLK')='GMAC_0_EXT_TX_CLK')) *
                                                                    num:i(node:fallback(../../../../../McuExternalPAD_GMAC_0_EXT_TX_CLK_FrequencyHz, num:i(125000000))) +
                                                                    num:i(number(node:fallback(../McuClkMux1_Source,'FIRC_CLK')='GMAC_0_EXT_REF_CLK')) *
                                                                    num:i(node:fallback(../../../../../McuExternalPAD_GMAC_0_EXT_REF_CLK_FrequencyHz , num:i(100000000))) +
                                                                    num:i(number(node:fallback(../McuClkMux1_Source,'FIRC_CLK')='SERDES_0_LANE_0_TX')) *
                                                                    num:i(node:fallback(../../../../../McuInternalPAD_SERDES_0_LANE_0_TX_FrequencyHz, num:i(100000000))) +
                                                                    num:i(number(node:fallback(../McuClkMux1_Source,'FIRC_CLK')='SERDES_0_XPCS_0_TX')) *
                                                                    num:i(node:fallback(../../../../../McuInternalPAD_SERDES_0_XPCS_0_TX_FrequencyHz, num:i(100000000))) +
                                                                    num:i(number(node:fallback(../McuClkMux1_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                    num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                                ) div
                                                                num:f(
                                                                    node:fallback(../McuClkMux1Div0_Divisor, num:i(0)) + num:f(1)
                                                                )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 800000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 800000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:i(number(node:fallback(../McuClkMux1Div0_En, 'true') = 'true')) *
                                                                                num:f(
                                                                                    num:f(
                                                                                        num:i(number(node:fallback(../McuClkMux1_Source,'FIRC_CLK')='PERIPH_PLL_PHI5_CLK')) *
                                                                                        num:i(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI5_Frequency, num:i(125000000))) +
                                                                                        num:i(number(node:fallback(../McuClkMux1_Source,'FIRC_CLK')='GMAC_0_EXT_TX_CLK')) *
                                                                                        num:i(node:fallback(../../../../../McuExternalPAD_GMAC_0_EXT_TX_CLK_FrequencyHz, num:i(125000000))) +
                                                                                        num:i(number(node:fallback(../McuClkMux1_Source,'FIRC_CLK')='GMAC_0_EXT_REF_CLK')) *
                                                                                        num:i(node:fallback(../../../../../McuExternalPAD_GMAC_0_EXT_REF_CLK_FrequencyHz, num:i(100000000))) +
                                                                                        num:i(number(node:fallback(../McuClkMux1_Source,'FIRC_CLK')='SERDES_0_LANE_0_TX')) *
                                                                                        num:i(node:fallback(../../../../../McuInternalPAD_SERDES_0_LANE_0_TX_FrequencyHz, num:i(100000000))) +
                                                                                        num:i(number(node:fallback(../McuClkMux1_Source,'FIRC_CLK')='SERDES_0_XPCS_0_TX')) *
                                                                                        num:i(node:fallback(../../../../../McuInternalPAD_SERDES_0_XPCS_0_TX_FrequencyHz, num:i(100000000))) +
                                                                                        num:i(number(node:fallback(../McuClkMux1_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                        num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                                                    ) div
                                                                                    num:f(
                                                                                        node:fallback(../McuClkMux1Div0_Divisor, num:i(0)) + num:f(1)
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &gt; num:i(ecu:get('MCU.AuxClock.Limits.GMAC_0_TX_CLK.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &lt; (num:i(ecu:get('MCU.AuxClock.Limits.GMAC_0_TX_CLK.Low')) * num:i(number(node:fallback(../McuClkMux1Div0_En, 'false') = 'true')))
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.GMAC_0_TX_CLK.High')"/>
                                                        <a:tst expr="&gt;=(ecu:get('MCU.AuxClock.Limits.GMAC_0_TX_CLK.Low') * num:i(number(node:fallback(../McuClkMux1Div0_En, 'false') = 'true')))"/>
                                                    </a:a>
                                                </v:var>
                                            </v:ctr>

                                            <v:ctr name="McuCgm6ClockMux2" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container enables and selects the configuration clocks
                                                            for GMAC_0_RX_CLK. <br />
                                                            This container is supported on S32G3XX derivatives only. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuCgm6ClockMux2"/>
                                                <a:a name="UUID" value="ECUC:a407367d-afd0-4338-a53b-4afeb36b5d50"/>
                                                <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.CGM6.ClockMuxes.List'), 'CLKMUX_2')" />
                                                </a:a>

                                                <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock mux is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM6 Clock Mux under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:e4d99abb-10fe-4c3a-06ba-cc0f078ca43e"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMux2_Source" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 2 Source Selection. <br />
                                                                Sets the MC_CGM_6_MUX_2_CSC[SELCTL] field register. <br />
                                                                MC_CGM_6_MUX_2_CSC[SELCTL] - This field selects the source clock for Clock Mux 2. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                     </a:a>
                                                     <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM6 Clock Mux2 Source"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:10f4684c-d9b9-b573-83d0-3cfef7b5426b"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM6.ClockMux2.Default')"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM6.ClockMux2.List')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'GMAC0_REF_DIV_CLK') and
                                                                       (node:fallback(../../McuCgm6ClockMux3/McuClkMux3Div0_En,'false') = 'false')
                                                                     )"
                                                            true="If 'GMAC0_REF_DIV_CLK' is selected as source clock, 'McuClkMux3Div0_En' must be enabled (i.e. McuCgm6ClockMux3/McuClkMux3Div0_En = 'true')."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClockMux2_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux2 Frequency (GMAC_0_RX_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8cfb9a70-3b83-4efe-9fe6-3d47cbf99c2f"/>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(
                                                                num:i(number(node:fallback(../McuClkMux2_Source,'FIRC_CLK')='GMAC_0_EXT_RX_CLK')) *
                                                                num:i(node:fallback(../../../../../McuExternalPAD_GMAC_0_EXT_RX_CLK_FrequencyHz, num:i(125000000))) +
                                                                num:i(number(node:fallback(../McuClkMux2_Source,'FIRC_CLK')='GMAC0_REF_DIV_CLK')) *
                                                                num:i(node:fallback(../../McuCgm6ClockMux3/McuClockMux3Divider0_Frequency, num:i(20000000))) +
                                                                num:i(number(node:fallback(../McuClkMux2_Source,'FIRC_CLK')='SERDES_0_LANE_0_CDR')) *
                                                                num:i(node:fallback(../../../../../McuInternalPAD_SERDES_0_LANE_0_CDR_FrequencyHz, num:i(100000000))) +
                                                                num:i(number(node:fallback(../McuClkMux2_Source,'FIRC_CLK')='SERDES_0_XPCS_0_CDR')) *
                                                                num:i(node:fallback(../../../../../McuInternalPAD_SERDES_0_XPCS_0_CDR_FrequencyHz, num:i(100000000))) +
                                                                num:i(number(node:fallback(../McuClkMux2_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 800000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 800000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(
                                                                                    num:i(number(node:fallback(../McuClkMux2_Source,'FIRC_CLK')='GMAC_0_EXT_RX_CLK')) *
                                                                                    num:i(node:fallback(../../../../../McuExternalPAD_GMAC_0_EXT_RX_CLK_FrequencyHz, num:i(125000000))) +
                                                                                    num:i(number(node:fallback(../McuClkMux2_Source,'FIRC_CLK')='GMAC0_REF_DIV_CLK')) *
                                                                                    num:i(node:fallback(../../McuCgm6ClockMux3/McuClockMux3Divider0_Frequency, num:i(20000000))) +
                                                                                    num:i(number(node:fallback(../McuClkMux2_Source,'FIRC_CLK')='SERDES_0_LANE_0_CDR')) *
                                                                                    num:i(node:fallback(../../../../../McuInternalPAD_SERDES_0_LANE_0_CDR_FrequencyHz, num:i(100000000))) +
                                                                                    num:i(number(node:fallback(../McuClkMux2_Source,'FIRC_CLK')='SERDES_0_XPCS_0_CDR')) *
                                                                                    num:i(node:fallback(../../../../../McuInternalPAD_SERDES_0_XPCS_0_CDR_FrequencyHz, num:i(100000000))) +
                                                                                    num:i(number(node:fallback(../McuClkMux2_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                    num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &gt; num:i(ecu:get('MCU.AuxClock.Limits.GMAC_0_RX_CLK.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &lt; num:i(ecu:get('MCU.AuxClock.Limits.GMAC_0_RX_CLK.Low'))
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.GMAC_0_RX_CLK.High')"/>
                                                        <a:tst expr="&gt;=ecu:get('MCU.AuxClock.Limits.GMAC_0_RX_CLK.Low')"/>
                                                    </a:a>
                                                </v:var>
                                            </v:ctr>

                                            <v:ctr name="McuCgm6ClockMux3" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container enables and selects the configuration clocks
                                                            for GMAC0_REF_DIV_CLK. <br />
                                                            This container is supported on S32G3XX derivatives only. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuCgm6ClockMux3"/>
                                                <a:a name="UUID" value="ECUC:a407e97d-a4d8-4b5c-a6f9-5cf1ca6c4d56"/>
                                                <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.CGM6.ClockMuxes.List'), 'CLKMUX_3')" />
                                                </a:a>

                                                <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock mux is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM6 Clock Mux under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:b429da8b-1a0c-af13-48b4-cb3f997b843e"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMux3_Source" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 3 Source Selection. <br />
                                                                Sets the MC_CGM_6_MUX_3_CSC[SELCTL] field register. <br />
                                                                MC_CGM_6_MUX_3_CSC[SELCTL] - This field selects the source clock for Clock Mux 3. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                     </a:a>
                                                     <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM6 Clock Mux3 Source"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:51fc614c-a14f-bb7b-13df-ecf47bb6c76b"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM6.ClockMux3.Default')"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM6.ClockMux3.List')"/>
                                                </v:var>

                                                <v:var name="McuClockMux3_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux3 Frequency (GMAC_0_REF_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8cfb9f20-3585-4d46-90e6-3dc75b299c2f"/>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(
                                                                num:i(number(node:fallback(../McuClkMux3_Source,'FIRC_CLK')='GMAC_0_EXT_REF_CLK')) *
                                                                num:i(node:fallback(../../../../../McuExternalPAD_GMAC_0_EXT_REF_CLK_FrequencyHz , num:i(100000000))) +
                                                                num:i(number(node:fallback(../McuClkMux3_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 800000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 800000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(
                                                                                    num:i(number(node:fallback(../McuClkMux3_Source,'FIRC_CLK')='GMAC_0_EXT_REF_CLK')) *
                                                                                    num:i(node:fallback(../../../../../McuExternalPAD_GMAC_0_EXT_REF_CLK_FrequencyHz , num:i(100000000))) +
                                                                                    num:i(number(node:fallback(../McuClkMux3_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                    num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &gt; num:i(ecu:get('MCU.AuxClock.Limits.GMAC_0_REF_CLK.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &lt; num:i(ecu:get('MCU.AuxClock.Limits.GMAC_0_REF_CLK.Low'))
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.GMAC_0_REF_CLK.High')"/>
                                                        <a:tst expr="&gt;=ecu:get('MCU.AuxClock.Limits.GMAC_0_REF_CLK.Low')"/>
                                                    </a:a>
                                                </v:var>


                                                <v:var name="McuClkMux3Div0_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 3 Divider enable. <br />
                                                                This field enables the Clock Divider for GMAC0_REF_DIV_CLK. <br />
                                                                Sets the MC_CGM_6_MUX_3_DC_0[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                If it is set to 0 (Divider 0 is disabled), any write access to the MC_CGM_6_MUX_3_DC_0[DIV] field is ignored and the GMAC0_REF_DIV_CLK clock remains disabled. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM6 Clock Mux3 Divider0 Enable (GMAC0_REF_DIV_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:0b3e91a1-f7b1-4a9f-87e0-6b17655aef49"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                </v:var>

                                                <v:var name="McuClkMux3Div0_Divisor" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 6 Division value. <br />
                                                                Sets the MC_CGM_6_MUX_3_DC_0[DIV] field register. <br />
                                                                MC_CGM_6_MUX_3_DC_0[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider. <br />
                                                                This parameter is enabled only if McuClkMux15Div0_En is true. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM6 Clock Mux3 Divisor0 (GMAC0_REF_DIV_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:b6484e12-7141-46e7-b87a-861cb847315a"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuClkMux3Div0_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=255"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClockMux3Divider0_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux6 Divider0 Frequency (GMAC0_REF_DIV_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8cfb9ac0-3b83-4cfe-9fc6-3d47cba92a2f"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuClkMux3Div0_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:i(number(node:fallback(../McuClkMux3Div0_En, 'true') = 'true')) *
                                                            num:f(
                                                                num:f(
                                                                    num:i(number(node:fallback(../McuClkMux3_Source,'FIRC_CLK')='GMAC_0_EXT_REF_CLK')) *
                                                                    num:i(node:fallback(../../../../../McuExternalPAD_GMAC_0_EXT_REF_CLK_FrequencyHz, num:i(100000000))) +
                                                                    num:i(number(node:fallback(../McuClkMux3_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                    num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                                ) div
                                                                num:f(
                                                                    node:fallback(../McuClkMux3Div0_Divisor, num:i(0)) + num:f(1)
                                                                )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 800000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 800000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:i(number(node:fallback(../McuClkMux3Div0_En, 'true') = 'true')) *
                                                                                num:f(
                                                                                    num:f(
                                                                                        num:i(number(node:fallback(../McuClkMux3_Source,'FIRC_CLK')='GMAC_0_EXT_REF_CLK')) *
                                                                                        num:i(node:fallback(../../../../../McuExternalPAD_GMAC_0_EXT_REF_CLK_FrequencyHz, num:i(100000000))) +
                                                                                        num:i(number(node:fallback(../McuClkMux3_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                        num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                                                    ) div
                                                                                    num:f(
                                                                                        node:fallback(../McuClkMux3Div0_Divisor, num:i(0)) + num:f(1)
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &gt; num:i(ecu:get('MCU.AuxClock.Limits.GMAC_0_REF_DIV_CLK.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &lt; (num:i(ecu:get('MCU.AuxClock.Limits.GMAC_0_REF_DIV_CLK.Low')) * num:i(number(node:fallback(../McuClkMux3Div0_En, 'false') = 'true')))
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.GMAC_0_REF_DIV_CLK.High')"/>
                                                        <a:tst expr="&gt;=(ecu:get('MCU.AuxClock.Limits.GMAC_0_REF_DIV_CLK.Low') * num:i(number(node:fallback(../McuClkMux3Div0_En, 'false') = 'true')))"/>
                                                    </a:a>
                                                </v:var>
                                            </v:ctr>

                                        </v:ctr>

                                        <v:ctr name="McuRtcClockSelect" type="IDENTIFIABLE">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        This container selects the configuration clocks for RTC_CLK. <br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="TAB" value="McuRtcClockSelect"/>
                                            <a:a name="UUID" value="ECUC:71f43071-99df-4944-8697-e77f4b3961eb"/>
                                            <a:a name="VISIBLE" type="XPath">
                                                <a:tst expr="(text:tolower(text:contains(ecu:list('MCU.RTC.SUPPORT'),'true'))='true')"/>
                                            </a:a>

                                            <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            Set this to TRUE if this clock mux is under mcu control <br />
                                                            If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                            The user must still set the values - they are used by the clock reference points  <br />
                                                            Note: Implementation Specific Parameter. <br />
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="LABEL" value="RTC Clock Select under MCU control"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:cd8f6f24-c5b0-4ad0-9445-7a688a53dc7e"/>
                                                <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="contains(ecu:get('MCU.RTC.SUPPORT'),'true')"/>
                                                </a:da>
                                            </v:var>

                                            <v:var name="McuRtc_Source" type="ENUMERATION">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            RTC_CLK Source Selection. <br />
                                                            Sets the RTCC[CLKSEL] field register. <br />
                                                            Sets the RTCC[CLKSEL] - This field selects the source clock for RTC_CLK. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                 </a:a>
                                                 <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="LABEL" value="RTC Clock Select Source"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:334287a2-2afe-4bf0-8c31-3cf46659c2d2"/>
                                                <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.RTC.ClockSelect.Default')"/>
                                                <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.RTC.ClockSelect.List')"/>
                                            </v:var>

                                            <v:var name="McuRtc_Frequency" type="FLOAT">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                            Value calculated for user info. It is given in Hz. <br />
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="LABEL" value="RTC_CLK Frequency"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:08430774-a7f3-4f60-9dd5-900551b3b673"/>
                                                <a:da name="DEFAULT" type="XPath">
                                                    <a:tst expr="
                                                    num:f( num:i(number(node:fallback(../McuClockMuxUnderMcuControl, 'false') = 'true')) *
                                                        num:f(
                                                            num:f(number(node:fallback(../McuRtc_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                            num:f(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                            num:f(number(node:fallback(../McuRtc_Source,'FIRC_CLK')='SIRC_CLK')) *
                                                            num:f(ecu:get('MCU.SIRC.Limits.SIRC.Typical')) +
                                                            num:f(number(node:fallback(../McuRtc_Source,'FIRC_CLK')='RTC_EXT_REF_CLK')) *
                                                            num:i(node:fallback(../../../../McuExternalPAD_RTC_EXT_REF_CLK_FrequencyHz, num:i(200000000)))
                                                        )
                                                    )
                                                    "/>
                                                </a:da>
                                                <a:da name="RANGE" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (
                                                                not( node:empty( node:fallback(., 800000000) ) )
                                                                and
                                                                (
                                                                    num:f( node:fallback(., 800000000) ) !=
                                                                    (
                                                                        num:f(
                                                                            num:i(number(node:fallback(../McuClockMuxUnderMcuControl, 'false') = 'true')) *
                                                                            num:f(
                                                                                num:f(number(node:fallback(../McuRtc_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                num:f(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                                num:f(number(node:fallback(../McuRtc_Source,'FIRC_CLK')='SIRC_CLK')) *
                                                                                num:f(ecu:get('MCU.SIRC.Limits.SIRC.Typical')) +
                                                                                num:f(number(node:fallback(../McuRtc_Source,'FIRC_CLK')='RTC_EXT_REF_CLK')) *
                                                                                num:i(node:fallback(../../../../McuExternalPAD_RTC_EXT_REF_CLK_FrequencyHz, num:i(200000000)))
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                            or
                                                            (
                                                                node:fallback(., num:i(40000000)) &gt; num:i(ecu:get('MCU.AuxClock.Limits.RTC_CLK'))
                                                            )
                                                            or
                                                            (
                                                                node:fallback(., num:i(40000000)) &lt; num:i(0)
                                                            )
                                                        )
                                                        "
                                                        true="Please press the button to calculate the value automatically."/>
                                                </a:da>
                                                <a:a name="INVALID" type="Range">
                                                    <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.RTC_CLK')"/>
                                                    <a:tst expr="&gt;=num:i(0)"/>
                                                </a:a>
                                            </v:var>
                                        </v:ctr>

                                        <v:ctr name="McuPll_0" type="IDENTIFIABLE">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        This container provides the specific configuration for the CORE PLL.
                                                        Note: Implementation Specific Container.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="TAB" value="McuCorePLL"/>
                                            <a:a name="UUID" value="ECUC:bfa6250f-717b-4911-a690-6cb59e8da246"/>

                                            <v:var name="McuPLLUnderMcuControl" type="BOOLEAN">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            Set this to TRUE if this PLL is under mcu control <br />
                                                            If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                            The user must still set the values - they are used by the clock reference points  <br />
                                                            Note: Implementation Specific Parameter. <br />
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="LABEL" value="CORE PLL under MCU control"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:1be167fc-e06b-4db8-a8d7-7853067a63b0"/>
                                                <a:da name="DEFAULT" type="XPath">
                                                    <a:tst expr="(node:fallback(../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'false')"/>
                                                </a:da>
                                                <a:da name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (node:fallback(., 'false') = 'true') and
                                                            (node:fallback(../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'true')
                                                        )"
                                                           true="CorePLL cannot be under MCU control if McuNoPll is enabled."/>
                                                    <a:tst expr="
                                                        (
                                                            ( node:fallback(., 'false') = 'true' ) and
                                                            ( node:fallback(as:modconf('Mcu')[1]/McuGeneralConfiguration/McuControlledClocksConfiguration/McuPll0UnderMcuControl, 'false') = 'false' )
                                                        )"
                                                        true="The field McuGeneralConfiguration/McuControlledClocksConfiguration/McuPll0UnderMcuControl must be set to 'true' when CorePLL is under MCU control."/>
                                                </a:da>
                                            </v:var>

                                            <v:var name="McuPLLEnabled" type="BOOLEAN">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            0 - CorePLL is disabled. <br />
                                                            1 - CorePLL is enabled (and can be used as a clock source). <br />
                                                            Note: Implementation Specific Parameter. <br />
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="LABEL" value="Core PLL Enabled"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:1be167fc-e06b-4db8-a8d7-758306a736f2"/>
                                                <a:da name="DEFAULT" type="XPath">
                                                    <a:tst expr="(node:fallback(../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'false')"/>
                                                </a:da>
                                                <a:da name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (node:fallback(., 'false') = 'true') and
                                                            (node:fallback(../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'true')
                                                        )"
                                                           true="CorePLL cannot be enabled if McuNoPll is enabled."/>
                                                </a:da>
                                            </v:var>

                                            <v:var name="McuPllClockSelection" type="ENUMERATION">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            PLL Source Selection - PLLDIG_PLLCLKMUX[REFCLKSEL].  <br />
                                                            Note: Implementation Specific Parameter. <br />
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="LABEL" value="PLL Source Selection"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:9e8a476c-ef94-48e7-a9fa-ffb531badb58"/>
                                                <a:da name="DEFAULT" value="FIRC_CLK"/>
                                                <a:da name="WARNING" type="XPath">
                                                    <a:tst expr="(node:fallback(., 'FXOSC_CLK') = 'FIRC_CLK')"
                                                           true="It is highly recommended to only use FXOSC as this generally provides a more accurate system clock."/>
                                                </a:da>
                                                <a:da name="RANGE">
                                                    <a:v>FIRC_CLK</a:v>
                                                    <a:v>FXOSC_CLK</a:v>
                                                </a:da>
                                                <a:da name="INVALID" type="XPath">
                                                    <a:tst expr="( (node:fallback(., 'FXOSC_CLK') = 'FXOSC_CLK') and
                                                                   (node:fallback(../../../McuFXOSC/McuFxoscPowerDownCtr, 'false') = 'false')
                                                                 )"
                                                           true="If 'FXOSC_CLK' is selected as source clock, FXOSC ('McuFxoscPowerDownCtr') must be enabled."/>
                                                </a:da>
                                            </v:var>

                                            <v:ctr name="McuPll_Configuration" type="IDENTIFIABLE">
                                                <a:a name="UUID" value="ECUC:bb7de1d2-ad18-443a-8dc4-a00f8159db55"/>
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            Configuration values for PLL.  <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>

                                                <v:var name="McuPllDvRdiv" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Input clock predivider. <br />
                                                                Sets the PLL: PLLDIG_PLLDV[RDIV] field register. <br />
                                                                This field controls the value of the divider on the input clock. The output of the predivider circuit generates the reference clock to the PLL analog loop. <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:2b9c1a10-d5d6-407f-8706-bf6b2da7fe3d"/>
                                                    <a:da name="DEFAULT" value="2"/>
                                                    <a:a name="LABEL" value="RDIV"/>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=7"/>
                                                        <a:tst expr="&gt;=1"/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                         num:f(
                                                             num:f( num:i(number(node:fallback(../../McuPllClockSelection,'FIRC_CLK')='FIRC_CLK')) * num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                    num:i(number(node:fallback(../../McuPllClockSelection,'FIRC_CLK')='FXOSC_CLK')) *
                                                                    num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                  ) div
                                                                    num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) )
                                                              ) &gt; num:i(ecu:get('MCU.CorePLL.Limits.ClkIn.High'))
                                                        )
                                                         or
                                                        (
                                                         num:f(
                                                             num:f( num:i(number(node:fallback(../../McuPllClockSelection,'FIRC_CLK')='FIRC_CLK')) * num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                    num:i(number(node:fallback(../../McuPllClockSelection,'FIRC_CLK')='FXOSC_CLK')) *
                                                                    num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                  ) div
                                                                    num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) )
                                                              ) &lt; num:i(ecu:get('MCU.CorePLL.Limits.ClkIn.Low'))
                                                        )
                                                        "
                                                        true="The input frequency for the PLL (ReferenceClockFrequency/Rdiv) must be between 20 MHz and 40 MHz."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllDvMfi" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Loop multiplication factor divider. <br />
                                                                Sets the PLL: PLLDIG_PLLDV[MFI] field register. <br />
                                                                This field controls the value of the divider in the feedback loop. The value specified by the MFD bits
                                                                establishes the multiplication factor applied to the reference frequency. Divider value = MFD, where MFD
                                                                should be choosen such that it does not violate VCO frequency specifications. <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:395e17d0-f6cc-4be8-a528-8cb92aebebf2"/>
                                                    <a:da name="DEFAULT" value="60"/>
                                                    <a:a name="LABEL" value="MFD"/>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=255"/>
                                                        <a:tst expr="&gt;=1"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllFmSscgbyp" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Modulation enable. <br />
                                                                This bit enables spectrum modulation. <br />
                                                                Set the PLL: PLLDIG_PLLFM[SSCGBYP] field. <br />
                                                                0 - Spread spectrum modulation is not bypassed. <br />
                                                                1 - Spread spectrum modulation is bypassed. <br />
                                                                Note: PLLFM[SSCGBYP] must be cleared and PLLFD[SDMEN] must be set for the frequency modulation mechanism to be enabled. <br />
                                                                Note: Frequency Modulation is only possible if PLLDIG_PLLFM[STEPSIZE] * PLLDIG_PLLFM[STEPNO] less than 18432. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:127b4b4d-c94f-44c9-b048-7e06c469f6fa"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:a name="LABEL" value="Spread spectrum modulation bypass"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'true') = 'false') and
                                                                    (node:fallback(../McuPllFdSdmen, 'false') = 'false')
                                                                )"
                                                               true="To enable spread spectrum modulation, please also enable PLLDIG_PLLFD[SDMEN]."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllFmSpreadctl" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Modulation type selection: <br />
                                                                    - Center around nominal frequency. <br />
                                                                    - Spread below nominal frequency. <br />
                                                                Configure the PLLDIG_PLLFM[SPREADCTL] field register. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Spread Selection"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:2dd7a89b-93fe-46ba-9a1b-2c4ed0222aa0"/>
                                                    <a:da name="DEFAULT" value="Center_Spread"/>
                                                    <a:da name="RANGE">
                                                        <a:v>Center_Spread</a:v>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllFmStepSize" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Modulation period. <br />
                                                                Sets the PLL: PLLDIG_PLLFM[STEPSIZE] field register. <br />
                                                                STEPSIZE is the binary equivalent of the modulation period variable. <br />
                                                                It is calculated as: StepSize = [McuPllFdMdp * (McuPllDvMfi + McuPllFdMfn / 18432) * 18432] / (100 * McuPllFmStepNo). <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:2bbe4ea6-bdcb-48fb-b92d-d097d3ebc1f1"/>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        node:when(
                                                            ( ( node:fallback(../McuPllFdFmod, num:f(0)) != num:f(0) ) and ( node:fallback(../McuPllFdMdp, num:f(0)) != num:f(0) ) ),
                                                            num:i(
                                                                round(
                                                                    num:f(
                                                                        num:f( node:fallback(../McuPllFdMdp, num:f(0)) ) *
                                                                        num:f(
                                                                            num:f( node:fallback(../McuPllDvMfi, num:f(65)) ) +
                                                                            num:f(
                                                                                num:f( node:fallback(../McuPllFdMfn, num:f(0)) ) div
                                                                                num:f( 18432 )
                                                                            )
                                                                        ) *
                                                                        num:f( 18432 )
                                                                    ) div
                                                                    num:f(
                                                                        num:f( 100 ) *
                                                                        num:f( node:fallback(../McuPllFmStepNo, num:f(1)) )
                                                                    )
                                                                )
                                                            ),
                                                            num:i(0)
                                                        )"/>
                                                    </a:da>
                                                    <a:a name="LABEL" value="STEPSIZE"/>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=1023"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="( num:i(node:fallback(., 0)) * num:i(node:fallback(../McuPllFmStepNo, 1)) ) &gt; num:i(18432)"
                                                               true="McuPllFmStepSize * McuPllFmStepNo >= 18432. Please lower either StepSize or StepNo."/>
                                                        <a:tst expr="
                                                        (
                                                            not( node:empty( node:fallback(., 0) ) )
                                                            and
                                                            (
                                                                num:i( node:fallback(., 0) ) !=
                                                                (
                                                                    node:when(
                                                                        ( ( node:fallback(../McuPllFdFmod, num:f(0)) != num:f(0) ) and ( node:fallback(../McuPllFdMdp, num:f(0)) != num:f(0) ) ),
                                                                        num:i(
                                                                            round(
                                                                                num:f(
                                                                                    num:f( node:fallback(../McuPllFdMdp, num:f(0)) ) *
                                                                                    num:f(
                                                                                        num:f( node:fallback(../McuPllDvMfi, num:f(65)) ) +
                                                                                        num:f(
                                                                                            num:f( node:fallback(../McuPllFdMfn, num:f(0)) ) div
                                                                                            num:f( 18432 )
                                                                                        )
                                                                                    ) *
                                                                                    num:f( 18432 )
                                                                                ) div
                                                                                num:f(
                                                                                    num:f( 100 ) *
                                                                                    num:f( node:fallback(../McuPllFmStepNo, num:f(1)) )
                                                                                )
                                                                            )
                                                                        ),
                                                                        num:i(0)
                                                                    )
                                                                )
                                                            )
                                                        )"
                                                        true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllFmStepNo" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Increment step. <br />
                                                                Sets the PLL: PLLDIG_PLLFM[STEPNO] field register. <br />
                                                                This field is the binary equivalent of the STEPNO variable. <br />
                                                                It is calculated as: StepNo = McuClockReferencePointFrequency(McuPllClockSelection) / (2 * McuPllFdFmod * McuPllDvRdiv). <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:1dcfd8cf-9c8d-4268-9ed3-1a98df1bc3c6"/>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        node:when(
                                                            ( ( node:fallback(../McuPllFdFmod, num:f(0)) != num:f(0) ) and ( node:fallback(../McuPllFdMdp, num:f(0)) != num:f(0) ) ),
                                                            num:i(
                                                                round(
                                                                    num:f(
                                                                        num:i(number(node:fallback(../../McuPllClockSelection,'FIRC_CLK')='FIRC_CLK')) * num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                        num:i(number(node:fallback(../../McuPllClockSelection,'FIRC_CLK')='FXOSC_CLK')) *
                                                                        num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                    ) div
                                                                    num:f(
                                                                        num:f(2) *
                                                                        num:f(node:fallback(../McuPllFdFmod, num:f(0))) *
                                                                        num:f(node:fallback(../McuPllDvRdiv, num:f(1)))
                                                                    )
                                                                )
                                                            ),
                                                            num:i(1)
                                                        )"/>
                                                    </a:da>
                                                    <a:a name="LABEL" value="STEPNO"/>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=2047"/>
                                                        <a:tst expr="&gt;=1"/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="( num:i(node:fallback(., 1)) * num:i(node:fallback(../McuPllFmStepSize, 0)) ) &gt; num:i(18432)"
                                                               true="McuPllFmStepSize * McuPllFmStepNo >= 18432. Please lower either StepSize or StepNo."/>
                                                        <a:tst expr="
                                                        (
                                                            not( node:empty( node:fallback(., 1) ) )
                                                            and
                                                            (
                                                                num:i( node:fallback(., 1) ) !=
                                                                (
                                                                    node:when(
                                                                        ( ( node:fallback(../McuPllFdFmod, num:f(0)) != num:f(0) ) and ( node:fallback(../McuPllFdMdp, num:f(0)) != num:f(0) ) ),
                                                                        num:i(
                                                                            round(
                                                                                num:f(
                                                                                    num:i(number(node:fallback(../../McuPllClockSelection,'FIRC_CLK')='FIRC_CLK')) * num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                                    num:i(number(node:fallback(../../McuPllClockSelection,'FIRC_CLK')='FXOSC_CLK')) *
                                                                                    num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                                ) div
                                                                                num:f(
                                                                                    num:f(2) *
                                                                                    num:f(node:fallback(../McuPllFdFmod, num:f(0))) *
                                                                                    num:f(node:fallback(../McuPllDvRdiv, num:f(1)))
                                                                                )
                                                                            )
                                                                        ),
                                                                        num:i(1)
                                                                    )
                                                                )
                                                            )
                                                        )"
                                                        true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllFdFmod" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                The modulation frequency. This should be set to the highest frequency component present in the modulating signal. <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Modulation Frequency"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:ce500545-8257-4c4c-8de7-b3c848d675d0"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=64000"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:da>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( ( num:f(node:fallback(., 0)) != num:f(0) ) and ( node:fallback(../McuPllFmSscgbyp, 'true') = 'true' ) )"
                                                               true="Cannot have non-zero FM parameters while PLLDIG_PLLFM[SSCGBYP] = 1.
                                                                     Please disable spread spectrum modulation bypassing (i.e. uncheck 'McuPllFmSscgbyp')"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllFdMdp" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                The modulation depth percentage. This value indicates by how much the modulated variable varies around its unmodulated level. <br />
                                                                It is calculated as the FrequencyDeviation (deviation from the carrier/nominal frequency) divided by the ModulatingSignalFrequency(Fmod). <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Modulation Depth Percentage"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:ce500545-8257-4c4c-8de7-b3c575c362d0"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=3.0"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:da>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( ( num:f(node:fallback(., 0)) != num:f(0) ) and ( node:fallback(../McuPllFmSscgbyp, 'true') = 'true' ) )"
                                                               true="Cannot have non-zero FM parameters while PLLDIG_PLLFM[SSCGBYP] = 1.
                                                                     Please disable spread spectrum modulation bypassing (i.e. uncheck 'McuPllFmSscgbyp')"/>
                                                        <a:tst expr="
                                                        (
                                                            not( node:empty( node:fallback(., 0) ) )
                                                            and
                                                            ( node:fallback(../McuPllFmSscgbyp, 'true') = 'false' )
                                                            and
                                                            ( node:fallback(../McuPllFmSpreadctl, 'Center_Spread') = 'Center_Spread')
                                                            and
                                                            (
                                                                ( num:f( node:fallback(., 0) ) &lt; 0.25 )
                                                                or
                                                                ( num:f( node:fallback(., 0) ) &gt; 1.5 )
                                                            )
                                                        )"
                                                        true="The inserted value exceeds the supported min/max modulation depth limits for center spread modulation."/>
                                                        <a:tst expr="
                                                        (
                                                            not( node:empty( node:fallback(., 0) ) )
                                                            and
                                                            ( node:fallback(../McuPllFmSscgbyp, 'true') = 'false' )
                                                            and
                                                            ( node:fallback(../McuPllFmSpreadctl, 'Center_Spread') = 'Down_Spread')
                                                            and
                                                            (
                                                                ( num:f( node:fallback(., 0) ) &lt; 0.5 )
                                                                or
                                                                ( num:f( node:fallback(., 0) ) &gt; 3.0 )
                                                            )
                                                        )"
                                                        true="The inserted value exceeds the supported min/max modulation depth limits for down spread modulation."/>
                                                        <a:tst expr="
                                                        (
                                                            not( node:empty( node:fallback(., 0) ) )
                                                            and
                                                            ( node:fallback(../McuPllFmSscgbyp, 'true') = 'false' )
                                                            and
                                                            (
                                                                num:f( node:fallback(., 0) ) &gt;
                                                                (
                                                                    num:f( num:i(number(node:fallback(../../McuPllClockSelection,'FIRC_CLK')='FIRC_CLK')) * num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                           num:i(number(node:fallback(../../McuPllClockSelection,'FIRC_CLK')='FXOSC_CLK')) *
                                                                           num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                    ) div
                                                                    num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) ) div
                                                                    num:f( node:fallback(../../McuPll_Parameter/PLL_VCO_Frequency, num:f(ecu:get('MCU.CorePLL.Limits.VCO.High')) ) ) *
                                                                    num:f( 100 )
                                                                )
                                                            )
                                                        )"
                                                        true="The inserted value exceeds the maximum peak-to-peak MDP, which is calculated as ((Fref / McuPllDvRdiv) / PLL_VCO_Frequency) * 100"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllFdEmdp" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                The effective modulation depth percentage. Because of the rounding operations applied to StepSize and StepNo,
                                                                the effective MDP may differ from the intended MDP (i.e. the value of 'McuPllFdMdp'). <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Effective Modulation Depth Percentage"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:ce500545-8257-4c4c-8de7-b5b575c682c3"/>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        node:when(
                                                            ( ( node:fallback(../McuPllFdFmod, num:f(0)) != num:f(0) ) and ( node:fallback(../McuPllFdMdp, num:f(0)) != num:f(0) ) ),
                                                            num:i(
                                                                round(
                                                                    num:f(
                                                                        num:f( node:fallback(../McuPllFmStepSize, num:f(0)) ) *
                                                                        num:f( node:fallback(../McuPllFmStepNo, num:f(1)) ) *
                                                                        num:f( 100 )
                                                                    ) div
                                                                    num:f(
                                                                        num:f( 18432 ) *
                                                                        num:f(
                                                                            num:f( node:fallback(../McuPllDvMfi, num:f(65)) ) +
                                                                            num:f(
                                                                                num:f( node:fallback(../McuPllFdMfn, num:f(0)) ) div
                                                                                num:f( 18432 )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                            ),
                                                            num:i(0)
                                                        )"/>
                                                    </a:da>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=3"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:da>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                        (
                                                            not( node:empty( node:fallback(., 0) ) )
                                                            and
                                                            (
                                                                num:i( node:fallback(., 0) ) !=
                                                                (
                                                                    node:when(
                                                                        ( ( node:fallback(../McuPllFdFmod, num:f(0)) != num:f(0) ) and ( node:fallback(../McuPllFdMdp, num:f(0)) != num:f(0) ) ),
                                                                        num:i(
                                                                            round(
                                                                                num:f(
                                                                                    num:f( node:fallback(../McuPllFmStepSize, num:f(0)) ) *
                                                                                    num:f( node:fallback(../McuPllFmStepNo, num:f(1)) ) *
                                                                                    num:f( 100 )
                                                                                ) div
                                                                                num:f(
                                                                                    num:f( 18432 ) *
                                                                                    num:f(
                                                                                        num:f( node:fallback(../McuPllDvMfi, num:f(65)) ) +
                                                                                        num:f(
                                                                                            num:f( node:fallback(../McuPllFdMfn, num:f(0)) ) div
                                                                                            num:f( 18432 )
                                                                                        )
                                                                                    )
                                                                                )
                                                                            )
                                                                        ),
                                                                        num:i(0)
                                                                    )
                                                                )
                                                            )
                                                        )"
                                                        true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllFdMfn" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Numerator for fractional loop division factor - PLLDIG_PLLFD[MFN]. <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="MFN"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:ce500545-8257-4c4c-8de7-a1b919d675d0"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=32767"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:da>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                                (
                                                                    (num:i(node:fallback(., 0)) != 0) and
                                                                    (node:fallback(../McuPllFdSdmen, 'false') != 'true')
                                                                )"
                                                               true="Fractional loop division factor works only when PLLDIG_PLLFD[SDMEN] is enabled."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllFdSdmen" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Sigma Delta Modulation Enable. <br />
                                                                Set the PLL: PLLDIG_PLLFD[SDMEN] field register. <br />
                                                                0 - Sigma delta modulation disabled. <br />
                                                                1 - Sigma delta modulation enabled. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:7ae1a21a-e1b3-422b-8976-9096d3cc8c1d"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:a name="LABEL" value="Sigma Delta Modulation Enable"/>
                                                </v:var>

                                                <v:var name="McuPllOdiv0_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                PHI0 Divider enable. <br />
                                                                Set the PLL: PLLDIG_PLLODIV0[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PHI0 Divider enable"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:84848bc4-c913-81d8-9a9d-b74b444d76ac"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="(ecu:get('MCU.CorePLL.Terminals.PHI0.Connected') = 'true') or ((ecu:get('MCU.CorePLL.Terminals.PHI0.Connected') = 'false') and (node:fallback(., 'false') = 'true')) "/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'false') = 'true') and (node:fallback(../../McuPLLEnabled, 'false') = 'false') )"
                                                               true="CorePLL must be enabled before enabling PLL_ODIV0."/>
                                                        <a:tst expr="(ecu:get('MCU.CorePLL.Terminals.PHI0.Connected') = 'false') and (node:fallback(., 'false') = 'true')"
                                                               true="This feature is not support on this platform. The value of this node should be set to false"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllOdiv0_Div" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                PHI0 Division value. <br />
                                                                PLLDIG_PLLODIV0[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="PHI0 Division value"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:f4ae5a4f-c1bc-4b1e-be5d-af0ab7e64c80"/>
                                                    <a:da name="DEFAULT" value="1"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuPllOdiv0_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=255"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllOdiv1_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                PHI1 Divider enable. <br />
                                                                Set the PLL: PLLDIG_PLLODIV1[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PHI1 Divider enable"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:84848bc4-c913-81d8-9a9d-b74b888e67db"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="(ecu:get('MCU.CorePLL.Terminals.PHI1.Connected') = 'true') or ((ecu:get('MCU.CorePLL.Terminals.PHI1.Connected') = 'false') and (node:fallback(., 'false') = 'true')) "/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'false') = 'true') and (node:fallback(../../McuPLLEnabled, 'false') = 'false') )"
                                                               true="CorePLL must be enabled before enabling PLL_ODIV1."/>
                                                        <a:tst expr="(ecu:get('MCU.CorePLL.Terminals.PHI1.Connected') = 'false') and (node:fallback(., 'false') = 'true')"
                                                               true="This feature is not support on this platform. The value of this node should be set to false"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllOdiv1_Div" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                PHI1 Division value. <br />
                                                                PLLDIG_PLLODIV1[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="PHI1 Division value"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:f4ae5a4f-c1bc-4b1e-be5d-bf1cb7e47c80"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuPllOdiv1_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=255"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:da>
                                                </v:var>

                                            </v:ctr>

                                            <v:ctr name="McuPll_Parameter" type="IDENTIFIABLE">
                                                <a:a name="UUID" value="ECUC:7a0ad0a6-0dc2-43c3-8b64-4cafd115af5a"/>
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            Calculated values for PLL. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>

                                                <v:var name="PLL_PHI0_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Output value for <strong>CORE_PLL_PHI0_CLK frequency</strong>. <br />
                                                                For S32G2XX, the valid range is [0 ... 1000] MHz. <br />
                                                                For S32R45, the valid range is [0 ... 800] MHz. <br />
                                                                For S32G3XX, the valid range is [0 ... 1311] MHz. <br />
                                                                The valid value is 0 when disabled. <br />
                                                                Note: This field must not be manually modified. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PLL_PHI0 Frequency (Calculated)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:24b24094-5537-49a7-9733-9f25cf0bfd4a"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../../McuPll_Configuration/McuPllOdiv0_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                             num:f(number(node:fallback(../../McuPll_Configuration/McuPllOdiv0_En,'false')='true')) *
                                                             (
                                                                 num:f( num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FIRC_CLK')) * num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                        num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FXOSC_CLK')) *
                                                                        num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                      ) *
                                                                num:f(
                                                                    num:f(
                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvMfi, num:f(65) ) ) +
                                                                        num:f(
                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllFdMfn, num:f(0) ) ) div
                                                                            num:f( 18432 )
                                                                        )
                                                                    ) div
                                                                    num:f(
                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) ) *
                                                                        (node:when(
                                                                                   node:fallback(../../McuPll_Configuration/McuPllOdiv0_En,'false') = 'true',
                                                                                   node:fallback(../../McuPll_Configuration/McuPllOdiv0_Div,num:i(19)),
                                                                                   num:i(0)
                                                                                  ) + num:f(1))
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                        "/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.CorePLL.Limits.PHI0.High')"/>
                                                        <a:tst expr="&gt;=(ecu:get('MCU.CorePLL.Limits.PHI0.Low') * num:f(number(node:fallback(../../McuPll_Configuration/McuPllOdiv0_En,'false')='true')))"/>
                                                    </a:a>
                                                    <a:da name="RANGE" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (
                                                                (node:fallback(../../McuPll_Configuration/McuPllOdiv0_En,'false')='true') or
                                                                (num:f(node:fallback(., 0)) != 0)
                                                            )
                                                            and
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 1000000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 1000000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(number(node:fallback(../../McuPll_Configuration/McuPllOdiv0_En,'false')='true')) *
                                                                                (
                                                                                     num:f( num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FIRC_CLK')) * num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                                            num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FXOSC_CLK')) *
                                                                                            num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                                          ) *
                                                                                    num:f(
                                                                                        num:f(
                                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllDvMfi, num:f(65) ) ) +
                                                                                            num:f(
                                                                                                num:f( node:fallback(../../McuPll_Configuration/McuPllFdMfn, num:f(0) ) ) div
                                                                                                num:f( 18432 )
                                                                                            )
                                                                                        ) div
                                                                                        num:f(
                                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) ) *
                                                                                            (node:when(
                                                                                                       node:fallback(../../McuPll_Configuration/McuPllOdiv0_En,'false') = 'true',
                                                                                                       node:fallback(../../McuPll_Configuration/McuPllOdiv0_Div,num:i(19)),
                                                                                                       num:i(0)
                                                                                                      ) + num:f(1))
                                                                                            )
                                                                                        )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:when(
                                                                        ( node:fallback(../../McuPll_Configuration/McuPllFmSscgbyp, 'true') = 'false' )
                                                                        and
                                                                        ( node:fallback(../../McuPll_Configuration/McuPllFmSpreadctl, 'Center_Spread') = 'Center_Spread' ),
                                                                        num:f( node:fallback(., 1000000000 ) ) * (num:f(1) + num:f(node:fallback(../../McuPll_Configuration/McuPllFdMdp, 0)) div num:f(200)),
                                                                        num:f( node:fallback(., 1000000000 ) )
                                                                    ) &gt; num:i(ecu:get('MCU.CorePLL.Limits.PHI0.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:when(
                                                                        ( node:fallback(../../McuPll_Configuration/McuPllFmSscgbyp, 'true') = 'false' )
                                                                        and
                                                                        ( node:fallback(../../McuPll_Configuration/McuPllFmSpreadctl, 'Center_Spread') = 'Down_Spread' ),
                                                                        num:f( node:fallback(., 20600000 ) ) * (num:f(1) - ( num:f(2) * num:f(node:fallback(../../McuPll_Configuration/McuPllFdEmdp, 0)) ) div num:f(100)),
                                                                        num:f( node:fallback(., 20600000 ) )
                                                                    ) &lt; num:i(ecu:get('MCU.CorePLL.Limits.PHI0.Low'))
                                                                )
                                                            )
                                                        )
                                                        "
                                                        true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="PLL_PHI1_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Output value for <strong>CORE_PLL_PHI1_CLK frequency</strong>. <br />
                                                                The valid range is [2.54 ... 400] MHz, the valid value is 0 when disabled. <br />
                                                                Note: This field must not be manually modified. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PLL_PHI1 Frequency (Calculated)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:24b24094-5537-49a7-9733-9d52fc0dfb5a"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../../McuPll_Configuration/McuPllOdiv1_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                             num:f(number(node:fallback(../../McuPll_Configuration/McuPllOdiv1_En,'false')='true')) *
                                                             (
                                                                 num:f( num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FIRC_CLK')) * num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                        num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FXOSC_CLK')) *
                                                                        num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                      ) *
                                                                num:f(
                                                                    num:f(
                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvMfi, num:f(65) ) ) +
                                                                        num:f(
                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllFdMfn, num:f(0) ) ) div
                                                                            num:f( 18432 )
                                                                        )
                                                                    ) div
                                                                    num:f(
                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) ) *
                                                                        (node:when(
                                                                                   node:fallback(../../McuPll_Configuration/McuPllOdiv1_En,'false') = 'true',
                                                                                   node:fallback(../../McuPll_Configuration/McuPllOdiv1_Div,num:i(19)),
                                                                                   num:i(0)
                                                                                  ) + num:f(1))
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                        "/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.CorePLL.Limits.PHI1.High')"/>
                                                        <a:tst expr="&gt;=(ecu:get('MCU.CorePLL.Limits.PHI1.Low') * num:f(number(node:fallback(../../McuPll_Configuration/McuPllOdiv1_En,'false')='true')))"/>
                                                    </a:a>
                                                    <a:da name="RANGE" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (
                                                                (node:fallback(../../McuPll_Configuration/McuPllOdiv1_En,'false')='true') or
                                                                (num:f(node:fallback(., 0)) != 0)
                                                            )
                                                            and
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 500000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 500000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                 num:f(number(node:fallback(../../McuPll_Configuration/McuPllOdiv1_En,'false')='true')) *
                                                                                 (
                                                                                     num:f( num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FIRC_CLK')) * num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                                            num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FXOSC_CLK')) *
                                                                                            num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                                          ) *
                                                                                    num:f(
                                                                                        num:f(
                                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllDvMfi, num:f(65) ) ) +
                                                                                            num:f(
                                                                                                num:f( node:fallback(../../McuPll_Configuration/McuPllFdMfn, num:f(0) ) ) div
                                                                                                num:f( 18432 )
                                                                                            )
                                                                                        ) div
                                                                                        num:f(
                                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) ) *
                                                                                            (node:when(
                                                                                                       node:fallback(../../McuPll_Configuration/McuPllOdiv1_En,'false') = 'true',
                                                                                                       node:fallback(../../McuPll_Configuration/McuPllOdiv1_Div,num:i(19)),
                                                                                                       num:i(0)
                                                                                                      ) + num:f(1))
                                                                                            )
                                                                                        )
                                                                                    )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:when(
                                                                        ( node:fallback(../../McuPll_Configuration/McuPllFmSscgbyp, 'true') = 'false' )
                                                                        and
                                                                        ( node:fallback(../../McuPll_Configuration/McuPllFmSpreadctl, 'Center_Spread') = 'Center_Spread' ),
                                                                        num:f( node:fallback(., 500000000 ) ) * (num:f(1) + num:f(node:fallback(../../McuPll_Configuration/McuPllFdMdp, 0)) div num:f(200)),
                                                                        num:f( node:fallback(., 500000000 ) )
                                                                    ) &gt; num:i(ecu:get('MCU.CorePLL.Limits.PHI1.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:when(
                                                                        ( node:fallback(../../McuPll_Configuration/McuPllFmSscgbyp, 'true') = 'false' )
                                                                        and
                                                                        ( node:fallback(../../McuPll_Configuration/McuPllFmSpreadctl, 'Center_Spread') = 'Down_Spread' ),
                                                                        num:f( node:fallback(., 20600000 ) ) * (num:f(1) - ( num:f(2) * num:f(node:fallback(../../McuPll_Configuration/McuPllFdEmdp, 0)) ) div num:f(100)),
                                                                        num:f( node:fallback(., 20600000 ) )
                                                                    ) &lt; num:i(ecu:get('MCU.CorePLL.Limits.PHI1.Low'))
                                                                )
                                                            )
                                                        )
                                                        "
                                                        true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="PLL_VCO_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Output value for <strong>CORE_VCO frequency</strong>. <br />
                                                                For S32G2XX, the valid range is [1300 ... 2000] MHz. <br />
                                                                For S32R45, the valid range is [1300 ... 1600] MHz. <br />
                                                                For S32G3XX, the valid range is [1300 ... 2622] MHz. <br />
                                                                The valid value is 0 when disabled. <br />
                                                                Note: This field must not be manually modified. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PLL_VCO Frequency (Calculated)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:3d15f604-8bbb-4c35-b0ce-e102cb54f572"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../../McuPLLEnabled, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                            num:f(
                                                                num:f(number(node:fallback(../../McuPLLEnabled, 'false') = 'true')) *
                                                                (
                                                                    num:f(
                                                                        num:f( num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FIRC_CLK')) * num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                               num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FXOSC_CLK')) *
                                                                               num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                             ) div
                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) )
                                                                    ) *
                                                                    num:f(
                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvMfi, num:f(65) ) ) +
                                                                        num:f(
                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllFdMfn, num:f(0) ) ) div
                                                                            num:f(18432)
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                        "/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.CorePLL.Limits.VCO.High')"/>
                                                        <a:tst expr="&gt;=(ecu:get('MCU.CorePLL.Limits.VCO.Low') * num:f(number(node:fallback(../../McuPLLEnabled, 'false') = 'true')))"/>
                                                    </a:a>
                                                    <a:da name="RANGE" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (
                                                                (node:fallback(../../McuPLLEnabled,'false') = 'true') or
                                                                (num:f(node:fallback(., 0)) != 0)
                                                            )
                                                            and
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 2000000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 2000000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(number(node:fallback(../../McuPLLEnabled, 'false') = 'true')) *
                                                                                (
                                                                                    num:f(
                                                                                        num:f( num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FIRC_CLK')) * num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                                               num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FXOSC_CLK')) *
                                                                                               num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                                             ) div
                                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) )
                                                                                    ) *
                                                                                    num:f(
                                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvMfi, num:f(65) ) ) +
                                                                                        num:f(
                                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllFdMfn, num:f(0) ) ) div
                                                                                            num:f(18432)
                                                                                        )
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:when(
                                                                        ( node:fallback(../../McuPll_Configuration/McuPllFmSscgbyp, 'true') = 'false' )
                                                                        and
                                                                        ( node:fallback(../../McuPll_Configuration/McuPllFmSpreadctl, 'Center_Spread') = 'Center_Spread' ),
                                                                        node:fallback(., num:i(2000000000) ) * (num:f(1) + num:f(node:fallback(../../McuPll_Configuration/McuPllFdMdp, 0)) div num:f(200)),
                                                                        node:fallback(., num:i(2000000000) )
                                                                    ) &gt; num:i(ecu:get('MCU.CorePLL.Limits.VCO.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:when(
                                                                        ( node:fallback(../../McuPll_Configuration/McuPllFmSscgbyp, 'true') = 'false' )
                                                                        and
                                                                        ( node:fallback(../../McuPll_Configuration/McuPllFmSpreadctl, 'Center_Spread') = 'Down_Spread' ),
                                                                        num:f( node:fallback(., 1300000000 ) ) * (num:f(1) - ( num:f(2) * num:f(node:fallback(../../McuPll_Configuration/McuPllFdEmdp, 0)) ) div num:f(100)),
                                                                        num:f( node:fallback(., 1300000000 ) )
                                                                    ) &lt; num:i(ecu:get('MCU.CorePLL.Limits.VCO.Low'))
                                                                )
                                                            )
                                                        )
                                                        "
                                                        true="Please press the button to calculate the value automatically."/>
                                                    <a:tst expr="
                                                        (
                                                            (node:fallback(../../McuPLLEnabled,'false')='false') and
                                                            (num:f(node:fallback(., 0)) != 0)
                                                        )"
                                                        true="Please enable CorePLL ('McuPLLEnabled') before calculating the frequency."/>
                                                    </a:da>
                                                </v:var>
                                            </v:ctr>
                                        </v:ctr>

                                        <v:ctr name="McuCoreDfs" type="IDENTIFIABLE">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        This container provides the specific configuration for the CORE DFS.
                                                        Note: Implementation Specific Container.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="TAB" value="McuCoreDFS"/>
                                            <a:a name="UUID" value="ECUC:bfa6250f-717b-4911-a690-6cb59e8da247"/>

                                            <v:ctr name="McuDfs_1" type="IDENTIFIABLE">
                                                <a:a name="UUID" value="ECUC:2a783fae-238a-4382-9124-d57c31d081b3"/>
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            Configuration values for DFS_1.  <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>

                                                <v:var name="McuDFSUnderMcuControl" type="BOOLEAN">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            Set this to TRUE if this DFS is under mcu control <br />
                                                            If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                            The user must still set the values - they are used by the clock reference points  <br />
                                                            Note: Implementation Specific Parameter. <br />
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="LABEL" value="CORE DFS1 under MCU control"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:1be167fc-e06b-4db8-a8d7-8750378b24b1"/>
                                                <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="(ecu:get('MCU.CoreDFS.Terminals.DFS1.Connected') = 'true') or ((ecu:get('MCU.CoreDFS.Terminals.DFS1.Connected') = 'false') and (node:fallback(., 'false') = 'true')) "/>
                                                </a:a>
                                                <a:da name="DEFAULT" type="XPath">
                                                    <a:tst expr="(node:fallback(../../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'false') and (ecu:get('MCU.CoreDFS.Terminals.DFS1.Connected') = 'true')"/>
                                                </a:da>
                                                <a:da name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (node:fallback(., 'false') = 'true') and
                                                            (node:fallback(../../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'true')
                                                        )"
                                                           true="CoreDFS cannot be under MCU control if McuNoPll is enabled."/>
                                                    <a:tst expr="
                                                        (
                                                            ( node:fallback(., 'false') = 'true' ) and
                                                            ( node:fallback(as:modconf('Mcu')[1]/McuGeneralConfiguration/McuControlledClocksConfiguration/McuDfs0UnderMcuControl, 'false') = 'false' )
                                                        )"
                                                        true="The field McuGeneralConfiguration/McuControlledClocksConfiguration/McuDfs0UnderMcuControl must be set to 'true' when CORE DFS1 is under MCU control."/>
                                                </a:da>
                                                </v:var>

                                                <v:var name="McuDFSPort_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                DFS1 Output Port Enable. <br />
                                                                This field specifies whether MCU will control the configuration and functionality of CORE_DFS1_CLK inside the driver. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="DFS1 Output Port Enable"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:84848bc4-c913-81d8-9a9d-b74b555c6732"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="(ecu:get('MCU.CoreDFS.Terminals.DFS1.Connected') = 'true') or ((ecu:get('MCU.CoreDFS.Terminals.DFS1.Connected') = 'false') and (node:fallback(., 'false') = 'true')) "/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'true')
                                                            )"
                                                            true="CoreDFS cannot be enabled if McuNoPll is enabled."/>
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../../../McuPll_0/McuPLLEnabled, 'false') = 'false')
                                                            )"
                                                            true="CoreDFS cannot be enabled if CorePLL is disabled."/>
                                                        <a:tst expr="( (ecu:get('MCU.CoreDFS.Terminals.DFS1.Connected') = 'false') and (node:fallback(., 'false') = 'true'))"
                                                            true="This feature is not support on this platform. The value of this node should be set to false."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuDFSPortMfi" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This field provides the integer part of division factor for port<italic>n</italic>. - DFS_DVPORT0[MFI]. <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="DFS1 MFI"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:3c5df198-8e41-497f-ac8f-0165201a8a69"/>
                                                    <a:da name="DEFAULT" value="1"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuDFSPort_En, 'false') = 'true'"/>
                                                    </a:a>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=255"/>
                                                        <a:tst expr="&gt;=1"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuDFSPortMfn" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This field provides the fractional part of division factor for port<italic>n</italic>. - DFS_DVPORT0[MFN]. <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="DFS1 MFN"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:3a4afd8a-8efe-4d46-872e-3c5d1bcadafd"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuDFSPort_En, 'false') = 'true'"/>
                                                    </a:a>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=35"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="DFS_CLK_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Output value for <strong>CORE_DFS1_CLK frequency</strong>. <br />
                                                                The valid range is [40 ... 800] MHz, the valid value is 0 when disabled. <br />
                                                                Note: This field must not be manually modified. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="DFS1_CLK Frequency (Calculated)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:cc5ec348-9a9e-4233-90ec-a8ea5b278b90"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuDFSPort_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(number(node:fallback(../McuDFSPort_En,'false')='true')) *
                                                            (
                                                                num:f( node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_VCO_Frequency, num:f(1300000000) ) ) div
                                                                num:f( num:f(2) *
                                                                    num:f(
                                                                        num:f( node:fallback(../McuDFSPortMfi, num:f(5) ) ) +
                                                                        num:f(
                                                                            num:f( node:fallback(../McuDFSPortMfn, num:f(0) ) ) div
                                                                            num:f(36)
                                                                             )
                                                                         )
                                                                     )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.CoreDFS.Limits.DFS1.High')"/>
                                                        <a:tst expr="&gt;=(ecu:get('MCU.CoreDFS.Limits.DFS1.Low') * num:f(number(node:fallback(../McuDFSPort_En,'false')='true')))"/>
                                                    </a:a>
                                                    <a:da name="RANGE" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (
                                                                (node:fallback(../McuDFSPort_En,'false')='true') or
                                                                (num:f(node:fallback(., 0)) != 0)
                                                            )
                                                            and
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 80000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 80000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(number(node:fallback(../McuDFSPort_En,'false')='true')) *
                                                                                (
                                                                                    num:f( node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_VCO_Frequency, num:f(1300000000) ) ) div
                                                                                    num:f( num:f(2) *
                                                                                        num:f(
                                                                                            num:f( node:fallback(../McuDFSPortMfi, num:f(5) ) ) +
                                                                                            num:f(
                                                                                                num:f( node:fallback(../McuDFSPortMfn, num:f(0) ) ) div
                                                                                                num:f(36)
                                                                                                 )
                                                                                             )
                                                                                         )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(80000000) ) &gt; num:i(ecu:get('MCU.CoreDFS.Limits.DFS1.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(80000000) ) &lt; num:i(ecu:get('MCU.CoreDFS.Limits.DFS1.Low'))
                                                                )
                                                            )
                                                        )
                                                        "
                                                        true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    </v:var>
                                            </v:ctr>

                                            <v:ctr name="McuDfs_2" type="IDENTIFIABLE">
                                                <a:a name="UUID" value="ECUC:2a783fae-238a-4382-9124-d57c31d081b9"/>
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            Configuration values for DFS_2.  <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>

                                                <v:var name="McuDFSUnderMcuControl" type="BOOLEAN">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            Set this to TRUE if this DFS is under mcu control <br />
                                                            If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                            The user must still set the values - they are used by the clock reference points  <br />
                                                            Note: Implementation Specific Parameter. <br />
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="LABEL" value="CORE DFS2 under MCU control"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:1be167fc-e06b-4db8-a8d7-8750378b24b0"/>
                                                <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="(ecu:get('MCU.CoreDFS.Terminals.DFS2.Connected') = 'true') or ((ecu:get('MCU.CoreDFS.Terminals.DFS2.Connected') = 'false') and (node:fallback(., 'false') = 'true')) "/>
                                                </a:a>
                                                <a:da name="DEFAULT" type="XPath">
                                                    <a:tst expr="(node:fallback(../../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'false') and (ecu:get('MCU.CoreDFS.Terminals.DFS2.Connected') = 'true')"/>
                                                </a:da>
                                                <a:da name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (node:fallback(., 'false') = 'true') and
                                                            (node:fallback(../../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'true')
                                                        )"
                                                           true="CoreDFS2 cannot be under MCU control if McuNoPll is enabled."/>
                                                    <a:tst expr="
                                                        (
                                                            ( node:fallback(., 'false') = 'true' ) and
                                                            ( node:fallback(as:modconf('Mcu')[1]/McuGeneralConfiguration/McuControlledClocksConfiguration/McuDfs0UnderMcuControl, 'false') = 'false' )
                                                        )"
                                                        true="The field McuGeneralConfiguration/McuControlledClocksConfiguration/McuDfs0UnderMcuControl must be set to 'true' when CORE DFS2 is under MCU control."/>
                                                </a:da>
                                                </v:var>

                                                <v:var name="McuDFSPort_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                DFS2 Output Port Enable. <br />
                                                                This field specifies whether MCU will control the configuration and functionality of CORE_DFS2_CLK inside the driver. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="DFS2 Output Port Enable"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:84848bc4-c913-81d8-9a9d-b74b555c6722"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="(ecu:get('MCU.CoreDFS.Terminals.DFS2.Connected') = 'true') or ((ecu:get('MCU.CoreDFS.Terminals.DFS2.Connected') = 'false') and (node:fallback(., 'false') = 'true')) "/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'true')
                                                            )"
                                                            true="CoreDFS cannot be enabled if McuNoPll is enabled."/>
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../../../McuPll_0/McuPLLEnabled, 'false') = 'false')
                                                            )"
                                                            true="CoreDFS cannot be enabled if CorePLL is disabled."/>
                                                        <a:tst expr="( (ecu:get('MCU.CoreDFS.Terminals.DFS2.Connected') = 'false') and (node:fallback(., 'false') = 'true'))"
                                                            true="This feature is not support on this platform. The value of this node should be set to false."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuDFSPortMfi" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This field provides the integer part of division factor for port<italic>n</italic>. - DFS_DVPORT1[MFI]. <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="DFS2 MFI"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:3c5df198-8e41-497f-ac8f-0165201a8a70"/>
                                                    <a:da name="DEFAULT" value="1"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuDFSPort_En, 'false') = 'true'"/>
                                                    </a:a>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=255"/>
                                                        <a:tst expr="&gt;=1"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuDFSPortMfn" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This field provides the fractional part of division factor for port<italic>n</italic>. - DFS_DVPORT1[MFN]. <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="DFS2 MFN"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:3a4afd8a-8efe-4d46-872e-3c5d1bcadaad"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuDFSPort_En, 'false') = 'true'"/>
                                                    </a:a>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=35"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="DFS_CLK_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Output value for <strong>CORE_DFS2_CLK frequency</strong>. <br />
                                                                The valid range is [40 ... 800] MHz, the valid value is 0 when disabled. <br />
                                                                Note: This field must not be manually modified. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="DFS2_CLK Frequency (Calculated)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:cc5ec348-9a9e-4233-90ec-a8ea5b278b99"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuDFSPort_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(number(node:fallback(../McuDFSPort_En,'false')='true')) *
                                                            (
                                                                num:f( node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_VCO_Frequency, num:f(1300000000) ) ) div
                                                                num:f( num:f(2) *
                                                                    num:f(
                                                                        num:f( node:fallback(../McuDFSPortMfi, num:f(5) ) ) +
                                                                        num:f(
                                                                            num:f( node:fallback(../McuDFSPortMfn, num:f(0) ) ) div
                                                                            num:f(36)
                                                                             )
                                                                         )
                                                                     )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.CoreDFS.Limits.DFS2.High')"/>
                                                        <a:tst expr="&gt;=(ecu:get('MCU.CoreDFS.Limits.DFS2.Low') * num:f(number(node:fallback(../McuDFSPort_En,'false')='true')))"/>
                                                    </a:a>
                                                    <a:da name="RANGE" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (
                                                                (node:fallback(../McuDFSPort_En,'false')='true') or
                                                                (num:f(node:fallback(., 0)) != 0)
                                                            )
                                                            and
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 80000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 80000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(number(node:fallback(../McuDFSPort_En,'false')='true')) *
                                                                                (
                                                                                    num:f( node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_VCO_Frequency, num:f(1300000000) ) ) div
                                                                                    num:f( num:f(2) *
                                                                                        num:f(
                                                                                            num:f( node:fallback(../McuDFSPortMfi, num:f(5) ) ) +
                                                                                            num:f(
                                                                                                num:f( node:fallback(../McuDFSPortMfn, num:f(0) ) ) div
                                                                                                num:f(36)
                                                                                                 )
                                                                                             )
                                                                                         )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(80000000) ) &gt; num:i(ecu:get('MCU.CoreDFS.Limits.DFS2.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(80000000) ) &lt; num:i(ecu:get('MCU.CoreDFS.Limits.DFS2.Low'))
                                                                )
                                                            )
                                                        )
                                                        "
                                                        true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                </v:var>
                                            </v:ctr>

                                            <v:ctr name="McuDfs_3" type="IDENTIFIABLE">
                                                <a:a name="UUID" value="ECUC:2a783fae-238a-4382-9124-d57c31d0913b"/>
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            Configuration values for DFS_3.  <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>

                                                <v:var name="McuDFSUnderMcuControl" type="BOOLEAN">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            Set this to TRUE if this DFS is under mcu control <br />
                                                            If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                            The user must still set the values - they are used by the clock reference points  <br />
                                                            Note: Implementation Specific Parameter. <br />
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="LABEL" value="CORE DFS3 under MCU control"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:1be167fc-e06b-4db8-a8d7-8750378b110b"/>
                                                <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="(ecu:get('MCU.CoreDFS.Terminals.DFS3.Connected') = 'true') or ((ecu:get('MCU.CoreDFS.Terminals.DFS3.Connected') = 'false') and (node:fallback(., 'false') = 'true')) "/>
                                                </a:a>
                                                <a:da name="DEFAULT" type="XPath">
                                                    <a:tst expr="(node:fallback(../../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'false') and (ecu:get('MCU.CoreDFS.Terminals.DFS3.Connected') = 'true')"/>
                                                </a:da>
                                                <a:da name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (node:fallback(., 'false') = 'true') and
                                                            (node:fallback(../../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'true')
                                                        )"
                                                           true="CoreDFS cannot be under MCU control if McuNoPll is enabled."/>
                                                    <a:tst expr="
                                                        (
                                                            ( node:fallback(., 'false') = 'true' ) and
                                                            ( node:fallback(as:modconf('Mcu')[1]/McuGeneralConfiguration/McuControlledClocksConfiguration/McuDfs0UnderMcuControl, 'false') = 'false' )
                                                        )"
                                                        true="The field McuGeneralConfiguration/McuControlledClocksConfiguration/McuDfs0UnderMcuControl must be set to 'true' when CORE DFS3 is under MCU control."/>
                                                </a:da>
                                                </v:var>

                                                <v:var name="McuDFSPort_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                DFS3 Output Port Enable. <br />
                                                                This field specifies whether MCU will control the configuration and functionality of CORE_DFS3_CLK inside the driver. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="DFS3 Output Port Enable"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:84848bc4-c913-81d8-9a9d-b74b555c2316"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="(ecu:get('MCU.CoreDFS.Terminals.DFS3.Connected') = 'true') or ((ecu:get('MCU.CoreDFS.Terminals.DFS3.Connected') = 'false') and (node:fallback(., 'false') = 'true')) "/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'true')
                                                            )"
                                                            true="CoreDFS cannot be enabled if McuNoPll is enabled."/>
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../../../McuPll_0/McuPLLEnabled, 'false') = 'false')
                                                            )"
                                                            true="CoreDFS cannot be enabled if CorePLL is disabled."/>
                                                        <a:tst expr="( (ecu:get('MCU.CoreDFS.Terminals.DFS3.Connected') = 'false') and (node:fallback(., 'false') = 'true'))"
                                                            true="This feature is not support on this platform. The value of this node should be set to false."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuDFSPortMfi" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This field provides the integer part of division factor for port<italic>n</italic>. - DFS_DVPORT2[MFI]. <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="DFS3 MFI"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:3c5df198-8e41-497f-ac8f-0165201a89a3"/>
                                                    <a:da name="DEFAULT" value="1"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuDFSPort_En, 'false') = 'true'"/>
                                                    </a:a>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=255"/>
                                                        <a:tst expr="&gt;=1"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuDFSPortMfn" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This field provides the fractional part of division factor for port<italic>n</italic>. - DFS_DVPORT2[MFN]. <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="DFS3 MFN"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:3a4afd8a-8efe-4d46-872e-3c5d1bca12da"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuDFSPort_En, 'false') = 'true'"/>
                                                    </a:a>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=35"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="DFS_CLK_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Output value for <strong>CORE_DFS3_CLK frequency</strong>. <br />
                                                                The valid range is [40 ... 500] MHz, the valid value is 0 when disabled. <br />
                                                                Note: This field must not be manually modified. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="DFS3_CLK Frequency (Calculated)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:cc5ec348-9a9e-4233-90ec-a8ea5b2742ca"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuDFSPort_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(number(node:fallback(../McuDFSPort_En,'false')='true')) *
                                                            (
                                                                num:f( node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_VCO_Frequency, num:f(1300000000) ) ) div
                                                                num:f( num:f(2) *
                                                                    num:f(
                                                                        num:f( node:fallback(../McuDFSPortMfi, num:f(5) ) ) +
                                                                        num:f(
                                                                            num:f( node:fallback(../McuDFSPortMfn, num:f(0) ) ) div
                                                                            num:f(36)
                                                                             )
                                                                         )
                                                                     )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.CoreDFS.Limits.DFS3.High')"/>
                                                        <a:tst expr="&gt;=(ecu:get('MCU.CoreDFS.Limits.DFS3.Low') * num:f(number(node:fallback(../McuDFSPort_En,'false')='true')))"/>
                                                    </a:a>
                                                    <a:da name="RANGE" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (
                                                                (node:fallback(../McuDFSPort_En,'false')='true') or
                                                                (num:f(node:fallback(., 0)) != 0)
                                                            )
                                                            and
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 80000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 80000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(number(node:fallback(../McuDFSPort_En,'false')='true')) *
                                                                                (
                                                                                    num:f( node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_VCO_Frequency, num:f(1300000000) ) ) div
                                                                                    num:f( num:f(2) *
                                                                                        num:f(
                                                                                            num:f( node:fallback(../McuDFSPortMfi, num:f(5) ) ) +
                                                                                            num:f(
                                                                                                num:f( node:fallback(../McuDFSPortMfn, num:f(0) ) ) div
                                                                                                num:f(36)
                                                                                                 )
                                                                                             )
                                                                                         )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(80000000) ) &gt; num:i(ecu:get('MCU.CoreDFS.Limits.DFS3.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(80000000) ) &lt; num:i(ecu:get('MCU.CoreDFS.Limits.DFS3.Low'))
                                                                )
                                                            )
                                                        )
                                                        "
                                                        true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                </v:var>
                                            </v:ctr>

                                            <v:ctr name="McuDfs_4" type="IDENTIFIABLE">
                                                <a:a name="UUID" value="ECUC:2a783fae-238a-4382-9124-d57c31d0293b"/>
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            Configuration values for DFS_4.  <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>

                                                <v:var name="McuDFSUnderMcuControl" type="BOOLEAN">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            Set this to TRUE if this DFS is under mcu control <br />
                                                            If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                            The user must still set the values - they are used by the clock reference points  <br />
                                                            Note: Implementation Specific Parameter. <br />
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="LABEL" value="CORE DFS4 under MCU control"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:1be167fc-e06b-4db8-a8d7-8750378b220b"/>
                                                <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="(ecu:get('MCU.CoreDFS.Terminals.DFS4.Connected') = 'true') or ((ecu:get('MCU.CoreDFS.Terminals.DFS4.Connected') = 'false') and (node:fallback(., 'false') = 'true')) "/>
                                                </a:a>
                                                <a:da name="DEFAULT" type="XPath">
                                                    <a:tst expr="(node:fallback(../../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'false') and (ecu:get('MCU.CoreDFS.Terminals.DFS4.Connected') = 'true')"/>
                                                </a:da>
                                                <a:da name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (node:fallback(., 'false') = 'true') and
                                                            (node:fallback(../../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'true')
                                                        )"
                                                           true="CoreDFS cannot be under MCU control if McuNoPll is enabled."/>
                                                    <a:tst expr="
                                                        (
                                                            ( node:fallback(., 'false') = 'true' ) and
                                                            ( node:fallback(as:modconf('Mcu')[1]/McuGeneralConfiguration/McuControlledClocksConfiguration/McuDfs0UnderMcuControl, 'false') = 'false' )
                                                        )"
                                                        true="The field McuGeneralConfiguration/McuControlledClocksConfiguration/McuDfs0UnderMcuControl must be set to 'true' when CORE DFS4 is under MCU control."/>
                                                </a:da>
                                                </v:var>

                                                <v:var name="McuDFSPort_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                DFS4 Output Port Enable. <br />
                                                                This field specifies whether MCU will control the configuration and functionality of CORE_DFS4_CLK inside the driver. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="DFS4 Output Port Enable"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:84848bc4-c913-81d8-9a9d-b74b555c1263"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="(ecu:get('MCU.CoreDFS.Terminals.DFS4.Connected') = 'true') or ((ecu:get('MCU.CoreDFS.Terminals.DFS4.Connected') = 'false') and (node:fallback(., 'false') = 'true')) "/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'true')
                                                            )"
                                                            true="CoreDFS cannot be enabled if McuNoPll is enabled."/>
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../../../McuPll_0/McuPLLEnabled, 'false') = 'false')
                                                            )"
                                                            true="CoreDFS cannot be enabled if CorePLL is disabled."/>
                                                        <a:tst expr="( (ecu:get('MCU.CoreDFS.Terminals.DFS4.Connected') = 'false') and (node:fallback(., 'false') = 'true'))"
                                                            true="This feature is not support on this platform. The value of this node should be set to false."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuDFSPortMfi" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This field provides the integer part of division factor for port<italic>n</italic>. - DFS_DVPORT3[MFI]. <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="DFS4 MFI"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:3a4afd8a-8efe-4d46-e256-3c5d1bcaad12"/>
                                                    <a:da name="DEFAULT" value="1"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuDFSPort_En, 'false') = 'true'"/>
                                                    </a:a>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=255"/>
                                                        <a:tst expr="&gt;=1"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuDFSPortMfn" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This field provides the fractional part of division factor for port<italic>n</italic>. - DFS_DVPORT3[MFN]. <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="DFS4 MFN"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:3a4afd8a-8efe-4d46-872e-3c5d1bcaad12"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuDFSPort_En, 'false') = 'true'"/>
                                                    </a:a>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=35"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="DFS_CLK_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Output value for <strong>CORE_DFS4_CLK frequency</strong>. <br />
                                                                For S32R45, the valid range is [40 ... 400] MHz, the valid value is 0 when disabled. <br />
                                                                Note: This field must not be manually modified. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="DFS4_CLK Frequency (Calculated)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:cc5ec348-9a9e-4233-90ec-a8ea5b27ac42"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuDFSPort_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(number(node:fallback(../McuDFSPort_En,'false')='true')) *
                                                            (
                                                                num:f( node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_VCO_Frequency, num:f(1300000000) ) ) div
                                                                num:f( num:f(2) *
                                                                    num:f(
                                                                        num:f( node:fallback(../McuDFSPortMfi, num:f(5) ) ) +
                                                                        num:f(
                                                                            num:f( node:fallback(../McuDFSPortMfn, num:f(0) ) ) div
                                                                            num:f(36)
                                                                             )
                                                                         )
                                                                     )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.CoreDFS.Limits.DFS4.High')"/>
                                                        <a:tst expr="&gt;=(ecu:get('MCU.CoreDFS.Limits.DFS4.Low') * num:f(number(node:fallback(../McuDFSPort_En,'false')='true')))"/>
                                                    </a:a>
                                                    <a:da name="RANGE" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (
                                                                (node:fallback(../McuDFSPort_En,'false')='true') or
                                                                (num:f(node:fallback(., 0)) != 0)
                                                            )
                                                            and
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 80000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 80000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(number(node:fallback(../McuDFSPort_En,'false')='true')) *
                                                                                (
                                                                                    num:f( node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_VCO_Frequency, num:f(1300000000) ) ) div
                                                                                    num:f( num:f(2) *
                                                                                        num:f(
                                                                                            num:f( node:fallback(../McuDFSPortMfi, num:f(5) ) ) +
                                                                                            num:f(
                                                                                                num:f( node:fallback(../McuDFSPortMfn, num:f(0) ) ) div
                                                                                                num:f(36)
                                                                                                 )
                                                                                             )
                                                                                         )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(80000000) ) &gt; num:i(ecu:get('MCU.CoreDFS.Limits.DFS4.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(80000000) ) &lt; num:i(ecu:get('MCU.CoreDFS.Limits.DFS4.Low'))
                                                                )
                                                            )
                                                        )
                                                        "
                                                        true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                </v:var>
                                            </v:ctr>

                                            <v:ctr name="McuDfs_5" type="IDENTIFIABLE">
                                                <a:a name="UUID" value="ECUC:2a783fae-238a-4382-9124-d57c31d0ac56"/>
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            Configuration values for DFS_5.  <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>

                                                <v:var name="McuDFSUnderMcuControl" type="BOOLEAN">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            Set this to TRUE if this DFS is under mcu control <br />
                                                            If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                            The user must still set the values - they are used by the clock reference points  <br />
                                                            Note: Implementation Specific Parameter. <br />
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="LABEL" value="CORE DFS5 under MCU control"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:1be167fc-e06b-4db8-a8d7-8750378b33b0"/>
                                                <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="(ecu:get('MCU.CoreDFS.Terminals.DFS5.Connected') = 'true') or ((ecu:get('MCU.CoreDFS.Terminals.DFS5.Connected') = 'false') and (node:fallback(., 'false') = 'true')) "/>
                                                </a:a>
                                                <a:da name="DEFAULT" type="XPath">
                                                    <a:tst expr="(node:fallback(../../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'false') and (ecu:get('MCU.CoreDFS.Terminals.DFS5.Connected') = 'true')"/>
                                                </a:da>
                                                <a:da name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (node:fallback(., 'false') = 'true') and
                                                            (node:fallback(../../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'true')
                                                        )"
                                                           true="CoreDFS cannot be under MCU control if McuNoPll is enabled."/>
                                                    <a:tst expr="
                                                        (
                                                            ( node:fallback(., 'false') = 'true' ) and
                                                            ( node:fallback(as:modconf('Mcu')[1]/McuGeneralConfiguration/McuControlledClocksConfiguration/McuDfs0UnderMcuControl, 'false') = 'false' )
                                                        )"
                                                        true="The field McuGeneralConfiguration/McuControlledClocksConfiguration/McuDfs0UnderMcuControl must be set to 'true' when CORE DFS5 is under MCU control."/>
                                                </a:da>
                                                </v:var>

                                                <v:var name="McuDFSPort_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                DFS5 Output Port Enable. <br />
                                                                This field specifies whether MCU will control the configuration and functionality of CORE_DFS5_CLK inside the driver. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="DFS5 Output Port Enable"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:84848bc4-c913-81d8-9a9d-b74b555cac45"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="(ecu:get('MCU.CoreDFS.Terminals.DFS5.Connected') = 'true') or ((ecu:get('MCU.CoreDFS.Terminals.DFS5.Connected') = 'false') and (node:fallback(., 'false') = 'true')) "/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'true')
                                                            )"
                                                            true="CoreDFS cannot be enabled if McuNoPll is enabled."/>
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../../../McuPll_0/McuPLLEnabled, 'false') = 'false')
                                                            )"
                                                            true="CoreDFS cannot be enabled if CorePLL is disabled."/>
                                                        <a:tst expr="( (ecu:get('MCU.CoreDFS.Terminals.DFS5.Connected') = 'false') and (node:fallback(., 'false') = 'true'))"
                                                            true="This feature is not support on this platform. The value of this node should be set to false."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuDFSPortMfi" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This field provides the integer part of division factor for port<italic>n</italic>. - DFS_DVPORT4[MFI]. <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="DFS5 MFI"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:3a4afd8a-8efe-4d46-872e-3c5d1bcabb65"/>
                                                    <a:da name="DEFAULT" value="1"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuDFSPort_En, 'false') = 'true'"/>
                                                    </a:a>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=255"/>
                                                        <a:tst expr="&gt;=1"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuDFSPortMfn" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This field provides the fractional part of division factor for port<italic>n</italic>. - DFS_DVPORT4[MFN]. <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="DFS5 MFN"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:3a4afd8a-8efe-4d46-872e-3c5d1bca64"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuDFSPort_En, 'false') = 'true'"/>
                                                    </a:a>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=35"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="DFS_CLK_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Output value for <strong>CORE_DFS5_CLK frequency</strong>. <br />
                                                                The valid range is [2.54 ... 600] MHz, the valid value is 0 when disabled. <br />
                                                                Note: This field must not be manually modified. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="DFS5_CLK Frequency (Calculated)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:cc5ec348-9a9e-4233-90ec-a8ea5b27ab16"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuDFSPort_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(number(node:fallback(../McuDFSPort_En,'false')='true')) *
                                                            (
                                                                num:f( node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_VCO_Frequency, num:f(1300000000) ) ) div
                                                                num:f( num:f(2) *
                                                                    num:f(
                                                                        num:f( node:fallback(../McuDFSPortMfi, num:f(5) ) ) +
                                                                        num:f(
                                                                            num:f( node:fallback(../McuDFSPortMfn, num:f(0) ) ) div
                                                                            num:f(36)
                                                                             )
                                                                         )
                                                                     )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.CoreDFS.Limits.DFS5.High')"/>
                                                        <a:tst expr="&gt;=(ecu:get('MCU.CoreDFS.Limits.DFS5.Low') * num:f(number(node:fallback(../McuDFSPort_En,'false')='true')))"/>
                                                    </a:a>
                                                    <a:da name="RANGE" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (
                                                                (node:fallback(../McuDFSPort_En,'false')='true') or
                                                                (num:f(node:fallback(., 0)) != 0)
                                                            )
                                                            and
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 80000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 80000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(number(node:fallback(../McuDFSPort_En,'false')='true')) *
                                                                                (
                                                                                    num:f( node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_VCO_Frequency, num:f(1300000000) ) ) div
                                                                                    num:f( num:f(2) *
                                                                                        num:f(
                                                                                            num:f( node:fallback(../McuDFSPortMfi, num:f(5) ) ) +
                                                                                            num:f(
                                                                                                num:f( node:fallback(../McuDFSPortMfn, num:f(0) ) ) div
                                                                                                num:f(36)
                                                                                                 )
                                                                                             )
                                                                                         )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(80000000) ) &gt; num:i(ecu:get('MCU.CoreDFS.Limits.DFS5.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(80000000) ) &lt; num:i(ecu:get('MCU.CoreDFS.Limits.DFS5.Low'))
                                                                )
                                                            )
                                                        )
                                                        "
                                                        true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                </v:var>
                                            </v:ctr>

                                            <v:ctr name="McuDfs_6" type="IDENTIFIABLE">
                                                <a:a name="UUID" value="ECUC:2a783fae-238a-4382-9124-d57c31d0ca12"/>
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            Configuration values for DFS_6.  <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>

                                                <v:var name="McuDFSUnderMcuControl" type="BOOLEAN">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            Set this to TRUE if this DFS is under mcu control <br />
                                                            If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                            The user must still set the values - they are used by the clock reference points  <br />
                                                            Note: Implementation Specific Parameter. <br />
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="LABEL" value="CORE DFS6 under MCU control"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:1be167fc-e06b-4db8-a8d7-8750378bc322"/>
                                                <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="(ecu:get('MCU.CoreDFS.Terminals.DFS6.Connected') = 'true') or ((ecu:get('MCU.CoreDFS.Terminals.DFS6.Connected') = 'false') and (node:fallback(., 'false') = 'true')) "/>
                                                </a:a>
                                                <a:da name="DEFAULT" type="XPath">
                                                    <a:tst expr="(node:fallback(../../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'false') and (ecu:get('MCU.CoreDFS.Terminals.DFS6.Connected') = 'true')"/>
                                                </a:da>
                                                <a:da name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (node:fallback(., 'false') = 'true') and
                                                            (node:fallback(../../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'true')
                                                        )"
                                                           true="CoreDFS cannot be under MCU control if McuNoPll is enabled."/>
                                                    <a:tst expr="
                                                        (
                                                            ( node:fallback(., 'false') = 'true' ) and
                                                            ( node:fallback(as:modconf('Mcu')[1]/McuGeneralConfiguration/McuControlledClocksConfiguration/McuDfs0UnderMcuControl, 'false') = 'false' )
                                                        )"
                                                        true="The field McuGeneralConfiguration/McuControlledClocksConfiguration/McuDfs0UnderMcuControl must be set to 'true' when CORE DFS6 is under MCU control."/>
                                                </a:da>
                                                </v:var>

                                                <v:var name="McuDFSPort_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                DFS6 Output Port Enable. <br />
                                                                This field specifies whether MCU will control the configuration and functionality of CORE_DFS6_CLK inside the driver. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="DFS6 Output Port Enable"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:84848bc4-c913-81d8-9a9d-b74b555c16aa"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="(ecu:get('MCU.CoreDFS.Terminals.DFS6.Connected') = 'true') or ((ecu:get('MCU.CoreDFS.Terminals.DFS6.Connected') = 'false') and (node:fallback(., 'false') = 'true')) "/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'true')
                                                            )"
                                                            true="CoreDFS cannot be enabled if McuNoPll is enabled."/>
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../../../McuPll_0/McuPLLEnabled, 'false') = 'false')
                                                            )"
                                                            true="CoreDFS cannot be enabled if CorePLL is disabled."/>
                                                        <a:tst expr="( (ecu:get('MCU.CoreDFS.Terminals.DFS6.Connected') = 'false') and (node:fallback(., 'false') = 'true'))"
                                                            true="This feature is not support on this platform. The value of this node should be set to false."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuDFSPortMfi" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This field provides the integer part of division factor for port<italic>n</italic>. - DFS_DVPORT5[MFI]. <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="DFS6 MFI"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:3a4afd8a-8efe-4d46-872e-3c5d1bcabc49"/>
                                                    <a:da name="DEFAULT" value="1"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuDFSPort_En, 'false') = 'true'"/>
                                                    </a:a>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=255"/>
                                                        <a:tst expr="&gt;=1"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuDFSPortMfn" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This field provides the fractional part of division factor for port<italic>n</italic>. - DFS_DVPORT5[MFN]. <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="DFS6 MFN"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:3a4afd8a-8efe-4d46-872e-3c5d1bcc19"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuDFSPort_En, 'false') = 'true'"/>
                                                    </a:a>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=35"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="DFS_CLK_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Output value for <strong>CORE_DFS6_CLK frequency</strong>. <br />
                                                                The valid range is [2.54 ... 600] MHz, the valid value is 0 when disabled. <br />
                                                                Note: This field must not be manually modified. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="DFS6_CLK Frequency (Calculated)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:cc5ec348-9a9e-4233-90ec-a8ea5b27ac43"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuDFSPort_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(number(node:fallback(../McuDFSPort_En,'false')='true')) *
                                                            (
                                                                num:f( node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_VCO_Frequency, num:f(1300000000) ) ) div
                                                                num:f( num:f(2) *
                                                                    num:f(
                                                                        num:f( node:fallback(../McuDFSPortMfi, num:f(5) ) ) +
                                                                        num:f(
                                                                            num:f( node:fallback(../McuDFSPortMfn, num:f(0) ) ) div
                                                                            num:f(36)
                                                                             )
                                                                         )
                                                                     )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.CoreDFS.Limits.DFS6.High')"/>
                                                        <a:tst expr="&gt;=(ecu:get('MCU.CoreDFS.Limits.DFS6.Low') * num:f(number(node:fallback(../McuDFSPort_En,'false')='true')))"/>
                                                    </a:a>
                                                    <a:da name="RANGE" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (
                                                                (node:fallback(../McuDFSPort_En,'false')='true') or
                                                                (num:f(node:fallback(., 0)) != 0)
                                                            )
                                                            and
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 80000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 80000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(number(node:fallback(../McuDFSPort_En,'false')='true')) *
                                                                                (
                                                                                    num:f( node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_VCO_Frequency, num:f(1300000000) ) ) div
                                                                                    num:f( num:f(2) *
                                                                                        num:f(
                                                                                            num:f( node:fallback(../McuDFSPortMfi, num:f(5) ) ) +
                                                                                            num:f(
                                                                                                num:f( node:fallback(../McuDFSPortMfn, num:f(0) ) ) div
                                                                                                num:f(36)
                                                                                                 )
                                                                                             )
                                                                                         )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(80000000) ) &gt; num:i(ecu:get('MCU.CoreDFS.Limits.DFS6.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(80000000) ) &lt; num:i(ecu:get('MCU.CoreDFS.Limits.DFS6.Low'))
                                                                )
                                                            )
                                                        )
                                                        "
                                                        true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                </v:var>
                                            </v:ctr>
                                        </v:ctr>

                                        <v:ctr name="McuPll_1" type="IDENTIFIABLE">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        This container provides the specific configuration for the PERIPH PLL.
                                                        Note: Implementation Specific Container.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="TAB" value="McuPeriphPLL"/>
                                            <a:a name="UUID" value="ECUC:187df79b-0763-4516-96a3-2c49fd8f2950"/>

                                            <v:var name="McuPLLUnderMcuControl" type="BOOLEAN">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            Set this to TRUE if this PLL is under mcu control <br />
                                                            If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                            The user must still set the values - they are used by the clock reference points  <br />
                                                            Note: Implementation Specific Parameter. <br />
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="LABEL" value="PERIPH PLL under MCU control"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:8aec376a-4a4d-4685-af8b-1e261fb3a3f8"/>
                                                <a:da name="DEFAULT" type="XPath">
                                                    <a:tst expr="(node:fallback(../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'false')"/>
                                                </a:da>
                                                <a:da name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (node:fallback(., 'false') = 'true') and
                                                            (node:fallback(../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'true')
                                                        )"
                                                           true="PeriphPLL cannot be under MCU control if McuNoPll is enabled."/>
                                                    <a:tst expr="
                                                        (
                                                            ( node:fallback(., 'false') = 'true' ) and
                                                            ( node:fallback(as:modconf('Mcu')[1]/McuGeneralConfiguration/McuControlledClocksConfiguration/McuPll1UnderMcuControl, 'false') = 'false' )
                                                        )"
                                                        true="The field McuGeneralConfiguration/McuControlledClocksConfiguration/McuPll1UnderMcuControl must be set to 'true' when PeriphPLL is under MCU control."/>
                                                </a:da>
                                            </v:var>

                                            <v:var name="McuPLLEnabled" type="BOOLEAN">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            0 - PeriphPLL is disabled. <br />
                                                            1 - PeriphPLL is enabled (and can be used as a clock source). <br />
                                                            Note: Implementation Specific Parameter. <br />
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="LABEL" value="Periph PLL Enabled"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:1be167fc-e06b-4db8-a8d7-8743067a642c"/>
                                                <a:da name="DEFAULT" type="XPath">
                                                    <a:tst expr="(node:fallback(../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'false')"/>
                                                </a:da>
                                                <a:da name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (node:fallback(., 'false') = 'true') and
                                                            (node:fallback(../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'true')
                                                        )"
                                                           true="PeriphPLL cannot be enabled if McuNoPll is enabled."/>
                                                </a:da>
                                            </v:var>

                                            <v:var name="McuPllClockSelection" type="ENUMERATION">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                             PLL Source Selection - PLLDIG_PLLCLKMUX[REFCLKSEL].  <br />
                                                            Note: Implementation Specific Parameter. <br />
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="LABEL" value="PLL Source Selection"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:f2a7a795-1c44-41b9-a411-38c89067e211"/>
                                                <a:da name="DEFAULT" value="FIRC_CLK"/>
                                                <a:da name="WARNING" type="XPath">
                                                    <a:tst expr="(node:fallback(., 'FXOSC_CLK') = 'FIRC_CLK')"
                                                        true="It is highly recommended to only use FXOSC as this generally provides a more accurate system clock."/>
                                                </a:da>
                                                <a:da name="RANGE">
                                                    <a:v>FIRC_CLK</a:v>
                                                    <a:v>FXOSC_CLK</a:v>
                                                </a:da>
                                                <a:da name="INVALID" type="XPath">
                                                    <a:tst expr="( (node:fallback(., 'FXOSC_CLK') = 'FXOSC_CLK') and
                                                                   (node:fallback(../../../McuFXOSC/McuFxoscPowerDownCtr, 'false') = 'false')
                                                                 )"
                                                           true="If 'FXOSC_CLK' is selected as source clock, FXOSC ('McuFxoscPowerDownCtr') must be enabled."/>
                                                </a:da>
                                            </v:var>

                                            <v:ctr name="McuPll_Configuration" type="IDENTIFIABLE">
                                                <a:a name="UUID" value="ECUC:bb7de1d6-a118-443a-8dc4-a00f8159db55"/>
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            Configuration values for PLL.  <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>

                                                <v:var name="McuPllDvRdiv" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Input clock predivider. <br />
                                                                Sets the PLL: PLLDIG_PLLDV[RDIV] field register. <br />
                                                                This field controls the value of the divider on the input clock. The output of the predivider circuit generates the reference clock to the PLL analog loop. <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:2b9c1a10-d1dc-d07f-8706-bf6b2da7fe3d"/>
                                                    <a:da name="DEFAULT" value="2"/>
                                                    <a:a name="LABEL" value="RDIV"/>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=7"/>
                                                        <a:tst expr="&gt;=1"/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                         num:f(
                                                             num:f( num:i(number(node:fallback(../../McuPllClockSelection,'FIRC_CLK')='FIRC_CLK')) * num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                    num:i(number(node:fallback(../../McuPllClockSelection,'FIRC_CLK')='FXOSC_CLK')) *
                                                                    num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                  ) div
                                                                    num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) )
                                                              ) &gt; num:i(ecu:get('MCU.PeriphPLL.Limits.ClkIn.High'))
                                                        )
                                                         or
                                                        (
                                                         num:f(
                                                             num:f( num:i(number(node:fallback(../../McuPllClockSelection,'FIRC_CLK')='FIRC_CLK')) * num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                    num:i(number(node:fallback(../../McuPllClockSelection,'FIRC_CLK')='FXOSC_CLK')) *
                                                                    num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                  ) div
                                                                    num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) )
                                                              ) &lt; num:i(ecu:get('MCU.PeriphPLL.Limits.ClkIn.Low'))
                                                        )
                                                        "
                                                        true="The input frequency for the PLL (ReferenceClockFrequency/Rdiv) must be between 20 MHz and 40 MHz."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllDvMfi" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Loop multiplication factor divider. <br />
                                                                Sets the PLL: PLLDIG_PLLDV[MFI] field register. <br />
                                                                This field controls the value of the divider in the feedback loop. The value specified by the MFD bits
                                                                establishes the multiplication factor applied to the reference frequency. Divider value = MFD, where MFD
                                                                should be choosen such that it does not violate VCO frequency specifications. <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:395e67d1-f6cc-4ce8-a528-8cb92aebebf2"/>
                                                    <a:da name="DEFAULT" value="60"/>
                                                    <a:a name="LABEL" value="MFD"/>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=255"/>
                                                        <a:tst expr="&gt;=1"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllFdMfn" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Numerator for fractional loop division factor - PLLDIG_PLLFD[MFN]. <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="MFN"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:ce525545-8257-4c4c-8de7-a1b919d675d0"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=32767"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:da>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                                (
                                                                    (num:i(node:fallback(., 0)) != 0) and
                                                                    (node:fallback(../McuPllFdSdmen, 'false') != 'true')
                                                                )"
                                                               true="Fractional loop division factor works only when PLLDIG_PLLFD[SDMEN] is enabled."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllFdSdmen" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Sigma Delta Modulation Enable. <br />
                                                                Set the PLL: PLLDIG_PLLFD[SDMEN] field register. <br />
                                                                0 - Sigma delta modulation disabled. <br />
                                                                1 - Sigma delta modulation enabled. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:7ae11f1a-e1b3-422b-8976-9096d3cc8c1d"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:a name="LABEL" value="Sigma Delta Modulation Enable"/>
                                                </v:var>

                                               <v:var name="McuPllOdiv0_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                PHI0 Divider enable. <br />
                                                                Set the PLL: PLLDIG_PLLODIV0[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PHI0 Divider enable"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:84845bc4-c813-8ad8-9a9d-b74b444d76ac"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="(ecu:get('MCU.PeriphPLL.Terminals.PHI0.Connected') = 'true') or ((ecu:get('MCU.PeriphPLL.Terminals.PHI0.Connected') = 'false') and (node:fallback(., 'false') = 'true')) "/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'false') = 'true') and (node:fallback(../../McuPLLEnabled, 'false') = 'false') )"
                                                               true="PeriphPLL must be enabled before enabling PLL_ODIV0."/>
                                                        <a:tst expr="( (ecu:get('MCU.PeriphPLL.Terminals.PHI0.Connected') = 'false') and (node:fallback(., 'false') = 'true'))"
                                                               true="This feature is not support on this platform. The value of this node should be set to false."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllOdiv0_Div" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                PHI0 Division value. <br />
                                                                PLLDIG_PLLODIV0[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="PHI0 Division value"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:f4a75a41-c6bc-451e-be5d-af0ab7e64c80"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuPllOdiv0_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=255"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllOdiv1_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                PHI1 Divider enable. <br />
                                                                Set the PLL: PLLDIG_PLLODIV1[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PHI1 Divider enable"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:848456c1-cd13-8adc-959d-b74b444d76ac"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="(ecu:get('MCU.PeriphPLL.Terminals.PHI1.Connected') = 'true') or ((ecu:get('MCU.PeriphPLL.Terminals.PHI1.Connected') = 'false') and (node:fallback(., 'false') = 'true')) "/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'false') = 'true') and (node:fallback(../../McuPLLEnabled, 'false') = 'false') )"
                                                               true="PeriphPLL must be enabled before enabling PLL_ODIV1."/>
                                                        <a:tst expr="( (ecu:get('MCU.PeriphPLL.Terminals.PHI1.Connected') = 'false') and (node:fallback(., 'false') = 'true'))"
                                                               true="This feature is not support on this platform. The value of this node should be set to false."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllOdiv1_Div" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                PHI1 Division value. <br />
                                                                PLLDIG_PLLODIV1[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="PHI1 Division value"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:f4675141-c4bc-451e-be5d-af0ab7e64c80"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuPllOdiv1_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=255"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllOdiv2_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                PHI2 Divider enable. <br />
                                                                Set the PLL: PLLDIG_PLLODIV2[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PHI2 Divider enable"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:858d5ec1-cd13-8a6c-959d-b74b444d76ac"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="(ecu:get('MCU.PeriphPLL.Terminals.PHI2.Connected') = 'true') or ((ecu:get('MCU.PeriphPLL.Terminals.PHI2.Connected') = 'false') and (node:fallback(., 'false') = 'true')) "/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'false') = 'true') and (node:fallback(../../McuPLLEnabled, 'false') = 'false') )"
                                                               true="PeriphPLL must be enabled before enabling PLL_ODIV2."/>
                                                        <a:tst expr="( (ecu:get('MCU.PeriphPLL.Terminals.PHI2.Connected') = 'false') and (node:fallback(., 'false') = 'true'))"
                                                               true="This feature is not support on this platform. The value of this node should be set to false."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllOdiv2_Div" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                PHI2 Division value. <br />
                                                                PLLDIG_PLLODIV2[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="PHI2 Division value"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:f4655f4e-c4bc-451e-be5d-af0ab7e64c80"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuPllOdiv2_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=255"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllOdiv3_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                PHI3 Divider enable. <br />
                                                                Set the PLL: PLLDIG_PLLODIV3[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PHI3 Divider enable"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:85fd5cc1-cd13-8a6c-959d-b74b444d76ac"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="(ecu:get('MCU.PeriphPLL.Terminals.PHI3.Connected') = 'true') or ((ecu:get('MCU.PeriphPLL.Terminals.PHI3.Connected') = 'false') and (node:fallback(., 'false') = 'true')) "/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'false') = 'true') and (node:fallback(../../McuPLLEnabled, 'false') = 'false') )"
                                                               true="PeriphPLL must be enabled before enabling PLL_ODIV3."/>
                                                        <a:tst expr="( (ecu:get('MCU.PeriphPLL.Terminals.PHI3.Connected') = 'false') and (node:fallback(., 'false') = 'true'))"
                                                               true="This feature is not support on this platform. The value of this node should be set to false."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllOdiv3_Div" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                PHI3 Division value. <br />
                                                                PLLDIG_PLLODIV3[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="PHI3 Division value"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:f465554c-c4ac-a51e-be5d-af0ab7e64c80"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuPllOdiv3_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=255"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllOdiv4_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                PHI4 Divider enable. <br />
                                                                Set the PLL: PLLDIG_PLLODIV4[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PHI4 Divider enable"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:85fd5dc1-cd1d-8a6c-959d-b74b444d76ac"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="(ecu:get('MCU.PeriphPLL.Terminals.PHI4.Connected') = 'true') or ((ecu:get('MCU.PeriphPLL.Terminals.PHI4.Connected') = 'false') and (node:fallback(., 'false') = 'true')) "/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'false') = 'true') and (node:fallback(../../McuPLLEnabled, 'false') = 'false') )"
                                                               true="PeriphPLL must be enabled before enabling PLL_ODIV4."/>
                                                        <a:tst expr="( (ecu:get('MCU.PeriphPLL.Terminals.PHI4.Connected') = 'false') and (node:fallback(., 'false') = 'true'))"
                                                               true="This feature is not support on this platform. The value of this node should be set to false."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllOdiv4_Div" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                PHI4 Division value. <br />
                                                                PLLDIG_PLLODIV4[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="PHI4 Division value"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:f465f54f-c4aa-af1e-be5d-af0ab7e64c80"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuPllOdiv4_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=255"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllOdiv5_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                PHI5 Divider enable. <br />
                                                                Set the PLL: PLLDIG_PLLODIV5[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PHI5 Divider enable"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:85f45dd1-cd16-8a6c-959d-b74b444d76ac"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="(ecu:get('MCU.PeriphPLL.Terminals.PHI5.Connected') = 'true') or ((ecu:get('MCU.PeriphPLL.Terminals.PHI5.Connected') = 'false') and (node:fallback(., 'false') = 'true')) "/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'false') = 'true') and (node:fallback(../../McuPLLEnabled, 'false') = 'false') )"
                                                               true="PeriphPLL must be enabled before enabling PLL_ODIV5."/>
                                                        <a:tst expr="( (ecu:get('MCU.PeriphPLL.Terminals.PHI5.Connected') = 'false') and (node:fallback(., 'false') = 'true'))"
                                                               true="This feature is not support on this platform. The value of this node should be set to false."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllOdiv5_Div" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                PHI5 Division value. <br />
                                                                PLLDIG_PLLODIV5[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="PHI5 Division value"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:f465f14f-c5ae-af1e-be5d-af0ab7e64c80"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuPllOdiv5_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=255"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllOdiv6_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                PHI6 Divider enable. <br />
                                                                Set the PLL: PLLDIG_PLLODIV6[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PHI6 Divider enable"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:85f45dd1-cd16-8a6c-959d-c47b333d67db"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="(ecu:get('MCU.PeriphPLL.Terminals.PHI6.Connected') = 'true') or ((ecu:get('MCU.PeriphPLL.Terminals.PHI6.Connected') = 'false') and (node:fallback(., 'false') = 'true')) "/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'false') = 'true') and (node:fallback(../../McuPLLEnabled, 'false') = 'false') )"
                                                               true="PeriphPLL must be enabled before enabling PLL_ODIV6."/>
                                                        <a:tst expr="( (ecu:get('MCU.PeriphPLL.Terminals.PHI6.Connected') = 'false') and (node:fallback(., 'false') = 'true'))"
                                                               true="This feature is not support on this platform. The value of this node should be set to false."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllOdiv6_Div" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                PHI6 Division value. <br />
                                                                PLLDIG_PLLODIV6[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="PHI6 Division value"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:f465f14f-c5ae-af1e-be5d-fb2ab8e46c81"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuPllOdiv6_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=255"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllOdiv7_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                PHI7 Divider enable. <br />
                                                                Set the PLL: PLLDIG_PLLODIV7[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PHI7 Divider enable"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:85f45dd1-cd16-8a6c-959d-b74b555d76bf"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="(ecu:get('MCU.PeriphPLL.Terminals.PHI7.Connected') = 'true') or ((ecu:get('MCU.PeriphPLL.Terminals.PHI7.Connected') = 'false') and (node:fallback(., 'false') = 'true')) "/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'false') = 'true') and (node:fallback(../../McuPLLEnabled, 'false') = 'false') )"
                                                               true="PeriphPLL must be enabled before enabling PLL_ODIV7."/>
                                                        <a:tst expr="( (ecu:get('MCU.PeriphPLL.Terminals.PHI7.Connected') = 'false') and (node:fallback(., 'false') = 'true'))"
                                                               true="This feature is not support on this platform. The value of this node should be set to false."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllOdiv7_Div" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                PHI7 Division value. <br />
                                                                PLLDIG_PLLODIV7[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="PHI7 Division value"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:f465f14f-c5ae-af1e-be5d-cd2ab7a64c18"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuPllOdiv7_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=255"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:da>
                                                </v:var>
                                            </v:ctr>

                                            <v:ctr name="McuPll_Parameter" type="IDENTIFIABLE">
                                                <a:a name="UUID" value="ECUC:864b1583-6ae5-4ba1-b44b-f36766ce76b0"/>
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            Calculated values for PLL. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>

                                                <v:var name="PLL_PHI0_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Output value for <strong>PERIPH_PLL_PHI0_CLK frequency</strong>. <br />
                                                                For S32G2XX, the valid range is [100 ... 125] MHz. <br />
                                                                For S32R45, the valid range is [0 ... 125] MHz. <br />
                                                                The valid value is 0 when disabled. <br />
                                                                Note: This field must not be manually modified. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PLL_PHI0 Frequency (Calculated)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:38a0e3cb-a8ab-431a-a02f-46e14fc07110"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../../McuPll_Configuration/McuPllOdiv0_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(number(node:fallback(../../McuPll_Configuration/McuPllOdiv0_En,'false')='true'))*
                                                            (
                                                                 num:f( num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FIRC_CLK')) * num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                        num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FXOSC_CLK')) *
                                                                        num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                      ) *
                                                                num:f(
                                                                    num:f(
                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvMfi, num:f(65) ) ) +
                                                                        num:f(
                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllFdMfn, num:f(0) )) div
                                                                            num:f( 18432 )
                                                                        )
                                                                    ) div
                                                                    num:f(
                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) ) *
                                                                        (node:when(
                                                                                   node:fallback(../../McuPll_Configuration/McuPllOdiv0_En,'true') = 'true',
                                                                                   node:fallback(../../McuPll_Configuration/McuPllOdiv0_Div,num:i(19)),
                                                                                   num:i(0)
                                                                                  ) + num:f(1))
                                                                        )
                                                                    )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.PeriphPLL.Limits.PHI0.High')"/>
                                                        <a:tst expr="&gt;=(ecu:get('MCU.PeriphPLL.Limits.PHI0.Low') * num:f(number(node:fallback(../../McuPll_Configuration/McuPllOdiv0_En,'false')='true')))"/>
                                                    </a:a>
                                                    <a:da name="RANGE" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (
                                                                (node:fallback(../../McuPll_Configuration/McuPllOdiv0_En,'false')='true') or
                                                                (num:f(node:fallback(., 0)) != 0)
                                                            )
                                                            and
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 125000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 125000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(number(node:fallback(../../McuPll_Configuration/McuPllOdiv0_En,'false')='true')) *
                                                                                (
                                                                                     num:f( num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FIRC_CLK')) * num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                                            num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FXOSC_CLK')) *
                                                                                            num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                                          ) *
                                                                                    num:f(
                                                                                        num:f(
                                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllDvMfi, num:f(65) ) ) +
                                                                                            num:f(
                                                                                                num:f( node:fallback(../../McuPll_Configuration/McuPllFdMfn, num:f(0) )) div
                                                                                                num:f( 18432 )
                                                                                            )
                                                                                        ) div
                                                                                        num:f(
                                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) ) *
                                                                                            (node:when(
                                                                                                       node:fallback(../../McuPll_Configuration/McuPllOdiv0_En,'true') = 'true',
                                                                                                       node:fallback(../../McuPll_Configuration/McuPllOdiv0_Div,num:i(19)),
                                                                                                       num:i(0)
                                                                                                      ) + num:f(1))
                                                                                            )
                                                                                        )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(125000000) ) &gt; num:i(ecu:get('MCU.PeriphPLL.Limits.PHI0.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(20600000) ) &lt; num:i(ecu:get('MCU.PeriphPLL.Limits.PHI0.Low'))
                                                                )
                                                            )
                                                        )
                                                        "
                                                        true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="PLL_PHI1_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Output value for <strong>PERIPH_PLL_PHI1_CLK frequency</strong>. <br />
                                                                The valid range is [0 ... 80] MHz, the valid value is 0 when disabled. <br />
                                                                Note: This field must not be manually modified. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PLL_PHI1 Frequency (Calculated)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:1711c1fd-4797-4070-b11d-1568eb755fbd"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../../McuPll_Configuration/McuPllOdiv1_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(number(node:fallback(../../McuPll_Configuration/McuPllOdiv1_En,'false')='true')) *
                                                            (
                                                                 num:f( num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FIRC_CLK')) * num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                        num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FXOSC_CLK')) *
                                                                        num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                      ) *
                                                                num:f(
                                                                    num:f(
                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvMfi, num:f(65) ) ) +
                                                                        num:f(
                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllFdMfn, num:f(0) ) ) div
                                                                            num:f( 18432 )
                                                                        )
                                                                    ) div
                                                                    num:f(
                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) ) *
                                                                        (node:when(
                                                                                   node:fallback(../../McuPll_Configuration/McuPllOdiv1_En,'true') = 'true',
                                                                                   node:fallback(../../McuPll_Configuration/McuPllOdiv1_Div,num:i(19)),
                                                                                   num:i(0)
                                                                                  ) + num:f(1))
                                                                        )
                                                                    )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.PeriphPLL.Limits.PHI1.High')"/>
                                                        <a:tst expr="&gt;=(ecu:get('MCU.PeriphPLL.Limits.PHI1.Low') * num:f(number(node:fallback(../../McuPll_Configuration/McuPllOdiv1_En,'false')='true')))"/>
                                                    </a:a>
                                                    <a:da name="RANGE" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (
                                                                (node:fallback(../../McuPll_Configuration/McuPllOdiv1_En,'false')='true') or
                                                                (num:f(node:fallback(., 0)) != 0)
                                                            )
                                                            and
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 80000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 80000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(number(node:fallback(../../McuPll_Configuration/McuPllOdiv1_En,'false')='true')) *
                                                                                (
                                                                                     num:f( num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FIRC_CLK')) * num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                                            num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FXOSC_CLK')) *
                                                                                            num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                                          ) *
                                                                                    num:f(
                                                                                        num:f(
                                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllDvMfi, num:f(65) ) ) +
                                                                                            num:f(
                                                                                                num:f( node:fallback(../../McuPll_Configuration/McuPllFdMfn, num:f(0) ) ) div
                                                                                                num:f( 18432 )
                                                                                            )
                                                                                        ) div
                                                                                        num:f(
                                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) ) *
                                                                                            (node:when(
                                                                                                       node:fallback(../../McuPll_Configuration/McuPllOdiv1_En,'true') = 'true',
                                                                                                       node:fallback(../../McuPll_Configuration/McuPllOdiv1_Div,num:i(19)),
                                                                                                       num:i(0)
                                                                                                      ) + num:f(1))
                                                                                            )
                                                                                        )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(80000000) ) &gt; num:i(ecu:get('MCU.PeriphPLL.Limits.PHI1.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(20600000) ) &lt; num:i(ecu:get('MCU.PeriphPLL.Limits.PHI1.Low'))
                                                                )
                                                            )
                                                        )
                                                        "
                                                        true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="PLL_PHI2_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Output value for <strong>PERIPH_PLL_PHI2_CLK frequency</strong>. <br />
                                                                For S32G2XX, the valid range is [40 ... 80] MHz. <br />
                                                                For S32R45, the valid range is [0 ... 80] MHz. <br />
                                                                The valid value is 0 when disabled. <br />
                                                                Note: This field must not be manually modified. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PLL_PHI2 Frequency (Calculated)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:1711c1fd-e797-4070-ba1f-1568eb755fbd"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../../McuPll_Configuration/McuPllOdiv2_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(number(node:fallback(../../McuPll_Configuration/McuPllOdiv2_En,'false')='true')) *
                                                            (
                                                                 num:f( num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FIRC_CLK')) * num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                        num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FXOSC_CLK')) *
                                                                        num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                      ) *
                                                                num:f(
                                                                    num:f(
                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvMfi, num:f(65) ) ) +
                                                                        num:f(
                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllFdMfn, num:f(0) ) ) div
                                                                            num:f( 18432 )
                                                                        )
                                                                    ) div
                                                                    num:f(
                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) ) *
                                                                        (node:when(
                                                                                   node:fallback(../../McuPll_Configuration/McuPllOdiv2_En,'true') = 'true',
                                                                                   node:fallback(../../McuPll_Configuration/McuPllOdiv2_Div,num:i(19)),
                                                                                   num:i(0)
                                                                                  ) + num:f(1))
                                                                        )
                                                                    )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.PeriphPLL.Limits.PHI2.High')"/>
                                                        <a:tst expr="&gt;=(ecu:get('MCU.PeriphPLL.Limits.PHI2.Low') * num:f(number(node:fallback(../../McuPll_Configuration/McuPllOdiv2_En,'false')='true')))"/>
                                                    </a:a>
                                                    <a:da name="RANGE" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (
                                                                (node:fallback(../../McuPll_Configuration/McuPllOdiv2_En,'false')='true') or
                                                                (num:f(node:fallback(., 0)) != 0)
                                                            )
                                                            and
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 80000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 80000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(number(node:fallback(../../McuPll_Configuration/McuPllOdiv2_En,'false')='true')) *
                                                                                (
                                                                                     num:f( num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FIRC_CLK')) * num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                                            num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FXOSC_CLK')) *
                                                                                            num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                                          ) *
                                                                                    num:f(
                                                                                        num:f(
                                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllDvMfi, num:f(65) ) ) +
                                                                                            num:f(
                                                                                                num:f( node:fallback(../../McuPll_Configuration/McuPllFdMfn, num:f(0) ) ) div
                                                                                                num:f( 18432 )
                                                                                            )
                                                                                        ) div
                                                                                        num:f(
                                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) ) *
                                                                                            (node:when(
                                                                                                       node:fallback(../../McuPll_Configuration/McuPllOdiv2_En,'true') = 'true',
                                                                                                       node:fallback(../../McuPll_Configuration/McuPllOdiv2_Div,num:i(19)),
                                                                                                       num:i(0)
                                                                                                      ) + num:f(1))
                                                                                            )
                                                                                        )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(80000000) ) &gt; num:i(ecu:get('MCU.PeriphPLL.Limits.PHI2.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(20600000) ) &lt; num:i(ecu:get('MCU.PeriphPLL.Limits.PHI2.Low'))
                                                                )
                                                            )
                                                        )
                                                        "
                                                        true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="PLL_PHI3_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Output value for <strong>PERIPH_PLL_PHI3_CLK frequency</strong>. <br />
                                                                The valid range is [0 ... 133] MHz, the valid value is 0 when disabled. <br />
                                                                Note: This field must not be manually modified. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PLL_PHI3 Frequency (Calculated)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:1711c1fd-e797-c07f-ba1f-1568eb755fbd"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../../McuPll_Configuration/McuPllOdiv3_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(number(node:fallback(../../McuPll_Configuration/McuPllOdiv3_En,'false')='true')) *
                                                            (
                                                                 num:f( num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FIRC_CLK')) * num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                        num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FXOSC_CLK')) *
                                                                        num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                      ) *
                                                                num:f(
                                                                    num:f(
                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvMfi, num:f(65) ) ) +
                                                                        num:f(
                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllFdMfn, num:f(0) ) ) div
                                                                            num:f( 18432 )
                                                                        )
                                                                    ) div
                                                                    num:f(
                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) ) *
                                                                        (node:when(
                                                                                   node:fallback(../../McuPll_Configuration/McuPllOdiv3_En,'true') = 'true',
                                                                                   node:fallback(../../McuPll_Configuration/McuPllOdiv3_Div,num:i(19)),
                                                                                   num:i(0)
                                                                                  ) + num:f(1))
                                                                        )
                                                                    )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.PeriphPLL.Limits.PHI3.High')"/>
                                                        <a:tst expr="&gt;=(ecu:get('MCU.PeriphPLL.Limits.PHI3.Low') * num:f(number(node:fallback(../../McuPll_Configuration/McuPllOdiv3_En,'false')='true')))"/>
                                                    </a:a>
                                                    <a:da name="RANGE" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (
                                                                (node:fallback(../../McuPll_Configuration/McuPllOdiv3_En,'false')='true') or
                                                                (num:f(node:fallback(., 0)) != 0)
                                                            )
                                                            and
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 133000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 133000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(number(node:fallback(../../McuPll_Configuration/McuPllOdiv3_En,'false')='true')) *
                                                                                (
                                                                                     num:f( num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FIRC_CLK')) * num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                                            num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FXOSC_CLK')) *
                                                                                            num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                                          ) *
                                                                                    num:f(
                                                                                        num:f(
                                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllDvMfi, num:f(65) ) ) +
                                                                                            num:f(
                                                                                                num:f( node:fallback(../../McuPll_Configuration/McuPllFdMfn, num:f(0) ) ) div
                                                                                                num:f( 18432 )
                                                                                            )
                                                                                        ) div
                                                                                        num:f(
                                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) ) *
                                                                                            (node:when(
                                                                                                       node:fallback(../../McuPll_Configuration/McuPllOdiv3_En,'true') = 'true',
                                                                                                       node:fallback(../../McuPll_Configuration/McuPllOdiv3_Div,num:i(19)),
                                                                                                       num:i(0)
                                                                                                      ) + num:f(1))
                                                                                            )
                                                                                        )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(133000000) ) &gt; num:i(ecu:get('MCU.PeriphPLL.Limits.PHI3.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(20600000) ) &lt; num:i(ecu:get('MCU.PeriphPLL.Limits.PHI3.Low'))
                                                                )
                                                            )
                                                        )
                                                        "
                                                        true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="PLL_PHI4_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Output value for <strong>PERIPH_PLL_PHI4_CLK frequency</strong>. <br />
                                                                The valid range is [0 ... 200] MHz, the valid value is 0 when disabled. <br />
                                                                Note: This field must not be manually modified. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PLL_PHI4 Frequency (Calculated)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:1a11e1fd-e79e-c07f-b81f-1568eb7e5fbd"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../../McuPll_Configuration/McuPllOdiv4_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(number(node:fallback(../../McuPll_Configuration/McuPllOdiv4_En,'false')='true')) *
                                                            (
                                                                 num:f( num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FIRC_CLK')) * num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                        num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FXOSC_CLK')) *
                                                                        num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                      ) *
                                                                num:f(
                                                                    num:f(
                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvMfi, num:f(65) ) ) +
                                                                        num:f(
                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllFdMfn, num:f(0) ) ) div
                                                                            num:f( 18432 )
                                                                        )
                                                                    ) div
                                                                    num:f(
                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) ) *
                                                                        (node:when(
                                                                                   node:fallback(../../McuPll_Configuration/McuPllOdiv4_En,'true') = 'true',
                                                                                   node:fallback(../../McuPll_Configuration/McuPllOdiv4_Div,num:i(19)),
                                                                                   num:i(0)
                                                                                  ) + num:f(1))
                                                                        )
                                                                    )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.PeriphPLL.Limits.PHI4.High')"/>
                                                        <a:tst expr="&gt;=(ecu:get('MCU.PeriphPLL.Limits.PHI4.Low') * num:f(number(node:fallback(../../McuPll_Configuration/McuPllOdiv4_En,'false')='true')))"/>
                                                    </a:a>
                                                    <a:da name="RANGE" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (
                                                                (node:fallback(../../McuPll_Configuration/McuPllOdiv4_En,'false')='true') or
                                                                (num:f(node:fallback(., 0)) != 0)
                                                            )
                                                            and
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 200000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 200000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(number(node:fallback(../../McuPll_Configuration/McuPllOdiv4_En,'false')='true')) *
                                                                                (
                                                                                     num:f( num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FIRC_CLK')) * num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                                            num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FXOSC_CLK')) *
                                                                                            num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                                          ) *
                                                                                    num:f(
                                                                                        num:f(
                                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllDvMfi, num:f(65) ) ) +
                                                                                            num:f(
                                                                                                num:f( node:fallback(../../McuPll_Configuration/McuPllFdMfn, num:f(0) ) ) div
                                                                                                num:f( 18432 )
                                                                                            )
                                                                                        ) div
                                                                                        num:f(
                                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) ) *
                                                                                            (node:when(
                                                                                                       node:fallback(../../McuPll_Configuration/McuPllOdiv4_En,'true') = 'true',
                                                                                                       node:fallback(../../McuPll_Configuration/McuPllOdiv4_Div,num:i(19)),
                                                                                                       num:i(0)
                                                                                                      ) + num:f(1))
                                                                                            )
                                                                                        )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(200000000) ) &gt; num:i(ecu:get('MCU.PeriphPLL.Limits.PHI4.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(20600000) ) &lt; num:i(ecu:get('MCU.PeriphPLL.Limits.PHI4.Low'))
                                                                )
                                                            )
                                                        )
                                                        "
                                                        true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="PLL_PHI5_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Output value for <strong>PERIPH_PLL_PHI5_CLK frequency</strong>. <br />
                                                                The valid range is [0 ... 500] MHz, the valid value is 0 when disabled. <br />
                                                                Note: This field must not be manually modified. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PLL_PHI5 Frequency (Calculated)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:1a11e1fd-e79e-507f-b81f-15feb7ecfbd"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../../McuPll_Configuration/McuPllOdiv5_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(number(node:fallback(../../McuPll_Configuration/McuPllOdiv5_En,'false')='true')) *
                                                            (
                                                                 num:f( num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FIRC_CLK')) * num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                        num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FXOSC_CLK')) *
                                                                        num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                      ) *
                                                                num:f(
                                                                    num:f(
                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvMfi, num:f(65) ) ) +
                                                                        num:f(
                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllFdMfn, num:f(0) ) ) div
                                                                            num:f( 18432 )
                                                                        )
                                                                    ) div
                                                                    num:f(
                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) ) *
                                                                        (node:when(
                                                                                   node:fallback(../../McuPll_Configuration/McuPllOdiv5_En,'true') = 'true',
                                                                                   node:fallback(../../McuPll_Configuration/McuPllOdiv5_Div,num:i(19)),
                                                                                   num:i(0)
                                                                                  ) + num:f(1))
                                                                        )
                                                                    )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.PeriphPLL.Limits.PHI5.High')"/>
                                                        <a:tst expr="&gt;=(ecu:get('MCU.PeriphPLL.Limits.PHI5.Low') * num:f(number(node:fallback(../../McuPll_Configuration/McuPllOdiv5_En,'false')='true')))"/>
                                                    </a:a>
                                                    <a:da name="RANGE" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (
                                                                (node:fallback(../../McuPll_Configuration/McuPllOdiv5_En,'false')='true') or
                                                                (num:f(node:fallback(., 0)) != 0)
                                                            )
                                                            and
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 500000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 500000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(number(node:fallback(../../McuPll_Configuration/McuPllOdiv5_En,'false')='true')) *
                                                                                (
                                                                                     num:f( num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FIRC_CLK')) * num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                                            num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FXOSC_CLK')) *
                                                                                            num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                                          ) *
                                                                                    num:f(
                                                                                        num:f(
                                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllDvMfi, num:f(65) ) ) +
                                                                                            num:f(
                                                                                                num:f( node:fallback(../../McuPll_Configuration/McuPllFdMfn, num:f(0) ) ) div
                                                                                                num:f( 18432 )
                                                                                            )
                                                                                        ) div
                                                                                        num:f(
                                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) ) *
                                                                                            (node:when(
                                                                                                       node:fallback(../../McuPll_Configuration/McuPllOdiv5_En,'true') = 'true',
                                                                                                       node:fallback(../../McuPll_Configuration/McuPllOdiv5_Div,num:i(19)),
                                                                                                       num:i(0)
                                                                                                      ) + num:f(1))
                                                                                            )
                                                                                        )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(500000000) ) &gt; num:i(ecu:get('MCU.PeriphPLL.Limits.PHI5.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(20600000) ) &lt; num:i(ecu:get('MCU.PeriphPLL.Limits.PHI5.Low'))
                                                                )
                                                            )
                                                        )
                                                        "
                                                        true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="PLL_PHI6_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Output value for <strong>PERIPH_PLL_PHI6_CLK frequency</strong>. <br />
                                                                Note: This field must not be manually modified. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PLL_PHI6 Frequency (Calculated)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:1a11e1fd-e79e-507f-b81f-16efc2efcbd"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../../McuPll_Configuration/McuPllOdiv6_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(number(node:fallback(../../McuPll_Configuration/McuPllOdiv6_En,'false')='true')) *
                                                            (
                                                                 num:f( num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FIRC_CLK')) * num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                        num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FXOSC_CLK')) *
                                                                        num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                      ) *
                                                                num:f(
                                                                    num:f(
                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvMfi, num:f(65) ) ) +
                                                                        num:f(
                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllFdMfn, num:f(0) ) ) div
                                                                            num:f( 18432 )
                                                                        )
                                                                    ) div
                                                                    num:f(
                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) ) *
                                                                        (node:when(
                                                                                   node:fallback(../../McuPll_Configuration/McuPllOdiv6_En,'true') = 'true',
                                                                                   node:fallback(../../McuPll_Configuration/McuPllOdiv6_Div,num:i(19)),
                                                                                   num:i(0)
                                                                                  ) + num:f(1))
                                                                        )
                                                                    )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.PeriphPLL.Limits.PHI6.High')"/>
                                                        <a:tst expr="&gt;=(ecu:get('MCU.PeriphPLL.Limits.PHI6.Low') * num:f(number(node:fallback(../../McuPll_Configuration/McuPllOdiv6_En,'false')='true')))"/>
                                                    </a:a>
                                                    <a:da name="RANGE" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (
                                                                (node:fallback(../../McuPll_Configuration/McuPllOdiv6_En,'false')='true') or
                                                                (num:f(node:fallback(., 0)) != 0)
                                                            )
                                                            and
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 100000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 100000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(number(node:fallback(../../McuPll_Configuration/McuPllOdiv6_En,'false')='true')) *
                                                                                (
                                                                                     num:f( num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FIRC_CLK')) * num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                                            num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FXOSC_CLK')) *
                                                                                            num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                                          ) *
                                                                                    num:f(
                                                                                        num:f(
                                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllDvMfi, num:f(65) ) ) +
                                                                                            num:f(
                                                                                                num:f( node:fallback(../../McuPll_Configuration/McuPllFdMfn, num:f(0) ) ) div
                                                                                                num:f( 18432 )
                                                                                            )
                                                                                        ) div
                                                                                        num:f(
                                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) ) *
                                                                                            (node:when(
                                                                                                       node:fallback(../../McuPll_Configuration/McuPllOdiv6_En,'true') = 'true',
                                                                                                       node:fallback(../../McuPll_Configuration/McuPllOdiv6_Div,num:i(19)),
                                                                                                       num:i(0)
                                                                                                      ) + num:f(1))
                                                                                            )
                                                                                        )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(100000000) ) &gt; num:i(ecu:get('MCU.PeriphPLL.Limits.PHI6.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(20600000) ) &lt; num:i(ecu:get('MCU.PeriphPLL.Limits.PHI6.Low'))
                                                                )
                                                            )
                                                        )
                                                        "
                                                        true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="PLL_PHI7_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Output value for <strong>PERIPH_PLL_PHI7_CLK frequency</strong>. <br />
                                                                The valid range is [0 ... 100] MHz, the valid value is 0 when disabled. <br />
                                                                Note: This field must not be manually modified. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PLL_PHI7 Frequency (Calculated)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:1a11e1fd-e79e-507f-b81f-51fbe2cfead"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../../McuPll_Configuration/McuPllOdiv7_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(number(node:fallback(../../McuPll_Configuration/McuPllOdiv7_En,'false')='true')) *
                                                            (
                                                                 num:f( num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FIRC_CLK')) * num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                        num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FXOSC_CLK')) *
                                                                        num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                      ) *
                                                                num:f(
                                                                    num:f(
                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvMfi, num:f(65) ) ) +
                                                                        num:f(
                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllFdMfn, num:f(0) ) ) div
                                                                            num:f( 18432 )
                                                                        )
                                                                    ) div
                                                                    num:f(
                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) ) *
                                                                        (node:when(
                                                                                   node:fallback(../../McuPll_Configuration/McuPllOdiv7_En,'true') = 'true',
                                                                                   node:fallback(../../McuPll_Configuration/McuPllOdiv7_Div, num:i(19)),
                                                                                   num:i(0)
                                                                                  ) + num:f(1))
                                                                        )
                                                                    )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.PeriphPLL.Limits.PHI7.High')"/>
                                                        <a:tst expr="&gt;=(ecu:get('MCU.PeriphPLL.Limits.PHI7.Low') * num:f(number(node:fallback(../../McuPll_Configuration/McuPllOdiv7_En,'false')='true')))"/>
                                                    </a:a>
                                                    <a:da name="RANGE" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (
                                                                (node:fallback(../../McuPll_Configuration/McuPllOdiv7_En,'false')='true') or
                                                                (num:f(node:fallback(., 0)) != 0)
                                                            )
                                                            and
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 100000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 100000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(number(node:fallback(../../McuPll_Configuration/McuPllOdiv7_En,'false')='true')) *
                                                                                (
                                                                                     num:f( num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FIRC_CLK')) * num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                                            num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FXOSC_CLK')) *
                                                                                            num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                                          ) *
                                                                                    num:f(
                                                                                        num:f(
                                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllDvMfi, num:f(65) ) ) +
                                                                                            num:f(
                                                                                                num:f( node:fallback(../../McuPll_Configuration/McuPllFdMfn, num:f(0) ) ) div
                                                                                                num:f( 18432 )
                                                                                            )
                                                                                        ) div
                                                                                        num:f(
                                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) ) *
                                                                                            (node:when(
                                                                                                       node:fallback(../../McuPll_Configuration/McuPllOdiv7_En,'true') = 'true',
                                                                                                       node:fallback(../../McuPll_Configuration/McuPllOdiv7_Div,num:i(19)),
                                                                                                       num:i(0)
                                                                                                      ) + num:f(1))
                                                                                            )
                                                                                        )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(100000000) ) &gt; num:i(ecu:get('MCU.PeriphPLL.Limits.PHI7.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(20600000) ) &lt; num:i(ecu:get('MCU.PeriphPLL.Limits.PHI7.Low'))
                                                                )
                                                            )
                                                        )
                                                        "
                                                        true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="PLL_VCO_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Output value for <strong>PERIPH_VCO frequency</strong>. <br />
                                                                The valid range is [1300 ... 2000] MHz, the valid value is 0 when disabled. <br />
                                                                Note: This field must not be manually modified. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PLL_VCO Frequency (Calculated)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:31175786-4ea7-46fb-9855-f7c7d09ddd89"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../../McuPLLEnabled, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                            num:f(
                                                                num:f(number(node:fallback(../../McuPLLEnabled, 'false') = 'true')) *
                                                                (
                                                                    num:f(
                                                                        num:f( num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FIRC_CLK')) * num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                               num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FXOSC_CLK')) *
                                                                               num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                             ) div
                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) )
                                                                    ) *
                                                                    num:f(
                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvMfi, num:f(65) ) ) +
                                                                        num:f(
                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllFdMfn, num:f(0) ) ) div
                                                                            num:f(18432)
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                        "/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.PeriphPLL.Limits.VCO.High')"/>
                                                        <a:tst expr="&gt;=(ecu:get('MCU.PeriphPLL.Limits.VCO.Low') * num:f(number(node:fallback(../../McuPLLEnabled, 'false') = 'true')))"/>
                                                    </a:a>
                                                    <a:da name="RANGE" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (
                                                                (node:fallback(../../McuPLLEnabled,'false') = 'true') or
                                                                (num:f(node:fallback(., 0)) != 0)
                                                            )
                                                            and
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 2000000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 2000000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(number(node:fallback(../../McuPLLEnabled, 'false') = 'true')) *
                                                                                (
                                                                                    num:f(
                                                                                        num:f( num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FIRC_CLK')) * num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                                               num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FXOSC_CLK')) *
                                                                                               num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                                             ) div
                                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) )
                                                                                    ) *
                                                                                    num:f(
                                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvMfi, num:f(65) ) ) +
                                                                                        num:f(
                                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllFdMfn, num:f(0) ) ) div
                                                                                            num:f(18432)
                                                                                        )
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(2000000000) ) &gt; num:i(ecu:get('MCU.PeriphPLL.Limits.VCO.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(1300000000) ) &lt; num:i(ecu:get('MCU.PeriphPLL.Limits.VCO.Low'))
                                                                )
                                                            )
                                                        )
                                                        "
                                                        true="Please press the button to calculate the value automatically."/>
                                                    <a:tst expr="
                                                        (
                                                            (node:fallback(../../McuPLLEnabled,'false')='false') and
                                                            (num:f(node:fallback(., 0)) != 0)
                                                        )"
                                                        true="Please enable PeriphPLL ('McuPLLEnabled') before calculating the frequency."/>
                                                    </a:da>
                                                </v:var>
                                            </v:ctr>
                                        </v:ctr>

                                        <v:ctr name="McuPeriphDfs" type="IDENTIFIABLE">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        This container provides the specific configuration for the PERIPH DFS.
                                                        Note: Implementation Specific Container.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="TAB" value="McuPeriphDFS"/>
                                            <a:a name="UUID" value="ECUC:bfa6250f-717b-4911-a690-6cb59e8da241"/>

                                            <v:ctr name="McuDfs_1" type="IDENTIFIABLE">
                                                <a:a name="UUID" value="ECUC:2a783fae-238a-4382-9124-d57c31d081b2"/>
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            Configuration values for DFS_1.  <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>

                                                <v:var name="McuDFSUnderMcuControl" type="BOOLEAN">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            Set this to TRUE if this DFS is under mcu control <br />
                                                            If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                            The user must still set the values - they are used by the clock reference points  <br />
                                                            Note: Implementation Specific Parameter. <br />
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="LABEL" value="PERIPH DFS1 under MCU control"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:1be167fc-e06b-4db8-a8d7-8750378b24b3"/>
                                                <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="(ecu:get('MCU.PeriphDFS.Terminals.DFS1.Connected') = 'true') or ((ecu:get('MCU.PeriphDFS.Terminals.DFS1.Connected') = 'false') and (node:fallback(., 'false') = 'true')) "/>
                                                </a:a>
                                                <a:da name="DEFAULT" type="XPath">
                                                    <a:tst expr="(node:fallback(../../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'false') and (ecu:get('MCU.PeriphDFS.Terminals.DFS1.Connected') = 'true')"/>
                                                </a:da>
                                                <a:da name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (node:fallback(., 'false') = 'true') and
                                                            (node:fallback(../../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'true')
                                                        )"
                                                           true="PeriphDFS cannot be under MCU control if McuNoPll is enabled."/>
                                                    <a:tst expr="
                                                        (
                                                            ( node:fallback(., 'false') = 'true' ) and
                                                            ( node:fallback(as:modconf('Mcu')[1]/McuGeneralConfiguration/McuControlledClocksConfiguration/McuDfs1UnderMcuControl, 'false') = 'false' )
                                                        )"
                                                        true="The field McuGeneralConfiguration/McuControlledClocksConfiguration/McuDfs1UnderMcuControl must be set to 'true' when PERIPH DFS1 is under MCU control."/>
                                                </a:da>
                                                </v:var>

                                                <v:var name="McuDFSPort_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                DFS1 Output Port Enable. <br />
                                                                This field specifies whether MCU will control the configuration and functionality of PERIPH_DFS1_CLK inside the driver. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="DFS1 Output Port Enable"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:84848bc4-c913-81d8-9a9d-b74b555c6734"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="(ecu:get('MCU.PeriphDFS.Terminals.DFS1.Connected') = 'true') or ((ecu:get('MCU.PeriphDFS.Terminals.DFS1.Connected') = 'false') and (node:fallback(., 'false') = 'true')) "/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'true')
                                                            )"
                                                            true="PeriphDFS cannot be enabled if McuNoPll is enabled."/>
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../../../McuPll_1/McuPLLEnabled, 'false') = 'false')
                                                            )"
                                                            true="PeriphDFS cannot be enabled if PeriphPLL is disabled."/>
                                                        <a:tst expr="( (ecu:get('MCU.PeriphDFS.Terminals.DFS1.Connected') = 'false') and (node:fallback(., 'false') = 'true'))"
                                                            true="This feature is not support on this platform. The value of this node should be set to false."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuDFSPortMfi" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This field provides the integer part of division factor for port<italic>n</italic>. - DFS_DVPORT0[MFI]. <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="DFS1 MFI"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:3c5df198-8e41-497f-ac8f-0165201a8a65"/>
                                                    <a:da name="DEFAULT" value="1"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuDFSPort_En, 'false') = 'true'"/>
                                                    </a:a>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=255"/>
                                                        <a:tst expr="&gt;=1"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuDFSPortMfn" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This field provides the fractional part of division factor for port<italic>n</italic>. - DFS_DVPORT0[MFN]. <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="DFS1 MFN"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:3a4afd8a-8efe-4d46-872e-3c5d1bcadaf6"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuDFSPort_En, 'false') = 'true'"/>
                                                    </a:a>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=35"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="DFS_CLK_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Output value for <strong>PERIPH_DFS1_CLK frequency</strong>. <br />
                                                                For S32R45, the valid range is [133... 532] MHz, <br />
                                                                For S32GXXX, the valid range is [532 ... 800] MHz, <br />
                                                                Note: This field must not be manually modified. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="DFS1_CLK Frequency (Calculated)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:cc5ec348-9a9e-4233-90ec-a8ea5b278b97"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuDFSPort_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(number(node:fallback(../McuDFSPort_En,'false')='true')) *
                                                            (
                                                                num:f( node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_VCO_Frequency, num:f(1300000000) ) ) div
                                                                num:f( num:f(2) *
                                                                    num:f(
                                                                        num:f( node:fallback(../McuDFSPortMfi, num:f(5) ) ) +
                                                                        num:f(
                                                                            num:f( node:fallback(../McuDFSPortMfn, num:f(0) ) ) div
                                                                            num:f(36)
                                                                             )
                                                                         )
                                                                     )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.PeriphDFS.Limits.DFS1.High')"/>
                                                        <a:tst expr="&gt;=(ecu:get('MCU.PeriphDFS.Limits.DFS1.Low') * num:f(number(node:fallback(../McuDFSPort_En,'false')='true')))"/>
                                                    </a:a>
                                                    <a:da name="RANGE" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (
                                                                (node:fallback(../McuDFSPort_En,'false')='true') or
                                                                (num:f(node:fallback(., 0)) != 0)
                                                            )
                                                            and
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 80000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 80000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(number(node:fallback(../McuDFSPort_En,'false')='true')) *
                                                                                (
                                                                                    num:f( node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_VCO_Frequency, num:f(1300000000) ) ) div
                                                                                    num:f( num:f(2) *
                                                                                        num:f(
                                                                                            num:f( node:fallback(../McuDFSPortMfi, num:f(5) ) ) +
                                                                                            num:f(
                                                                                                num:f( node:fallback(../McuDFSPortMfn, num:f(0) ) ) div
                                                                                                num:f(36)
                                                                                                 )
                                                                                             )
                                                                                         )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(80000000) ) &gt; num:i(ecu:get('MCU.PeriphDFS.Limits.DFS1.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(80000000) ) &lt; num:i(ecu:get('MCU.PeriphDFS.Limits.DFS1.Low'))
                                                                )
                                                            )
                                                        )
                                                        "
                                                        true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                </v:var>
                                            </v:ctr>

                                            <v:ctr name="McuDfs_2" type="IDENTIFIABLE">
                                                <a:a name="UUID" value="ECUC:2a783fae-238a-4382-9124-d57c31d081b8"/>
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            Configuration values for DFS_2.  <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>

                                                <v:var name="McuDFSUnderMcuControl" type="BOOLEAN">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            Set this to TRUE if this DFS is under mcu control <br />
                                                            If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                            The user must still set the values - they are used by the clock reference points  <br />
                                                            Note: Implementation Specific Parameter. <br />
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="LABEL" value="PERIPH DFS2 under MCU control"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:1be167fc-e06b-4db8-a8d7-8750378b24b9"/>
                                                <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="(ecu:get('MCU.PeriphDFS.Terminals.DFS2.Connected') = 'true') or ((ecu:get('MCU.PeriphDFS.Terminals.DFS2.Connected') = 'false') and (node:fallback(., 'false') = 'true')) "/>
                                                </a:a>
                                                <a:da name="DEFAULT" type="XPath">
                                                    <a:tst expr="(node:fallback(../../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'false') and (ecu:get('MCU.PeriphDFS.Terminals.DFS2.Connected') = 'true')"/>
                                                </a:da>
                                                <a:da name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (node:fallback(., 'false') = 'true') and
                                                            (node:fallback(../../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'true')
                                                        )"
                                                           true="PeriphDFS2 cannot be under MCU control if McuNoPll is enabled."/>
                                                    <a:tst expr="
                                                        (
                                                            ( node:fallback(., 'false') = 'true' ) and
                                                            ( node:fallback(as:modconf('Mcu')[1]/McuGeneralConfiguration/McuControlledClocksConfiguration/McuDfs1UnderMcuControl, 'false') = 'false' )
                                                        )"
                                                        true="The field McuGeneralConfiguration/McuControlledClocksConfiguration/McuDfs1UnderMcuControl must be set to 'true' when PERIPH DFS2 is under MCU control."/>
                                                </a:da>
                                                </v:var>

                                                <v:var name="McuDFSPort_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                DFS2 Output Port Enable. <br />
                                                                This field specifies whether MCU will control the configuration and functionality of PERIPH_DFS2_CLK inside the driver. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="DFS2 Output Port Enable"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:84848bc4-c913-81d8-9a9d-b74b555c6710"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="(ecu:get('MCU.PeriphDFS.Terminals.DFS2.Connected') = 'true') or ((ecu:get('MCU.PeriphDFS.Terminals.DFS2.Connected') = 'false') and (node:fallback(., 'false') = 'true')) "/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'true')
                                                            )"
                                                            true="PeriphDFS cannot be enabled if McuNoPll is enabled."/>
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../../../McuPll_1/McuPLLEnabled, 'false') = 'false')
                                                            )"
                                                            true="PeriphDFS cannot be enabled if PeriphPLL is disabled."/>
                                                        <a:tst expr="( (ecu:get('MCU.PeriphDFS.Terminals.DFS2.Connected') = 'false') and (node:fallback(., 'false') = 'true'))"
                                                            true="This feature is not support on this platform. The value of this node should be set to false."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuDFSPortMfi" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This field provides the integer part of division factor for port<italic>n</italic>. - DFS_DVPORT1[MFI]. <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="DFS2 MFI"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:3c5df198-8e41-497f-ac8f-0165201a8a11"/>
                                                    <a:da name="DEFAULT" value="1"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuDFSPort_En, 'false') = 'true'"/>
                                                    </a:a>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=255"/>
                                                        <a:tst expr="&gt;=1"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuDFSPortMfn" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This field provides the fractional part of division factor for port<italic>n</italic>. - DFS_DVPORT1[MFN]. <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="DFS2 MFN"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:3a4afd8a-8efe-4d46-872e-3c5d1bcada12"/>
                                                    <a:da name="DEFAULT" value="6"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuDFSPort_En, 'false') = 'true'"/>
                                                    </a:a>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=35"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="DFS_CLK_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Output value for <strong>PERIPH_DFS2_CLK frequency</strong>. <br />
                                                                The valid range is [40 ... 628] MHz, the valid value is 0 when disabled. <br />
                                                                Note: This field must not be manually modified. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="DFS2_CLK Frequency (Calculated)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:cc5ec348-9a9e-4233-90ec-a8ea5b278b13"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuDFSPort_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(number(node:fallback(../McuDFSPort_En,'false')='true')) *
                                                            (
                                                                num:f( node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_VCO_Frequency, num:f(1300000000) ) ) div
                                                                num:f( num:f(2) *
                                                                    num:f(
                                                                        num:f( node:fallback(../McuDFSPortMfi, num:f(5) ) ) +
                                                                        num:f(
                                                                            num:f( node:fallback(../McuDFSPortMfn, num:f(0) ) ) div
                                                                            num:f(36)
                                                                             )
                                                                         )
                                                                     )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.PeriphDFS.Limits.DFS2.High')"/>
                                                        <a:tst expr="&gt;=(ecu:get('MCU.PeriphDFS.Limits.DFS2.Low') * num:f(number(node:fallback(../McuDFSPort_En,'false')='true')))"/>
                                                    </a:a>
                                                    <a:da name="RANGE" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (
                                                                (node:fallback(../McuDFSPort_En,'false')='true') or
                                                                (num:f(node:fallback(., 0)) != 0)
                                                            )
                                                            and
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 80000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 80000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(number(node:fallback(../McuDFSPort_En,'false')='true')) *
                                                                                (
                                                                                    num:f( node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_VCO_Frequency, num:f(1300000000) ) ) div
                                                                                    num:f( num:f(2) *
                                                                                        num:f(
                                                                                            num:f( node:fallback(../McuDFSPortMfi, num:f(5) ) ) +
                                                                                            num:f(
                                                                                                num:f( node:fallback(../McuDFSPortMfn, num:f(0) ) ) div
                                                                                                num:f(36)
                                                                                                 )
                                                                                             )
                                                                                         )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(80000000) ) &gt; num:i(ecu:get('MCU.PeriphDFS.Limits.DFS2.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(80000000) ) &lt; num:i(ecu:get('MCU.PeriphDFS.Limits.DFS2.Low'))
                                                                )
                                                            )
                                                        )
                                                        "
                                                        true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                </v:var>
                                            </v:ctr>

                                            <v:ctr name="McuDfs_3" type="IDENTIFIABLE">
                                                <a:a name="UUID" value="ECUC:2a783fae-238a-4382-9124-d57c31d09114"/>
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            Configuration values for DFS_3.  <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>

                                                <v:var name="McuDFSUnderMcuControl" type="BOOLEAN">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            Set this to TRUE if this DFS is under mcu control <br />
                                                            If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                            The user must still set the values - they are used by the clock reference points  <br />
                                                            Note: Implementation Specific Parameter. <br />
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="LABEL" value="PERIPH DFS3 under MCU control"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:1be167fc-e06b-4db8-a8d7-8750378b1115"/>
                                                <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="(ecu:get('MCU.PeriphDFS.Terminals.DFS3.Connected') = 'true') or ((ecu:get('MCU.PeriphDFS.Terminals.DFS3.Connected') = 'false') and (node:fallback(., 'false') = 'true')) "/>
                                                </a:a>
                                                <a:da name="DEFAULT" type="XPath">
                                                    <a:tst expr="(node:fallback(../../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'false') and (ecu:get('MCU.PeriphDFS.Terminals.DFS3.Connected') = 'true')"/>
                                                </a:da>
                                                <a:da name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (node:fallback(., 'false') = 'true') and
                                                            (node:fallback(../../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'true')
                                                        )"
                                                           true="PeriphDFS cannot be under MCU control if McuNoPll is enabled."/>
                                                    <a:tst expr="
                                                        (
                                                            ( node:fallback(., 'false') = 'true' ) and
                                                            ( node:fallback(as:modconf('Mcu')[1]/McuGeneralConfiguration/McuControlledClocksConfiguration/McuDfs1UnderMcuControl, 'false') = 'false' )
                                                        )"
                                                        true="The field McuGeneralConfiguration/McuControlledClocksConfiguration/McuDfs1UnderMcuControl must be set to 'true' when PERIPH DFS3 is under MCU control."/>
                                                </a:da>
                                                </v:var>

                                                <v:var name="McuDFSPort_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                DFS3 Output Port Enable. <br />
                                                                This field specifies whether MCU will control the configuration and functionality of PERIPH_DFS3_CLK inside the driver. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="DFS3 Output Port Enable"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:84848bc4-c913-81d8-9a9d-b74b555c2317"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="(ecu:get('MCU.PeriphDFS.Terminals.DFS3.Connected') = 'true') or ((ecu:get('MCU.PeriphDFS.Terminals.DFS3.Connected') = 'false') and (node:fallback(., 'false') = 'true')) "/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'true')
                                                            )"
                                                            true="PeriphDFS cannot be enabled if McuNoPll is enabled."/>
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../../../McuPll_1/McuPLLEnabled, 'false') = 'false')
                                                            )"
                                                            true="PeriphDFS cannot be enabled if PeriphPLL is disabled."/>
                                                        <a:tst expr="( (ecu:get('MCU.PeriphDFS.Terminals.DFS3.Connected') = 'false') and (node:fallback(., 'false') = 'true'))"
                                                            true="This feature is not support on this platform. The value of this node should be set to false."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuDFSPortMfi" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This field provides the integer part of division factor for port<italic>n</italic>. - DFS_DVPORT2[MFI]. <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="DFS3 MFI"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:3c5df198-8e41-497f-ac8f-0165201a8918"/>
                                                    <a:da name="DEFAULT" value="1"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuDFSPort_En, 'false') = 'true'"/>
                                                    </a:a>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=255"/>
                                                        <a:tst expr="&gt;=1"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuDFSPortMfn" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This field provides the fractional part of division factor for port<italic>n</italic>. - DFS_DVPORT2[MFN]. <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="DFS3 MFN"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:3a4afd8a-8efe-4d46-872e-3c5d1bca1219"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuDFSPort_En, 'false') = 'true'"/>
                                                    </a:a>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=35"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="DFS_CLK_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Output value for <strong>PERIPH_DFS3_CLK frequency</strong>. <br />
                                                                For S32R45, the valid range is [52 ... 208] MHz, <br />
                                                                For S32GXXX, the valid range is [416 ... 800] MHz, <br />
                                                                Note: This field must not be manually modified. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="DFS3_CLK Frequency (Calculated)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:cc5ec348-9a9e-4233-90ec-a8ea5b274220"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuDFSPort_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(number(node:fallback(../McuDFSPort_En,'false')='true')) *
                                                            (
                                                                num:f( node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_VCO_Frequency, num:f(1300000000) ) ) div
                                                                num:f( num:f(2) *
                                                                    num:f(
                                                                        num:f( node:fallback(../McuDFSPortMfi, num:f(5) ) ) +
                                                                        num:f(
                                                                            num:f( node:fallback(../McuDFSPortMfn, num:f(0) ) ) div
                                                                            num:f(36)
                                                                             )
                                                                         )
                                                                     )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.PeriphDFS.Limits.DFS3.High')"/>
                                                        <a:tst expr="&gt;=(ecu:get('MCU.PeriphDFS.Limits.DFS3.Low') * num:f(number(node:fallback(../McuDFSPort_En,'false')='true')))"/>
                                                    </a:a>
                                                    <a:da name="RANGE" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (
                                                                (node:fallback(../McuDFSPort_En,'false')='true') or
                                                                (num:f(node:fallback(., 0)) != 0)
                                                            )
                                                            and
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 80000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 80000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(number(node:fallback(../McuDFSPort_En,'false')='true')) *
                                                                                (
                                                                                    num:f( node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_VCO_Frequency, num:f(1300000000) ) ) div
                                                                                    num:f( num:f(2) *
                                                                                        num:f(
                                                                                            num:f( node:fallback(../McuDFSPortMfi, num:f(5) ) ) +
                                                                                            num:f(
                                                                                                num:f( node:fallback(../McuDFSPortMfn, num:f(0) ) ) div
                                                                                                num:f(36)
                                                                                                 )
                                                                                             )
                                                                                         )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(80000000) ) &gt; num:i(ecu:get('MCU.PeriphDFS.Limits.DFS3.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(80000000) ) &lt; num:i(ecu:get('MCU.PeriphDFS.Limits.DFS3.Low'))
                                                                )
                                                            )
                                                        )
                                                        "
                                                        true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                </v:var>
                                            </v:ctr>

                                            <v:ctr name="McuDfs_4" type="IDENTIFIABLE">
                                                <a:a name="UUID" value="ECUC:2a783fae-238a-4382-9124-d57c31d02921"/>
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            Configuration values for DFS_4.  <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>

                                                <v:var name="McuDFSUnderMcuControl" type="BOOLEAN">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            Set this to TRUE if this DFS is under mcu control <br />
                                                            If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                            The user must still set the values - they are used by the clock reference points  <br />
                                                            Note: Implementation Specific Parameter. <br />
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="LABEL" value="PERIPH DFS4 under MCU control"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:1be167fc-e06b-4db8-a8d7-8750378b2222"/>
                                                <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="(ecu:get('MCU.PeriphDFS.Terminals.DFS4.Connected') = 'true') or ((ecu:get('MCU.PeriphDFS.Terminals.DFS4.Connected') = 'false') and (node:fallback(., 'false') = 'true')) "/>
                                                </a:a>
                                                <a:da name="DEFAULT" type="XPath">
                                                    <a:tst expr="(node:fallback(../../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'false') and (ecu:get('MCU.PeriphDFS.Terminals.DFS4.Connected') = 'true')"/>
                                                </a:da>
                                                <a:da name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (node:fallback(., 'false') = 'true') and
                                                            (node:fallback(../../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'true')
                                                        )"
                                                           true="PeriphDFS cannot be under MCU control if McuNoPll is enabled."/>
                                                    <a:tst expr="
                                                        (
                                                            ( node:fallback(., 'false') = 'true' ) and
                                                            ( node:fallback(as:modconf('Mcu')[1]/McuGeneralConfiguration/McuControlledClocksConfiguration/McuDfs1UnderMcuControl, 'false') = 'false' )
                                                        )"
                                                        true="The field McuGeneralConfiguration/McuControlledClocksConfiguration/McuDfs1UnderMcuControl must be set to 'true' when PERIPH DFS4 is under MCU control."/>
                                                </a:da>
                                                </v:var>

                                                <v:var name="McuDFSPort_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                DFS4 Output Port Enable. <br />
                                                                This field specifies whether MCU will control the configuration and functionality of PERIPH_DFS4_CLK inside the driver. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="DFS4 Output Port Enable"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:84848bc4-c913-81d8-9a9d-b74b555c1223"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="(ecu:get('MCU.PeriphDFS.Terminals.DFS4.Connected') = 'true') or ((ecu:get('MCU.PeriphDFS.Terminals.DFS4.Connected') = 'false') and (node:fallback(., 'false') = 'true')) "/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'true')
                                                            )"
                                                            true="PeriphDFS cannot be enabled if McuNoPll is enabled."/>
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../../../McuPll_1/McuPLLEnabled, 'false') = 'false')
                                                            )"
                                                            true="PeriphDFS cannot be enabled if PeriphPLL is disabled."/>
                                                        <a:tst expr="( (ecu:get('MCU.PeriphDFS.Terminals.DFS4.Connected') = 'false') and (node:fallback(., 'false') = 'true'))"
                                                            true="This feature is not support on this platform. The value of this node should be set to false."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuDFSPortMfi" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This field provides the integer part of division factor for port<italic>n</italic>. - DFS_DVPORT3[MFI]. <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="DFS4 MFI"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:3a4afd8a-8efe-4d46-e256-3c5d1bcaad24"/>
                                                    <a:da name="DEFAULT" value="1"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuDFSPort_En, 'false') = 'true'"/>
                                                    </a:a>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=255"/>
                                                        <a:tst expr="&gt;=1"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuDFSPortMfn" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This field provides the fractional part of division factor for port<italic>n</italic>. - DFS_DVPORT3[MFN]. <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="DFS4 MFN"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:3a4afd8a-8efe-4d46-872e-3c5d1bcaad25"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuDFSPort_En, 'false') = 'true'"/>
                                                    </a:a>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=35"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="DFS_CLK_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Output value for <strong>PERIPH_DFS4_CLK frequency</strong>. <br />
                                                                The valid range is [2.54 ... 600] MHz, the valid value is 0 when disabled. <br />
                                                                Note: This field must not be manually modified. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="DFS4_CLK Frequency (Calculated)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:cc5ec348-9a9e-4233-90ec-a8ea5b27ac26"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuDFSPort_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(number(node:fallback(../McuDFSPort_En,'false')='true')) *
                                                            (
                                                                num:f( node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_VCO_Frequency, num:f(1300000000) ) ) div
                                                                num:f( num:f(2) *
                                                                    num:f(
                                                                        num:f( node:fallback(../McuDFSPortMfi, num:f(5) ) ) +
                                                                        num:f(
                                                                            num:f( node:fallback(../McuDFSPortMfn, num:f(0) ) ) div
                                                                            num:f(36)
                                                                             )
                                                                         )
                                                                     )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.PeriphDFS.Limits.DFS4.High')"/>
                                                        <a:tst expr="&gt;=(ecu:get('MCU.PeriphDFS.Limits.DFS4.Low') * num:f(number(node:fallback(../McuDFSPort_En,'false')='true')))"/>
                                                    </a:a>
                                                    <a:da name="RANGE" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (
                                                                (node:fallback(../McuDFSPort_En,'false')='true') or
                                                                (num:f(node:fallback(., 0)) != 0)
                                                            )
                                                            and
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 80000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 80000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(number(node:fallback(../McuDFSPort_En,'false')='true')) *
                                                                                (
                                                                                    num:f( node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_VCO_Frequency, num:f(1300000000) ) ) div
                                                                                    num:f( num:f(2) *
                                                                                        num:f(
                                                                                            num:f( node:fallback(../McuDFSPortMfi, num:f(5) ) ) +
                                                                                            num:f(
                                                                                                num:f( node:fallback(../McuDFSPortMfn, num:f(0) ) ) div
                                                                                                num:f(36)
                                                                                                 )
                                                                                             )
                                                                                         )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(80000000) ) &gt; num:i(ecu:get('MCU.PeriphDFS.Limits.DFS4.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(80000000) ) &lt; num:i(ecu:get('MCU.PeriphDFS.Limits.DFS4.Low'))
                                                                )
                                                            )
                                                        )
                                                        "
                                                        true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                </v:var>
                                            </v:ctr>

                                            <v:ctr name="McuDfs_5" type="IDENTIFIABLE">
                                                <a:a name="UUID" value="ECUC:2a783fae-238a-4382-9124-d57c31d0ac27"/>
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            Configuration values for DFS_5.  <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>

                                                <v:var name="McuDFSUnderMcuControl" type="BOOLEAN">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            Set this to TRUE if this DFS is under mcu control <br />
                                                            If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                            The user must still set the values - they are used by the clock reference points  <br />
                                                            Note: Implementation Specific Parameter. <br />
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="LABEL" value="PERIPH DFS5 under MCU control"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:1be167fc-e06b-4db8-a8d7-8750378b3328"/>
                                                <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="(ecu:get('MCU.PeriphDFS.Terminals.DFS5.Connected') = 'true') or ((ecu:get('MCU.PeriphDFS.Terminals.DFS5.Connected') = 'false') and (node:fallback(., 'false') = 'true')) "/>
                                                </a:a>
                                                <a:da name="DEFAULT" type="XPath">
                                                    <a:tst expr="(node:fallback(../../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'false') and (ecu:get('MCU.PeriphDFS.Terminals.DFS5.Connected') = 'true')"/>
                                                </a:da>
                                                <a:da name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (node:fallback(., 'false') = 'true') and
                                                            (node:fallback(../../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'true')
                                                        )"
                                                           true="PeriphDFS cannot be under MCU control if McuNoPll is enabled."/>
                                                    <a:tst expr="
                                                        (
                                                            ( node:fallback(., 'false') = 'true' ) and
                                                            ( node:fallback(as:modconf('Mcu')[1]/McuGeneralConfiguration/McuControlledClocksConfiguration/McuDfs1UnderMcuControl, 'false') = 'false' )
                                                        )"
                                                        true="The field McuGeneralConfiguration/McuControlledClocksConfiguration/McuDfs1UnderMcuControl must be set to 'true' when PERIPH DFS5 is under MCU control."/>
                                                </a:da>
                                                </v:var>

                                                <v:var name="McuDFSPort_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                DFS5 Output Port Enable. <br />
                                                                This field specifies whether MCU will control the configuration and functionality of PERIPH_DFS5_CLK inside the driver. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="DFS5 Output Port Enable"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:84848bc4-c913-81d8-9a9d-b74b555cac29"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="(ecu:get('MCU.PeriphDFS.Terminals.DFS5.Connected') = 'true') or ((ecu:get('MCU.PeriphDFS.Terminals.DFS5.Connected') = 'false') and (node:fallback(., 'false') = 'true')) "/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'true')
                                                            )"
                                                            true="PeriphDFS cannot be enabled if McuNoPll is enabled."/>
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../../../McuPll_1/McuPLLEnabled, 'false') = 'false')
                                                            )"
                                                            true="PeriphDFS cannot be enabled if PeriphPLL is disabled."/>
                                                        <a:tst expr="( (ecu:get('MCU.PeriphDFS.Terminals.DFS5.Connected') = 'false') and (node:fallback(., 'false') = 'true'))"
                                                            true="This feature is not support on this platform. The value of this node should be set to false."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuDFSPortMfi" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This field provides the integer part of division factor for port<italic>n</italic>. - DFS_DVPORT4[MFI]. <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="DFS5 MFI"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:3a4afd8a-8efe-4d46-872e-3c5d1bcabb30"/>
                                                    <a:da name="DEFAULT" value="1"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuDFSPort_En, 'false') = 'true'"/>
                                                    </a:a>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=255"/>
                                                        <a:tst expr="&gt;=1"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuDFSPortMfn" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This field provides the fractional part of division factor for port<italic>n</italic>. - DFS_DVPORT4[MFN]. <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="DFS5 MFN"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:3a4afd8a-8efe-4d46-872e-3c5d1bca31"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuDFSPort_En, 'false') = 'true'"/>
                                                    </a:a>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=35"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="DFS_CLK_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Output value for <strong>PERIPH_DFS5_CLK frequency</strong>. <br />
                                                                The valid range is [2.54 ... 80] MHz, the valid value is 0 when disabled. <br />
                                                                Note: This field must not be manually modified. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="DFS5_CLK Frequency (Calculated)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:cc5ec348-9a9e-4233-90ec-a8ea5b27ab32"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuDFSPort_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(number(node:fallback(../McuDFSPort_En,'false')='true')) *
                                                            (
                                                                num:f( node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_VCO_Frequency, num:f(1300000000) ) ) div
                                                                num:f( num:f(2) *
                                                                    num:f(
                                                                        num:f( node:fallback(../McuDFSPortMfi, num:f(5) ) ) +
                                                                        num:f(
                                                                            num:f( node:fallback(../McuDFSPortMfn, num:f(0) ) ) div
                                                                            num:f(36)
                                                                             )
                                                                         )
                                                                     )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.PeriphDFS.Limits.DFS5.High')"/>
                                                        <a:tst expr="&gt;=(ecu:get('MCU.PeriphDFS.Limits.DFS5.Low') * num:f(number(node:fallback(../McuDFSPort_En,'false')='true')))"/>
                                                    </a:a>
                                                    <a:da name="RANGE" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (
                                                                (node:fallback(../McuDFSPort_En,'false')='true') or
                                                                (num:f(node:fallback(., 0)) != 0)
                                                            )
                                                            and
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 80000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 80000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(number(node:fallback(../McuDFSPort_En,'false')='true')) *
                                                                                (
                                                                                    num:f( node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_VCO_Frequency, num:f(1300000000) ) ) div
                                                                                    num:f( num:f(2) *
                                                                                        num:f(
                                                                                            num:f( node:fallback(../McuDFSPortMfi, num:f(5) ) ) +
                                                                                            num:f(
                                                                                                num:f( node:fallback(../McuDFSPortMfn, num:f(0) ) ) div
                                                                                                num:f(36)
                                                                                                 )
                                                                                             )
                                                                                         )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(80000000) ) &gt; num:i(ecu:get('MCU.PeriphDFS.Limits.DFS5.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(80000000) ) &lt; num:i(ecu:get('MCU.PeriphDFS.Limits.DFS5.Low'))
                                                                )
                                                            )
                                                        )
                                                        "
                                                        true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                </v:var>
                                            </v:ctr>

                                            <v:ctr name="McuDfs_6" type="IDENTIFIABLE">
                                                <a:a name="UUID" value="ECUC:2a783fae-238a-4382-9124-d57c31d0ca33"/>
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            Configuration values for DFS_6.  <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>

                                                <v:var name="McuDFSUnderMcuControl" type="BOOLEAN">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            Set this to TRUE if this DFS is under mcu control <br />
                                                            If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                            The user must still set the values - they are used by the clock reference points  <br />
                                                            Note: Implementation Specific Parameter. <br />
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="LABEL" value="PERIPH DFS6 under MCU control"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:1be167fc-e06b-4db8-a8d7-8750378bc334"/>
                                                <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="(ecu:get('MCU.PeriphDFS.Terminals.DFS6.Connected') = 'true') or ((ecu:get('MCU.PeriphDFS.Terminals.DFS6.Connected') = 'false') and (node:fallback(., 'false') = 'true')) "/>
                                                </a:a>
                                                <a:da name="DEFAULT" type="XPath">
                                                    <a:tst expr="(node:fallback(../../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'false') and (ecu:get('MCU.PeriphDFS.Terminals.DFS6.Connected') = 'true')"/>
                                                </a:da>
                                                <a:da name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (node:fallback(., 'false') = 'true') and
                                                            (node:fallback(../../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'true')
                                                        )"
                                                           true="PeriphDFS cannot be under MCU control if McuNoPll is enabled."/>
                                                    <a:tst expr="
                                                        (
                                                            ( node:fallback(., 'false') = 'true' ) and
                                                            ( node:fallback(as:modconf('Mcu')[1]/McuGeneralConfiguration/McuControlledClocksConfiguration/McuDfs1UnderMcuControl, 'false') = 'false' )
                                                        )"
                                                        true="The field McuGeneralConfiguration/McuControlledClocksConfiguration/McuDfs1UnderMcuControl must be set to 'true' when PERIPH DFS6 is under MCU control."/>
                                                </a:da>
                                                </v:var>

                                                <v:var name="McuDFSPort_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                DFS6 Output Port Enable. <br />
                                                                This field specifies whether MCU will control the configuration and functionality of PERIPH_DFS6_CLK inside the driver. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="DFS6 Output Port Enable"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:84848bc4-c913-81d8-9a9d-b74b555c1635"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="(ecu:get('MCU.PeriphDFS.Terminals.DFS6.Connected') = 'true') or ((ecu:get('MCU.PeriphDFS.Terminals.DFS6.Connected') = 'false') and (node:fallback(., 'false') = 'true')) "/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'true')
                                                            )"
                                                            true="PeriphDFS cannot be enabled if McuNoPll is enabled."/>
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../../../McuPll_1/McuPLLEnabled, 'false') = 'false')
                                                            )"
                                                            true="PeriphDFS cannot be enabled if PeriphPLL is disabled."/>
                                                        <a:tst expr="( (ecu:get('MCU.PeriphDFS.Terminals.DFS6.Connected') = 'false') and (node:fallback(., 'false') = 'true'))"
                                                            true="This feature is not support on this platform. The value of this node should be set to false."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuDFSPortMfi" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This field provides the integer part of division factor for port<italic>n</italic>. - DFS_DVPORT5[MFI]. <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="DFS6 MFI"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:3a4afd8a-8efe-4d46-872e-3c5d1bcabc36"/>
                                                    <a:da name="DEFAULT" value="1"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuDFSPort_En, 'false') = 'true'"/>
                                                    </a:a>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=255"/>
                                                        <a:tst expr="&gt;=1"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuDFSPortMfn" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This field provides the fractional part of division factor for port<italic>n</italic>. - DFS_DVPORT5[MFN]. <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="DFS6 MFN"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:3a4afd8a-8efe-4d46-872e-3c5d1bcc37"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuDFSPort_En, 'false') = 'true'"/>
                                                    </a:a>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=35"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="DFS_CLK_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Output value for <strong>PERIPH_DFS6_CLK frequency</strong>. <br />
                                                                The valid range is [2.54 ... 300] MHz, the valid value is 0 when disabled. <br />
                                                                Note: This field must not be manually modified. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="DFS6_CLK Frequency (Calculated)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:cc5ec348-9a9e-4233-90ec-a8ea5b27ac38"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuDFSPort_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(number(node:fallback(../McuDFSPort_En,'false')='true')) *
                                                            (
                                                                num:f( node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_VCO_Frequency, num:f(1300000000) ) ) div
                                                                num:f( num:f(2) *
                                                                    num:f(
                                                                        num:f( node:fallback(../McuDFSPortMfi, num:f(5) ) ) +
                                                                        num:f(
                                                                            num:f( node:fallback(../McuDFSPortMfn, num:f(0) ) ) div
                                                                            num:f(36)
                                                                             )
                                                                         )
                                                                     )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.PeriphDFS.Limits.DFS6.High')"/>
                                                        <a:tst expr="&gt;=(ecu:get('MCU.PeriphDFS.Limits.DFS6.Low') * num:f(number(node:fallback(../McuDFSPort_En,'false')='true')))"/>
                                                    </a:a>
                                                    <a:da name="RANGE" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (
                                                                (node:fallback(../McuDFSPort_En,'false')='true') or
                                                                (num:f(node:fallback(., 0)) != 0)
                                                            )
                                                            and
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 80000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 80000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(number(node:fallback(../McuDFSPort_En,'false')='true')) *
                                                                                (
                                                                                    num:f( node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_VCO_Frequency, num:f(1300000000) ) ) div
                                                                                    num:f( num:f(2) *
                                                                                        num:f(
                                                                                            num:f( node:fallback(../McuDFSPortMfi, num:f(5) ) ) +
                                                                                            num:f(
                                                                                                num:f( node:fallback(../McuDFSPortMfn, num:f(0) ) ) div
                                                                                                num:f(36)
                                                                                                 )
                                                                                             )
                                                                                         )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(80000000) ) &gt; num:i(ecu:get('MCU.PeriphDFS.Limits.DFS6.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(80000000) ) &lt; num:i(ecu:get('MCU.PeriphDFS.Limits.DFS6.Low'))
                                                                )
                                                            )
                                                        )
                                                        "
                                                        true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                </v:var>
                                            </v:ctr>
                                        </v:ctr>

                                        <v:ctr name="McuPll_2" type="IDENTIFIABLE">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        This container provides the specific configuration for the ACCEL_PLL.
                                                        Note: Implementation Specific Container.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="TAB" value="McuAccelPLL"/>
                                            <a:a name="UUID" value="ECUC:c24fde2b-a2a2-3fc7-24dd-9833ec4ef821"/>

                                            <v:var name="McuPLLUnderMcuControl" type="BOOLEAN">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            Set this to TRUE if this PLL is under mcu control <br />
                                                            If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                            The user must still set the values - they are used by the clock reference points  <br />
                                                            Note: Implementation Specific Parameter. <br />
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="LABEL" value="ACCEL PLL under MCU control"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:8aec976a-4a4d-4685-af8b-1e261fb3a3f8"/>
                                                <a:da name="DEFAULT" type="XPath">
                                                    <a:tst expr="(node:fallback(../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'false')"/>
                                                </a:da>
                                                <a:da name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (node:fallback(., 'false') = 'true') and
                                                            (node:fallback(../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'true')
                                                        )"
                                                           true="ACCEL PLL cannot be under MCU control if McuNoPll is enabled."/>
                                                    <a:tst expr="
                                                        (
                                                            ( node:fallback(., 'false') = 'true' ) and
                                                            ( node:fallback(as:modconf('Mcu')[1]/McuGeneralConfiguration/McuControlledClocksConfiguration/McuPll2UnderMcuControl, 'false') = 'false' )
                                                        )"
                                                        true="The field McuGeneralConfiguration/McuControlledClocksConfiguration/McuPll2UnderMcuControl must be set to 'true' when ACCEL PLL is under MCU control."/>
                                                </a:da>
                                            </v:var>

                                            <v:var name="McuPLLEnabled" type="BOOLEAN">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            0 - ACCEL_PLL is disabled. <br />
                                                            1 - ACCEL_PLL is enabled (and can be used as a clock source). <br />
                                                            Note: Implementation Specific Parameter. <br />
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="LABEL" value="ACCEL PLL Enabled"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:1be167fc-e04b-4db8-a8d7-8743067a642c"/>
                                                <a:da name="DEFAULT" type="XPath">
                                                    <a:tst expr="(node:fallback(../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'false')"/>
                                                </a:da>
                                                <a:da name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (node:fallback(., 'false') = 'true') and
                                                            (node:fallback(../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'true')
                                                        )"
                                                           true="ACCEL_PLL cannot be enabled if McuNoPll is enabled."/>
                                                </a:da>
                                            </v:var>

                                            <v:var name="McuPllClockSelection" type="ENUMERATION">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            PLL Source Selection - PLLDIG_PLLCLKMUX[REFCLKSEL].  <br />
                                                            Note: Implementation Specific Parameter. <br />
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="LABEL" value="PLL Source Selection"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:19baf45a-699e-43c0-b919-bfb8c66352c1"/>
                                                <a:da name="DEFAULT" value="FIRC_CLK"/>
                                                <a:da name="WARNING" type="XPath">
                                                    <a:tst expr="(node:fallback(., 'FXOSC_CLK') = 'FIRC_CLK')"
                                                        true="It is highly recommended to only use FXOSC as this generally provides a more accurate system clock."/>
                                                </a:da>
                                                <a:da name="RANGE">
                                                    <a:v>FIRC_CLK</a:v>
                                                    <a:v>FXOSC_CLK</a:v>
                                                </a:da>
                                                <a:da name="INVALID" type="XPath">
                                                    <a:tst expr="( (node:fallback(., 'FXOSC_CLK') = 'FXOSC_CLK') and
                                                                   (node:fallback(../../../McuFXOSC/McuFxoscPowerDownCtr, 'false') = 'false')
                                                                 )"
                                                           true="If 'FXOSC_CLK' is selected as source clock, FXOSC ('McuFxoscPowerDownCtr') must be enabled."/>
                                                </a:da>
                                            </v:var>

                                            <v:ctr name="McuPll_Configuration" type="IDENTIFIABLE">
                                                <a:a name="UUID" value="ECUC:c202bc9e-fd9c-4d1e-a0a5-70ae66a7beb4"/>
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            Configuration values for PLL.  <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>

                                                <v:var name="McuPllDvRdiv" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Input clock predivider. <br />
                                                                Sets the PLL: PLLDIG_PLLDV[RDIV] field register. <br />
                                                                This field controls the value of the divider on the input clock. The output of the predivider circuit generates the reference clock to the PLL analog loop. <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:2b1c1a1e-d5d6-4c7f-8706-bf6b2da7fe3d"/>
                                                    <a:da name="DEFAULT" value="2"/>
                                                    <a:a name="LABEL" value="RDIV"/>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=7"/>
                                                        <a:tst expr="&gt;=1"/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                         num:f(
                                                             num:f( num:i(number(node:fallback(../../McuPllClockSelection,'FIRC_CLK')='FIRC_CLK')) * num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                    num:i(number(node:fallback(../../McuPllClockSelection,'FIRC_CLK')='FXOSC_CLK')) *
                                                                    num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                  ) div
                                                                    num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) )
                                                              ) &gt; num:i(ecu:get('MCU.ACCELPLL.Limits.ClkIn.High'))
                                                        )
                                                         or
                                                        (
                                                         num:f(
                                                             num:f( num:i(number(node:fallback(../../McuPllClockSelection,'FIRC_CLK')='FIRC_CLK')) * num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                    num:i(number(node:fallback(../../McuPllClockSelection,'FIRC_CLK')='FXOSC_CLK')) *
                                                                    num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                  ) div
                                                                    num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) )
                                                              ) &lt; num:i(ecu:get('MCU.ACCELPLL.Limits.ClkIn.Low'))
                                                        )
                                                        "
                                                        true="The input frequency for the PLL (ReferenceClockFrequency/Rdiv) must be between 20 MHz and 40 MHz."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllDvMfi" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Loop multiplication factor divider. <br />
                                                                Sets the PLL: PLLDIG_PLLDV[MFI] field register. <br />
                                                                This field controls the value of the divider in the feedback loop. The value specified by the MFD bits
                                                                establishes the multiplication factor applied to the reference frequency. Divider value = MFD, where MFD
                                                                should be choosen such that it does not violate VCO frequency specifications. <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:3a5e17d9-f6cc-4be8-a528-8cb92aebebf2"/>
                                                    <a:da name="DEFAULT" value="60"/>
                                                    <a:a name="LABEL" value="MFD"/>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=255"/>
                                                        <a:tst expr="&gt;=1"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllFmSscgbyp" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Modulation enable. <br />
                                                                This bit enables spectrum modulation. <br />
                                                                Set the PLL: PLLDIG_PLLFM[SSCGBYP] field. <br />
                                                                0 - Spread spectrum modulation is not bypassed. <br />
                                                                1 - Spread spectrum modulation is bypassed. <br />
                                                                Note: PLLFM[SSCGBYP] must be cleared and PLLFD[SDMEN] must be set for the frequency modulation mechanism to be enabled. <br />
                                                                Note: Frequency Modulation is only possible if PLLDIG_PLLFM[STEPSIZE] * PLLDIG_PLLFM[STEPNO] less than 18432. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:1c7b4b4b-c94f-44c9-b048-7e06c469f6fa"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:a name="LABEL" value="Spread spectrum modulation bypass"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'true') = 'false') and
                                                                    (node:fallback(../McuPllFdSdmen, 'false') = 'false')
                                                                )"
                                                               true="To enable spread spectrum modulation, please also enable PLLDIG_PLLFD[SDMEN]."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllFmSpreadctl" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Modulation type selection: <br />
                                                                    - Center around nominal frequency. <br />
                                                                    - Spread below nominal frequency. <br />
                                                                Configure the PLLDIG_PLLFM[SPREADCTL] field register. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Spread Selection"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:4d17a8cb-93fe-46ba-9a1b-2c4ed0222aa0"/>
                                                    <a:da name="DEFAULT" value="Center_Spread"/>
                                                    <a:da name="RANGE">
                                                        <a:v>Center_Spread</a:v>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllFmStepSize" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Modulation period. <br />
                                                                Sets the PLL: PLLDIG_PLLFM[STEPSIZE] field register. <br />
                                                                STEPSIZE is the binary equivalent of the modulation period variable. <br />
                                                                It is calculated as: StepSize = [McuPllFdMdp * (McuPllDvMfi + McuPllFdMfn / 18432) * 18432] / (100 * McuPllFmStepNo). <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:2cbe4ea6-4dcb-48fb-b92d-d097d3ebc1f1"/>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        node:when(
                                                            ( ( node:fallback(../McuPllFdFmod, num:f(0)) != num:f(0) ) and ( node:fallback(../McuPllFdMdp, num:f(0)) != num:f(0) ) ),
                                                            num:i(
                                                                round(
                                                                    num:f(
                                                                        num:f( node:fallback(../McuPllFdMdp, num:f(0)) ) *
                                                                        num:f(
                                                                            num:f( node:fallback(../McuPllDvMfi, num:f(65)) ) +
                                                                            num:f(
                                                                                num:f( node:fallback(../McuPllFdMfn, num:f(0)) ) div
                                                                                num:f( 18432 )
                                                                            )
                                                                        ) *
                                                                        num:f( 18432 )
                                                                    ) div
                                                                    num:f(
                                                                        num:f( 100 ) *
                                                                        num:f( node:fallback(../McuPllFmStepNo, num:f(1)) )
                                                                    )
                                                                )
                                                            ),
                                                            num:i(0)
                                                        )"/>
                                                    </a:da>
                                                    <a:a name="LABEL" value="STEPSIZE"/>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=1023"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="( num:i(node:fallback(., 0)) * num:i(node:fallback(../McuPllFmStepNo, 1)) ) &gt; num:i(18432)"
                                                               true="McuPllFmStepSize * McuPllFmStepNo >= 18432. Please lower either StepSize or StepNo."/>
                                                        <a:tst expr="
                                                        (
                                                            not( node:empty( node:fallback(., 0) ) )
                                                            and
                                                            (
                                                                num:i( node:fallback(., 0) ) !=
                                                                (
                                                                    node:when(
                                                                        ( ( node:fallback(../McuPllFdFmod, num:f(0)) != num:f(0) ) and ( node:fallback(../McuPllFdMdp, num:f(0)) != num:f(0) ) ),
                                                                        num:i(
                                                                            round(
                                                                                num:f(
                                                                                    num:f( node:fallback(../McuPllFdMdp, num:f(0)) ) *
                                                                                    num:f(
                                                                                        num:f( node:fallback(../McuPllDvMfi, num:f(65)) ) +
                                                                                        num:f(
                                                                                            num:f( node:fallback(../McuPllFdMfn, num:f(0)) ) div
                                                                                            num:f( 18432 )
                                                                                        )
                                                                                    ) *
                                                                                    num:f( 18432 )
                                                                                ) div
                                                                                num:f(
                                                                                    num:f( 100 ) *
                                                                                    num:f( node:fallback(../McuPllFmStepNo, num:f(1)) )
                                                                                )
                                                                            )
                                                                        ),
                                                                        num:i(0)
                                                                    )
                                                                )
                                                            )
                                                        )"
                                                        true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllFmStepNo" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Increment step. <br />
                                                                Sets the PLL: PLLDIG_PLLFM[STEPNO] field register. <br />
                                                                This field is the binary equivalent of the STEPNO variable. <br />
                                                                It is calculated as: StepNo = McuClockReferencePointFrequency(McuPllClockSelection) / (2 * McuPllFdFmod * McuPllDvRdiv). <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:1dafd85f-9c8d-4268-9ed3-1a98df1bc3c6"/>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        node:when(
                                                            ( ( node:fallback(../McuPllFdFmod, num:f(0)) != num:f(0) ) and ( node:fallback(../McuPllFdMdp, num:f(0)) != num:f(0) ) ),
                                                            num:i(
                                                                round(
                                                                    num:f(
                                                                        num:i(number(node:fallback(../../McuPllClockSelection,'FIRC_CLK')='FIRC_CLK')) * num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                        num:i(number(node:fallback(../../McuPllClockSelection,'FIRC_CLK')='FXOSC_CLK')) *
                                                                        num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                    ) div
                                                                    num:f(
                                                                        num:f(2) *
                                                                        num:f(node:fallback(../McuPllFdFmod, num:f(0))) *
                                                                        num:f(node:fallback(../McuPllDvRdiv, num:f(1)))
                                                                    )
                                                                )
                                                            ),
                                                            num:i(1)
                                                        )"/>
                                                    </a:da>
                                                    <a:a name="LABEL" value="STEPNO"/>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=2047"/>
                                                        <a:tst expr="&gt;=1"/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="( num:i(node:fallback(., 1)) * num:i(node:fallback(../McuPllFmStepSize, 0)) ) &gt; num:i(18432)"
                                                               true="McuPllFmStepSize * McuPllFmStepNo >= 18432. Please lower either StepSize or StepNo."/>
                                                        <a:tst expr="
                                                        (
                                                            not( node:empty( node:fallback(., 1) ) )
                                                            and
                                                            (
                                                                num:i( node:fallback(., 1) ) !=
                                                                (
                                                                    node:when(
                                                                        ( ( node:fallback(../McuPllFdFmod, num:f(0)) != num:f(0) ) and ( node:fallback(../McuPllFdMdp, num:f(0)) != num:f(0) ) ),
                                                                        num:i(
                                                                            round(
                                                                                num:f(
                                                                                    num:i(number(node:fallback(../../McuPllClockSelection,'FIRC_CLK')='FIRC_CLK')) * num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                                    num:i(number(node:fallback(../../McuPllClockSelection,'FIRC_CLK')='FXOSC_CLK')) *
                                                                                    num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                                ) div
                                                                                num:f(
                                                                                    num:f(2) *
                                                                                    num:f(node:fallback(../McuPllFdFmod, num:f(0))) *
                                                                                    num:f(node:fallback(../McuPllDvRdiv, num:f(1)))
                                                                                )
                                                                            )
                                                                        ),
                                                                        num:i(1)
                                                                    )
                                                                )
                                                            )
                                                        )"
                                                        true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllFdFmod" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                The modulation frequency. This should be set to the highest frequency component present in the modulating signal. <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Modulation Frequency"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:ce507545-8257-4c4c-8de7-b3c848d675d0"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=64000"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:da>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( ( num:f(node:fallback(., 0)) != num:f(0) ) and ( node:fallback(../McuPllFmSscgbyp, 'true') = 'true' ) )"
                                                               true="Cannot have non-zero FM parameters while PLLDIG_PLLFM[SSCGBYP] = 1.
                                                                     Please disable spread spectrum modulation bypassing (i.e. uncheck 'McuPllFmSscgbyp')"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllFdMdp" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                The modulation depth percentage. This value indicates by how much the modulated variable varies around its unmodulated level. <br />
                                                                It is calculated as the FrequencyDeviation (deviation from the carrier/nominal frequency) divided by the ModulatingSignalFrequency(Fmod). <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Modulation Depth Percentage"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:ce500585-8257-4c4c-8de7-b3c575c362d0"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=3.0"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:da>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( ( num:f(node:fallback(., 0)) != num:f(0) ) and ( node:fallback(../McuPllFmSscgbyp, 'true') = 'true' ) )"
                                                               true="Cannot have non-zero FM parameters while PLLDIG_PLLFM[SSCGBYP] = 1.
                                                                     Please disable spread spectrum modulation bypassing (i.e. uncheck 'McuPllFmSscgbyp')"/>
                                                        <a:tst expr="
                                                        (
                                                            not( node:empty( node:fallback(., 0) ) )
                                                            and
                                                            ( node:fallback(../McuPllFmSscgbyp, 'true') = 'false' )
                                                            and
                                                            ( node:fallback(../McuPllFmSpreadctl, 'Center_Spread') = 'Center_Spread')
                                                            and
                                                            (
                                                                ( num:f( node:fallback(., 0) ) &lt; 0.25 )
                                                                or
                                                                ( num:f( node:fallback(., 0) ) &gt; 1.5 )
                                                            )
                                                        )"
                                                        true="The inserted value exceeds the supported min/max modulation depth limits for center spread modulation."/>
                                                        <a:tst expr="
                                                        (
                                                            not( node:empty( node:fallback(., 0) ) )
                                                            and
                                                            ( node:fallback(../McuPllFmSscgbyp, 'true') = 'false' )
                                                            and
                                                            ( node:fallback(../McuPllFmSpreadctl, 'Center_Spread') = 'Down_Spread')
                                                            and
                                                            (
                                                                ( num:f( node:fallback(., 0) ) &lt; 0.5 )
                                                                or
                                                                ( num:f( node:fallback(., 0) ) &gt; 3.0 )
                                                            )
                                                        )"
                                                        true="The inserted value exceeds the supported min/max modulation depth limits for down spread modulation."/>
                                                        <a:tst expr="
                                                        (
                                                            not( node:empty( node:fallback(., 0) ) )
                                                            and
                                                            ( node:fallback(../McuPllFmSscgbyp, 'true') = 'false' )
                                                            and
                                                            (
                                                                num:f( node:fallback(., 0) ) &gt;
                                                                (
                                                                    num:f( num:i(number(node:fallback(../../McuPllClockSelection,'FIRC_CLK')='FIRC_CLK')) * num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                           num:i(number(node:fallback(../../McuPllClockSelection,'FIRC_CLK')='FXOSC_CLK')) *
                                                                           num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                    ) div
                                                                    num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) ) div
                                                                    num:f( node:fallback(../../McuPll_Parameter/PLL_VCO_Frequency, num:f(ecu:get('MCU.CorePLL.Limits.VCO.High')) ) ) *
                                                                    num:f( 100 )
                                                                )
                                                            )
                                                        )"
                                                        true="The inserted value exceeds the maximum peak-to-peak MDP, which is calculated as ((Fref / McuPllDvRdiv) / PLL_VCO_Frequency) * 100"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllFdEmdp" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                The effective modulation depth percentage. Because of the rounding operations applied to StepSize and StepNo,
                                                                the effective MDP may differ from the intended MDP (i.e. the value of 'McuPllFdMdp'). <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Effective Modulation Depth Percentage"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:ce600545-8257-4c4c-8de7-b5b575c682c3"/>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        node:when(
                                                            ( ( node:fallback(../McuPllFdFmod, num:f(0)) != num:f(0) ) and ( node:fallback(../McuPllFdMdp, num:f(0)) != num:f(0) ) ),
                                                            num:i(
                                                                round(
                                                                    num:f(
                                                                        num:f( node:fallback(../McuPllFmStepSize, num:f(0)) ) *
                                                                        num:f( node:fallback(../McuPllFmStepNo, num:f(1)) ) *
                                                                        num:f( 100 )
                                                                    ) div
                                                                    num:f(
                                                                        num:f( 18432 ) *
                                                                        num:f(
                                                                            num:f( node:fallback(../McuPllDvMfi, num:f(65)) ) +
                                                                            num:f(
                                                                                num:f( node:fallback(../McuPllFdMfn, num:f(0)) ) div
                                                                                num:f( 18432 )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                            ),
                                                            num:i(0)
                                                        )"/>
                                                    </a:da>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=3"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:da>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                        (
                                                            not( node:empty( node:fallback(., 0) ) )
                                                            and
                                                            (
                                                                num:i( node:fallback(., 0) ) !=
                                                                (
                                                                    node:when(
                                                                        ( ( node:fallback(../McuPllFdFmod, num:f(0)) != num:f(0) ) and ( node:fallback(../McuPllFdMdp, num:f(0)) != num:f(0) ) ),
                                                                        num:i(
                                                                            round(
                                                                                num:f(
                                                                                    num:f( node:fallback(../McuPllFmStepSize, num:f(0)) ) *
                                                                                    num:f( node:fallback(../McuPllFmStepNo, num:f(1)) ) *
                                                                                    num:f( 100 )
                                                                                ) div
                                                                                num:f(
                                                                                    num:f( 18432 ) *
                                                                                    num:f(
                                                                                        num:f( node:fallback(../McuPllDvMfi, num:f(65)) ) +
                                                                                        num:f(
                                                                                            num:f( node:fallback(../McuPllFdMfn, num:f(0)) ) div
                                                                                            num:f( 18432 )
                                                                                        )
                                                                                    )
                                                                                )
                                                                            )
                                                                        ),
                                                                        num:i(0)
                                                                    )
                                                                )
                                                            )
                                                        )"
                                                        true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllFdMfn" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Numerator for fractional loop division factor - PLLDIG_PLLFD[MFN]. <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="MFN"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:5e57054c-8257-4c4c-8de7-a1b919d675d0"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=32767"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:da>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                                (
                                                                    (num:i(node:fallback(., 0)) != 0) and
                                                                    (node:fallback(../McuPllFdSdmen, 'false') != 'true')
                                                                )"
                                                               true="Fractional loop division factor works only when PLLDIG_PLLFD[SDMEN] is enabled."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllFdSdmen" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Sigma Delta Modulation Enable. <br />
                                                                Set the PLL: PLLDIG_PLLFD[SDMEN] field register. <br />
                                                                0 - Sigma delta modulation disabled. <br />
                                                                1 - Sigma delta modulation enabled. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:3ae1a2fa-e1bc-422b-8976-9096d3cc8c1d"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:a name="LABEL" value="Sigma Delta Modulation Enable"/>
                                                </v:var>

                                                <v:var name="McuPllOdiv0_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                PHI0 Divider enable. <br />
                                                                Set the PLL: PLLDIG_PLLODIV0[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PHI0 Divider enable"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:84848bc4-c94a-81d8-9a9d-b74b444d76ac"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="(ecu:get('MCU.ACCELPLL.Terminals.PHI0.Connected') = 'true') or ((ecu:get('MCU.ACCELPLL.Terminals.PHI0.Connected') = 'false') and (node:fallback(., 'false') = 'true')) "/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'false') = 'true') and (node:fallback(../../McuPLLEnabled, 'false') = 'false') )"
                                                               true="ACCEL_PLL must be enabled before enabling PLL_ODIV0."/>
                                                        <a:tst expr="( (ecu:get('MCU.ACCELPLL.Terminals.PHI0.Connected') = 'false') and (node:fallback(., 'false') = 'true'))"
                                                               true="This feature is not support on this platform. The value of this node should be set to false."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllOdiv0_Div" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                PHI0 Division value. <br />
                                                                PLLDIG_PLLODIV0[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="PHI0 Division value"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:f4a55a4f-c1bd-4b1e-1e5d-af0ab7e64c80"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuPllOdiv0_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=255"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllOdiv1_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                PHI1 Divider enable. <br />
                                                                Set the PLL: PLLDIG_PLLODIV1[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PHI1 Divider enable"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:848e8bc4-194a-81d8-9a9d-b74b444d76ac"/>
                                                    <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.PLL2.Dividers.List'), 'PllOdiv1')" />
                                                    </a:a>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="(ecu:get('MCU.ACCELPLL.Terminals.PHI1.Connected') = 'true') or ((ecu:get('MCU.ACCELPLL.Terminals.PHI1.Connected') = 'false') and (node:fallback(., 'false') = 'true')) "/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'false') = 'true') and (node:fallback(../../McuPLLEnabled, 'false') = 'false') )"
                                                               true="ACCEL_PLL must be enabled before enabling PLL_ODIV1."/>
                                                        <a:tst expr="( (ecu:get('MCU.ACCELPLL.Terminals.PHI1.Connected') = 'false') and (node:fallback(., 'false') = 'true'))"
                                                               true="This feature is not support on this platform. The value of this node should be set to false."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllOdiv1_Div" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                PHI1 Division value. <br />
                                                                PLLDIG_PLLODIV1[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="PHI1 Division value"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:f4a5ea4f-c1cd-4b1e-1ead-af0ab7e64c80"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.PLL2.Dividers.List'), 'PllOdiv1')" />
                                                    </a:a>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuPllOdiv1_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=255"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:da>
                                                </v:var>

                                            </v:ctr>

                                            <v:ctr name="McuPll_Parameter" type="IDENTIFIABLE">
                                                <a:a name="UUID" value="ECUC:e0b62be3-af73-43ad-9358-84fe5e89b2e7"/>
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            Calculated values for PLL. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>

                                                <v:var name="PLL_PHI0_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Output value for <strong>ACCEL_PLL_PHI0_CLK frequency</strong>. <br />
                                                                The valid range is [0 ... 600] MHz, the valid value is 0 when disabled. <br />
                                                                Note: This field must not be manually modified. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PLL_PHI0 Frequency (Calculated)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:051d8b04-3dd4-40f6-9caa-607ee1474829"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../../McuPll_Configuration/McuPllOdiv0_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                             num:f(number(node:fallback(../../McuPll_Configuration/McuPllOdiv0_En,'false')='true')) *
                                                             (
                                                                 num:f( num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FIRC_CLK')) * num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                        num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FXOSC_CLK')) *
                                                                        num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                      ) *
                                                                num:f(
                                                                    num:f(
                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvMfi, num:f(65) ) ) +
                                                                        num:f(
                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllFdMfn, num:f(0) ) ) div
                                                                            num:f( 18432 )
                                                                        )
                                                                    ) div
                                                                    num:f(
                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) ) *
                                                                        (node:when(
                                                                                   node:fallback(../../McuPll_Configuration/McuPllOdiv0_En,'false') = 'true',
                                                                                   node:fallback(../../McuPll_Configuration/McuPllOdiv0_Div,num:i(19)),
                                                                                   num:i(0)
                                                                                  ) + num:f(1))
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                        "/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.ACCELPLL.Limits.PHI0.High')"/>
                                                        <a:tst expr="&gt;=(ecu:get('MCU.ACCELPLL.Limits.PHI0.Low') * num:f(number(node:fallback(../../McuPll_Configuration/McuPllOdiv0_En,'false')='true')))"/>
                                                    </a:a>
                                                    <a:da name="RANGE" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (
                                                                (node:fallback(../../McuPll_Configuration/McuPllOdiv0_En,'false')='true') or
                                                                (num:f(node:fallback(., 0)) != 0)
                                                            )
                                                            and
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 1000000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 1000000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(number(node:fallback(../../McuPll_Configuration/McuPllOdiv0_En,'false')='true')) *
                                                                                (
                                                                                     num:f( num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FIRC_CLK')) * num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                                            num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FXOSC_CLK')) *
                                                                                            num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                                          ) *
                                                                                    num:f(
                                                                                        num:f(
                                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllDvMfi, num:f(65) ) ) +
                                                                                            num:f(
                                                                                                num:f( node:fallback(../../McuPll_Configuration/McuPllFdMfn, num:f(0) ) ) div
                                                                                                num:f( 18432 )
                                                                                            )
                                                                                        ) div
                                                                                        num:f(
                                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) ) *
                                                                                            (node:when(
                                                                                                       node:fallback(../../McuPll_Configuration/McuPllOdiv0_En,'false') = 'true',
                                                                                                       node:fallback(../../McuPll_Configuration/McuPllOdiv0_Div,num:i(19)),
                                                                                                       num:i(0)
                                                                                                      ) + num:f(1))
                                                                                            )
                                                                                        )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:when(
                                                                        ( node:fallback(../../McuPll_Configuration/McuPllFmSscgbyp, 'true') = 'false' )
                                                                        and
                                                                        ( node:fallback(../../McuPll_Configuration/McuPllFmSpreadctl, 'Center_Spread') = 'Center_Spread' ),
                                                                        num:f( node:fallback(., 800000000 ) ) * (num:f(1) + num:f(node:fallback(../../McuPll_Configuration/McuPllFdMdp, 0)) div num:f(200)),
                                                                        num:f( node:fallback(., 800000000 ) )
                                                                    ) &gt; num:i(ecu:get('MCU.ACCELPLL.Limits.PHI0.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:when(
                                                                        ( node:fallback(../../McuPll_Configuration/McuPllFmSscgbyp, 'true') = 'false' )
                                                                        and
                                                                        ( node:fallback(../../McuPll_Configuration/McuPllFmSpreadctl, 'Center_Spread') = 'Down_Spread' ),
                                                                        num:f( node:fallback(., 20600000 ) ) * (num:f(1) - ( num:f(2) * num:f(node:fallback(../../McuPll_Configuration/McuPllFdEmdp, 0)) ) div num:f(100)),
                                                                        num:f( node:fallback(., 20600000 ) )
                                                                    ) &lt; num:i(ecu:get('MCU.ACCELPLL.Limits.PHI0.Low'))
                                                                )
                                                            )
                                                        )
                                                        "
                                                        true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="PLL_PHI1_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Output value for <strong>ACCEL_PLL_PHI1_CLK frequency</strong>. <br />
                                                                The valid range is [0 ... 600] MHz, the valid value is 0 when disabled. <br />
                                                                Note: This field must not be manually modified. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PLL_PHI1 Frequency (Calculated)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:ba79d923-166d-4ed8-90c3-173e49f13b0f"/>
                                                    <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.PLL2.Dividers.List'), 'PllOdiv1')" />
                                                    </a:a>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../../McuPll_Configuration/McuPllOdiv1_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                             num:f(number(node:fallback(../../McuPll_Configuration/McuPllOdiv1_En,'false')='true')) *
                                                             (
                                                                 num:f( num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FIRC_CLK')) * num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                        num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FXOSC_CLK')) *
                                                                        num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                      ) *
                                                                num:f(
                                                                    num:f(
                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvMfi, num:f(65) ) ) +
                                                                        num:f(
                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllFdMfn, num:f(0) ) ) div
                                                                            num:f( 18432 )
                                                                        )
                                                                    ) div
                                                                    num:f(
                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) ) *
                                                                        (node:when(
                                                                                   node:fallback(../../McuPll_Configuration/McuPllOdiv1_En,'false') = 'true',
                                                                                   node:fallback(../../McuPll_Configuration/McuPllOdiv1_Div,num:i(19)),
                                                                                   num:i(0)
                                                                                  ) + num:f(1))
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                        "/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.ACCELPLL.Limits.PHI1.High')"/>
                                                        <a:tst expr="&gt;=(ecu:get('MCU.ACCELPLL.Limits.PHI1.Low') * num:f(number(node:fallback(../../McuPll_Configuration/McuPllOdiv1_En,'false')='true')))"/>
                                                    </a:a>
                                                    <a:da name="RANGE" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (
                                                                (node:fallback(../../McuPll_Configuration/McuPllOdiv1_En,'false')='true') or
                                                                (num:f(node:fallback(., 0)) != 0)
                                                            )
                                                            and
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 800000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 800000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                 num:f(number(node:fallback(../../McuPll_Configuration/McuPllOdiv1_En,'false')='true')) *
                                                                                 (
                                                                                     num:f( num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FIRC_CLK')) * num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                                            num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FXOSC_CLK')) *
                                                                                            num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                                          ) *
                                                                                    num:f(
                                                                                        num:f(
                                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllDvMfi, num:f(65) ) ) +
                                                                                            num:f(
                                                                                                num:f( node:fallback(../../McuPll_Configuration/McuPllFdMfn, num:f(0) ) ) div
                                                                                                num:f( 18432 )
                                                                                            )
                                                                                        ) div
                                                                                        num:f(
                                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) ) *
                                                                                            (node:when(
                                                                                                       node:fallback(../../McuPll_Configuration/McuPllOdiv1_En,'false') = 'true',
                                                                                                       node:fallback(../../McuPll_Configuration/McuPllOdiv1_Div,num:i(19)),
                                                                                                       num:i(0)
                                                                                                      ) + num:f(1))
                                                                                            )
                                                                                        )
                                                                                    )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:when(
                                                                        ( node:fallback(../../McuPll_Configuration/McuPllFmSscgbyp, 'true') = 'false' )
                                                                        and
                                                                        ( node:fallback(../../McuPll_Configuration/McuPllFmSpreadctl, 'Center_Spread') = 'Center_Spread' ),
                                                                        num:f( node:fallback(., 800000000 ) ) * (num:f(1) + num:f(node:fallback(../../McuPll_Configuration/McuPllFdMdp, 0)) div num:f(200)),
                                                                        num:f( node:fallback(., 800000000 ) )
                                                                    ) &gt; num:i(ecu:get('MCU.ACCELPLL.Limits.PHI1.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:when(
                                                                        ( node:fallback(../../McuPll_Configuration/McuPllFmSscgbyp, 'true') = 'false' )
                                                                        and
                                                                        ( node:fallback(../../McuPll_Configuration/McuPllFmSpreadctl, 'Center_Spread') = 'Down_Spread' ),
                                                                        num:f( node:fallback(., 20600000 ) ) * (num:f(1) - ( num:f(2) * num:f(node:fallback(../../McuPll_Configuration/McuPllFdEmdp, 0)) ) div num:f(100)),
                                                                        num:f( node:fallback(., 20600000 ) )
                                                                    ) &lt; num:i(ecu:get('MCU.ACCELPLL.Limits.PHI1.Low'))
                                                                )
                                                            )
                                                        )
                                                        "
                                                        true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="PLL_VCO_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Output value for <strong>ACCEL_VCO frequency</strong>. <br />
                                                                The valid range is [1300 ... 2400] MHz, the valid value is 0 when disabled. <br />
                                                                Note: This field must not be manually modified. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PLL_VCO Frequency (Calculated)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:22d18b5c-fef6-418c-b189-f2aa3c5acec0"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../../McuPLLEnabled, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                            num:f(
                                                                num:f(number(node:fallback(../../McuPLLEnabled, 'false') = 'true')) *
                                                                (
                                                                    num:f(
                                                                        num:f( num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FIRC_CLK')) * num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                               num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FXOSC_CLK')) *
                                                                               num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                             ) div
                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) )
                                                                    ) *
                                                                    num:f(
                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvMfi, num:f(65) ) ) +
                                                                        num:f(
                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllFdMfn, num:f(0) ) ) div
                                                                            num:f(18432)
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                        "/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.ACCELPLL.Limits.VCO.High')"/>
                                                        <a:tst expr="&gt;=(ecu:get('MCU.ACCELPLL.Limits.VCO.Low') * num:f(number(node:fallback(../../McuPLLEnabled, 'false') = 'true')))"/>
                                                    </a:a>
                                                    <a:da name="RANGE" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (
                                                                (node:fallback(../../McuPLLEnabled,'false') = 'true') or
                                                                (num:f(node:fallback(., 0)) != 0)
                                                            )
                                                            and
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 2000000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 2000000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(number(node:fallback(../../McuPLLEnabled, 'false') = 'true')) *
                                                                                (
                                                                                    num:f(
                                                                                        num:f( num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FIRC_CLK')) * num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                                               num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FXOSC_CLK')) *
                                                                                               num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                                             ) div
                                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) )
                                                                                    ) *
                                                                                    num:f(
                                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvMfi, num:f(65) ) ) +
                                                                                        num:f(
                                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllFdMfn, num:f(0) ) ) div
                                                                                            num:f(18432)
                                                                                        )
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:when(
                                                                        ( node:fallback(../../McuPll_Configuration/McuPllFmSscgbyp, 'true') = 'false' )
                                                                        and
                                                                        ( node:fallback(../../McuPll_Configuration/McuPllFmSpreadctl, 'Center_Spread') = 'Center_Spread' ),
                                                                        node:fallback(., num:i(2000000000) ) * (num:f(1) + num:f(node:fallback(../../McuPll_Configuration/McuPllFdMdp, 0)) div num:f(200)),
                                                                        node:fallback(., num:i(2000000000) )
                                                                    ) &gt; num:i(ecu:get('MCU.ACCELPLL.Limits.VCO.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:when(
                                                                        ( node:fallback(../../McuPll_Configuration/McuPllFmSscgbyp, 'true') = 'false' )
                                                                        and
                                                                        ( node:fallback(../../McuPll_Configuration/McuPllFmSpreadctl, 'Center_Spread') = 'Down_Spread' ),
                                                                        num:f( node:fallback(., 1300000000 ) ) * (num:f(1) - ( num:f(2) * num:f(node:fallback(../../McuPll_Configuration/McuPllFdEmdp, 0)) ) div num:f(100)),
                                                                        num:f( node:fallback(., 1300000000 ) )
                                                                    ) &lt; num:i(ecu:get('MCU.ACCELPLL.Limits.VCO.Low'))
                                                                )
                                                            )
                                                        )
                                                        "
                                                        true="Please press the button to calculate the value automatically."/>
                                                    <a:tst expr="
                                                        (
                                                            (node:fallback(../../McuPLLEnabled,'false')='false') and
                                                            (num:f(node:fallback(., 0)) != 0)
                                                        )"
                                                        true="Please enable ACCEL_PLL ('McuPLLEnabled') before calculating the frequency."/>
                                                    </a:da>
                                                </v:var>

                                            </v:ctr>

                                        </v:ctr>

                                        <v:ctr name="McuPll_3" type="IDENTIFIABLE">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        This container provides the specific configuration for the DDR_PLL.
                                                        Note: Implementation Specific Container.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="TAB" value="McuDDRPLL"/>
                                            <a:a name="UUID" value="ECUC:cf44447a-0916-4267-a2b6-c69d729087c0"/>

                                            <v:var name="McuPLLUnderMcuControl" type="BOOLEAN">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            Set this to TRUE if this PLL is under mcu control <br />
                                                            If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                            The user must still set the values - they are used by the clock reference points  <br />
                                                            Note: Implementation Specific Parameter. <br />
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="LABEL" value="DDR PLL under MCU control"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:bab312c4-a6d2-487a-bdb0-4800f574ba1a"/>
                                                <a:da name="DEFAULT" type="XPath">
                                                    <a:tst expr="(node:fallback(../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'false')"/>
                                                </a:da>
                                                <a:da name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (node:fallback(., 'false') = 'true') and
                                                            (node:fallback(../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'true')
                                                        )"
                                                           true="DDR_PLL cannot be under MCU control if McuNoPll is enabled."/>
                                                    <a:tst expr="
                                                        (
                                                            ( node:fallback(., 'false') = 'true' ) and
                                                            ( node:fallback(as:modconf('Mcu')[1]/McuGeneralConfiguration/McuControlledClocksConfiguration/McuPll3UnderMcuControl, 'false') = 'false' )
                                                        )"
                                                        true="The field McuGeneralConfiguration/McuControlledClocksConfiguration/McuPll3UnderMcuControl must be set to 'true' when DDR_PLL is under MCU control."/>
                                                </a:da>
                                            </v:var>

                                            <v:var name="McuPLLEnabled" type="BOOLEAN">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            0 - DDR_PLL is disabled. <br />
                                                            1 - DDR_PLL is enabled (and can be used as a clock source). <br />
                                                            Note: Implementation Specific Parameter. <br />
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="LABEL" value="DDR PLL Enabled"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:1be167fc-e06b-4db8-a8d7-750306a736f2"/>
                                                <a:da name="DEFAULT" type="XPath">
                                                    <a:tst expr="(node:fallback(../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'false')"/>
                                                </a:da>
                                                <a:da name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (node:fallback(., 'false') = 'true') and
                                                            (node:fallback(../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'true')
                                                        )"
                                                           true="DDR_PLL cannot be enabled if McuNoPll is enabled."/>
                                                </a:da>
                                            </v:var>

                                            <v:var name="McuPllClockSelection" type="ENUMERATION">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            PLL Source Selection - PLLDIG_PLLCLKMUX[REFCLKSEL].  <br />
                                                            Note: Implementation Specific Parameter. <br />
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="LABEL" value="PLL Source Selection"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:0f08ce28-52c7-4548-990a-c05cf7186a54"/>
                                                <a:da name="DEFAULT" value="FIRC_CLK"/>
                                                <a:da name="WARNING" type="XPath">
                                                    <a:tst expr="(node:fallback(., 'FXOSC_CLK') = 'FIRC_CLK')"
                                                        true="It is highly recommended to only use FXOSC as this generally provides a more accurate system clock."/>
                                                </a:da>
                                                <a:da name="RANGE">
                                                    <a:v>FIRC_CLK</a:v>
                                                    <a:v>FXOSC_CLK</a:v>
                                                </a:da>
                                                <a:da name="INVALID" type="XPath">
                                                    <a:tst expr="( (node:fallback(., 'FXOSC_CLK') = 'FXOSC_CLK') and
                                                                   (node:fallback(../../../McuFXOSC/McuFxoscPowerDownCtr, 'false') = 'false')
                                                                 )"
                                                           true="If 'FXOSC_CLK' is selected as source clock, FXOSC ('McuFxoscPowerDownCtr') must be enabled."/>
                                                </a:da>
                                            </v:var>

                                            <v:ctr name="McuPll_Configuration" type="IDENTIFIABLE">
                                                <a:a name="UUID" value="ECUC:c866a4e2-be3b-4afc-bfb3-c6b662400da6"/>
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            Configuration values for PLL.  <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>

                                                <v:var name="McuPllDvRdiv" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Input clock predivider. <br />
                                                                Sets the PLL: PLLDIG_PLLDV[RDIV] field register. <br />
                                                                This field controls the value of the divider on the input clock. The output of the predivider circuit generates the reference clock to the PLL analog loop. <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:2b961a20-d586-407f-870e-bf6b2da7fe3d"/>
                                                    <a:da name="DEFAULT" value="2"/>
                                                    <a:a name="LABEL" value="RDIV"/>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=7"/>
                                                        <a:tst expr="&gt;=1"/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                         num:f(
                                                             num:f( num:i(number(node:fallback(../../McuPllClockSelection,'FIRC_CLK')='FIRC_CLK')) * num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                    num:i(number(node:fallback(../../McuPllClockSelection,'FIRC_CLK')='FXOSC_CLK')) *
                                                                    num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                  ) div
                                                                    num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) )
                                                              ) &gt; num:i(ecu:get('MCU.DDRPLL.Limits.ClkIn.High'))
                                                        )
                                                         or
                                                        (
                                                         num:f(
                                                             num:f( num:i(number(node:fallback(../../McuPllClockSelection,'FIRC_CLK')='FIRC_CLK')) * num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                    num:i(number(node:fallback(../../McuPllClockSelection,'FIRC_CLK')='FXOSC_CLK')) *
                                                                    num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                  ) div
                                                                    num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) )
                                                              ) &lt; num:i(ecu:get('MCU.DDRPLL.Limits.ClkIn.Low'))
                                                        )
                                                        "
                                                        true="The input frequency for the PLL (ReferenceClockFrequency/Rdiv) must be between 20 MHz and 40 MHz."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllDvMfi" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Loop multiplication factor divider. <br />
                                                                Sets the PLL: PLLDIG_PLLDV[MFI] field register. <br />
                                                                This field controls the value of the divider in the feedback loop. The value specified by the MFD bits
                                                                establishes the multiplication factor applied to the reference frequency. Divider value = MFD, where MFD
                                                                should be choosen such that it does not violate VCO frequency specifications. <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:395e1440-f6cc-4be8-a5d8-8cb92aebebf2"/>
                                                    <a:da name="DEFAULT" value="60"/>
                                                    <a:a name="LABEL" value="MFD"/>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=255"/>
                                                        <a:tst expr="&gt;=1"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllFmSscgbyp" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Modulation enable. <br />
                                                                This bit enables spectrum modulation. <br />
                                                                Set the PLL: PLLDIG_PLLFM[SSCGBYP] field. <br />
                                                                0 - Spread spectrum modulation is not bypassed. <br />
                                                                1 - Spread spectrum modulation is bypassed. <br />
                                                                Note: PLLFM[SSCGBYP] must be cleared and PLLFD[SDMEN] must be set for the frequency modulation mechanism to be enabled. <br />
                                                                Note: Frequency Modulation is only possible if PLLDIG_PLLFM[STEPSIZE] * PLLDIG_PLLFM[STEPNO] less than 18432. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:1c0b4b4b-c94f-44c9-b048-7e06c469f6fa"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:a name="LABEL" value="Spread spectrum modulation bypass"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'true') = 'false') and
                                                                    (node:fallback(../McuPllFdSdmen, 'false') = 'false')
                                                                )"
                                                               true="To enable spread spectrum modulation, please also enable PLLDIG_PLLFD[SDMEN]."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllFmSpreadctl" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Modulation type selection: <br />
                                                                    - Center around nominal frequency. <br />
                                                                    - Spread below nominal frequency. <br />
                                                                Configure the PLLDIG_PLLFM[SPREADCTL] field register. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Spread Selection"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:4d17a8cb-93fe-46ba-9a1b-2c4ed0292aa0"/>
                                                    <a:da name="DEFAULT" value="Center_Spread"/>
                                                    <a:da name="RANGE">
                                                        <a:v>Center_Spread</a:v>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllFmStepSize" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Modulation period. <br />
                                                                Sets the PLL: PLLDIG_PLLFM[STEPSIZE] field register. <br />
                                                                STEPSIZE is the binary equivalent of the modulation period variable. <br />
                                                                It is calculated as: StepSize = [McuPllFdMdp * (McuPllDvMfi + McuPllFdMfn / 18432) * 18432] / (100 * McuPllFmStepNo). <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8cbe4ea6-4dcb-48fb-b92d-d097d3ebc1f1"/>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        node:when(
                                                            ( ( node:fallback(../McuPllFdFmod, num:f(0)) != num:f(0) ) and ( node:fallback(../McuPllFdMdp, num:f(0)) != num:f(0) ) ),
                                                            num:i(
                                                                round(
                                                                    num:f(
                                                                        num:f( node:fallback(../McuPllFdMdp, num:f(0)) ) *
                                                                        num:f(
                                                                            num:f( node:fallback(../McuPllDvMfi, num:f(65)) ) +
                                                                            num:f(
                                                                                num:f( node:fallback(../McuPllFdMfn, num:f(0)) ) div
                                                                                num:f( 18432 )
                                                                            )
                                                                        ) *
                                                                        num:f( 18432 )
                                                                    ) div
                                                                    num:f(
                                                                        num:f( 100 ) *
                                                                        num:f( node:fallback(../McuPllFmStepNo, num:f(1)) )
                                                                    )
                                                                )
                                                            ),
                                                            num:i(0)
                                                        )"/>
                                                    </a:da>
                                                    <a:a name="LABEL" value="STEPSIZE"/>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=1023"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="( num:i(node:fallback(., 0)) * num:i(node:fallback(../McuPllFmStepNo, 1)) ) &gt; num:i(18432)"
                                                               true="McuPllFmStepSize * McuPllFmStepNo >= 18432. Please lower either StepSize or StepNo."/>
                                                        <a:tst expr="
                                                        (
                                                            not( node:empty( node:fallback(., 0) ) )
                                                            and
                                                            (
                                                                num:i( node:fallback(., 0) ) !=
                                                                (
                                                                    node:when(
                                                                        ( ( node:fallback(../McuPllFdFmod, num:f(0)) != num:f(0) ) and ( node:fallback(../McuPllFdMdp, num:f(0)) != num:f(0) ) ),
                                                                        num:i(
                                                                            round(
                                                                                num:f(
                                                                                    num:f( node:fallback(../McuPllFdMdp, num:f(0)) ) *
                                                                                    num:f(
                                                                                        num:f( node:fallback(../McuPllDvMfi, num:f(65)) ) +
                                                                                        num:f(
                                                                                            num:f( node:fallback(../McuPllFdMfn, num:f(0)) ) div
                                                                                            num:f( 18432 )
                                                                                        )
                                                                                    ) *
                                                                                    num:f( 18432 )
                                                                                ) div
                                                                                num:f(
                                                                                    num:f( 100 ) *
                                                                                    num:f( node:fallback(../McuPllFmStepNo, num:f(1)) )
                                                                                )
                                                                            )
                                                                        ),
                                                                        num:i(0)
                                                                    )
                                                                )
                                                            )
                                                        )"
                                                        true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllFmStepNo" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Increment step. <br />
                                                                Sets the PLL: PLLDIG_PLLFM[STEPNO] field register. <br />
                                                                This field is the binary equivalent of the STEPNO variable. <br />
                                                                It is calculated as: StepNo = McuClockReferencePointFrequency(McuPllClockSelection) / (2 * McuPllFdFmod * McuPllDvRdiv). <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:6dafd85f-9c8d-4268-9ed3-1a98df1bc3c6"/>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        node:when(
                                                            ( ( node:fallback(../McuPllFdFmod, num:f(0)) != num:f(0) ) and ( node:fallback(../McuPllFdMdp, num:f(0)) != num:f(0) ) ),
                                                            num:i(
                                                                round(
                                                                    num:f(
                                                                        num:i(number(node:fallback(../../McuPllClockSelection,'FIRC_CLK')='FIRC_CLK')) * num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                        num:i(number(node:fallback(../../McuPllClockSelection,'FIRC_CLK')='FXOSC_CLK')) *
                                                                        num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                    ) div
                                                                    num:f(
                                                                        num:f(2) *
                                                                        num:f(node:fallback(../McuPllFdFmod, num:f(0))) *
                                                                        num:f(node:fallback(../McuPllDvRdiv, num:f(1)))
                                                                    )
                                                                )
                                                            ),
                                                            num:i(1)
                                                        )"/>
                                                    </a:da>
                                                    <a:a name="LABEL" value="STEPNO"/>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=2047"/>
                                                        <a:tst expr="&gt;=1"/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="( num:i(node:fallback(., 1)) * num:i(node:fallback(../McuPllFmStepSize, 0)) ) &gt; num:i(18432)"
                                                               true="McuPllFmStepSize * McuPllFmStepNo >= 18432. Please lower either StepSize or StepNo."/>
                                                        <a:tst expr="
                                                        (
                                                            not( node:empty( node:fallback(., 1) ) )
                                                            and
                                                            (
                                                                num:i( node:fallback(., 1) ) !=
                                                                (
                                                                    node:when(
                                                                        ( ( node:fallback(../McuPllFdFmod, num:f(0)) != num:f(0) ) and ( node:fallback(../McuPllFdMdp, num:f(0)) != num:f(0) ) ),
                                                                        num:i(
                                                                            round(
                                                                                num:f(
                                                                                    num:i(number(node:fallback(../../McuPllClockSelection,'FIRC_CLK')='FIRC_CLK')) * num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                                    num:i(number(node:fallback(../../McuPllClockSelection,'FIRC_CLK')='FXOSC_CLK')) *
                                                                                    num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                                ) div
                                                                                num:f(
                                                                                    num:f(2) *
                                                                                    num:f(node:fallback(../McuPllFdFmod, num:f(0))) *
                                                                                    num:f(node:fallback(../McuPllDvRdiv, num:f(1)))
                                                                                )
                                                                            )
                                                                        ),
                                                                        num:i(1)
                                                                    )
                                                                )
                                                            )
                                                        )"
                                                        true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllFdFmod" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                The modulation frequency. This should be set to the highest frequency component present in the modulating signal. <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Modulation Frequency"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:ce300545-8257-4c4c-8de7-b3c148d675d0"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=64000"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:da>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( ( num:f(node:fallback(., 0)) != num:f(0) ) and ( node:fallback(../McuPllFmSscgbyp, 'true') = 'true' ) )"
                                                               true="Cannot have non-zero FM parameters while PLLDIG_PLLFM[SSCGBYP] = 1.
                                                                     Please disable spread spectrum modulation bypassing (i.e. uncheck 'McuPllFmSscgbyp')"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllFdMdp" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                The modulation depth percentage. This value indicates by how much the modulated variable varies around its unmodulated level. <br />
                                                                It is calculated as the FrequencyDeviation (deviation from the carrier/nominal frequency) divided by the ModulatingSignalFrequency(Fmod). <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Modulation Depth Percentage"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:ce500545-8257-0c4c-8de7-b3c575c362d0"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=3.0"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:da>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( ( num:f(node:fallback(., 0)) != num:f(0) ) and ( node:fallback(../McuPllFmSscgbyp, 'true') = 'true' ) )"
                                                               true="Cannot have non-zero FM parameters while PLLDIG_PLLFM[SSCGBYP] = 1.
                                                                     Please disable spread spectrum modulation bypassing (i.e. uncheck 'McuPllFmSscgbyp')"/>
                                                        <a:tst expr="
                                                        (
                                                            not( node:empty( node:fallback(., 0) ) )
                                                            and
                                                            ( node:fallback(../McuPllFmSscgbyp, 'true') = 'false' )
                                                            and
                                                            ( node:fallback(../McuPllFmSpreadctl, 'Center_Spread') = 'Center_Spread')
                                                            and
                                                            (
                                                                ( num:f( node:fallback(., 0) ) &lt; 0.25 )
                                                                or
                                                                ( num:f( node:fallback(., 0) ) &gt; 1.5 )
                                                            )
                                                        )"
                                                        true="The inserted value exceeds the supported min/max modulation depth limits for center spread modulation."/>
                                                        <a:tst expr="
                                                        (
                                                            not( node:empty( node:fallback(., 0) ) )
                                                            and
                                                            ( node:fallback(../McuPllFmSscgbyp, 'true') = 'false' )
                                                            and
                                                            ( node:fallback(../McuPllFmSpreadctl, 'Center_Spread') = 'Down_Spread')
                                                            and
                                                            (
                                                                ( num:f( node:fallback(., 0) ) &lt; 0.5 )
                                                                or
                                                                ( num:f( node:fallback(., 0) ) &gt; 3.0 )
                                                            )
                                                        )"
                                                        true="The inserted value exceeds the supported min/max modulation depth limits for down spread modulation."/>
                                                        <a:tst expr="
                                                        (
                                                            not( node:empty( node:fallback(., 0) ) )
                                                            and
                                                            ( node:fallback(../McuPllFmSscgbyp, 'true') = 'false' )
                                                            and
                                                            (
                                                                num:f( node:fallback(., 0) ) &gt;
                                                                (
                                                                    num:f( num:i(number(node:fallback(../../McuPllClockSelection,'FIRC_CLK')='FIRC_CLK')) * num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                           num:i(number(node:fallback(../../McuPllClockSelection,'FIRC_CLK')='FXOSC_CLK')) *
                                                                           num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                    ) div
                                                                    num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) ) div
                                                                    num:f( node:fallback(../../McuPll_Parameter/PLL_VCO_Frequency, num:f(ecu:get('MCU.DDRPLL.Limits.VCO.High')) ) ) *
                                                                    num:f( 100 )
                                                                )
                                                            )
                                                        )"
                                                        true="The inserted value exceeds the maximum peak-to-peak MDP, which is calculated as ((Fref / McuPllDvRdiv) / PLL_VCO_Frequency) * 100"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllFdEmdp" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                The effective modulation depth percentage. Because of the rounding operations applied to StepSize and StepNo,
                                                                the effective MDP may differ from the intended MDP (i.e. the value of 'McuPllFdMdp'). <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Effective Modulation Depth Percentage"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:ce500545-8857-4c4c-8de7-b5b575c682c3"/>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        node:when(
                                                            ( ( node:fallback(../McuPllFdFmod, num:f(0)) != num:f(0) ) and ( node:fallback(../McuPllFdMdp, num:f(0)) != num:f(0) ) ),
                                                            num:i(
                                                                round(
                                                                    num:f(
                                                                        num:f( node:fallback(../McuPllFmStepSize, num:f(0)) ) *
                                                                        num:f( node:fallback(../McuPllFmStepNo, num:f(1)) ) *
                                                                        num:f( 100 )
                                                                    ) div
                                                                    num:f(
                                                                        num:f( 18432 ) *
                                                                        num:f(
                                                                            num:f( node:fallback(../McuPllDvMfi, num:f(65)) ) +
                                                                            num:f(
                                                                                num:f( node:fallback(../McuPllFdMfn, num:f(0)) ) div
                                                                                num:f( 18432 )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                            ),
                                                            num:i(0)
                                                        )"/>
                                                    </a:da>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=3"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:da>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                        (
                                                            not( node:empty( node:fallback(., 0) ) )
                                                            and
                                                            (
                                                                num:i( node:fallback(., 0) ) !=
                                                                (
                                                                    node:when(
                                                                        ( ( node:fallback(../McuPllFdFmod, num:f(0)) != num:f(0) ) and ( node:fallback(../McuPllFdMdp, num:f(0)) != num:f(0) ) ),
                                                                        num:i(
                                                                            round(
                                                                                num:f(
                                                                                    num:f( node:fallback(../McuPllFmStepSize, num:f(0)) ) *
                                                                                    num:f( node:fallback(../McuPllFmStepNo, num:f(1)) ) *
                                                                                    num:f( 100 )
                                                                                ) div
                                                                                num:f(
                                                                                    num:f( 18432 ) *
                                                                                    num:f(
                                                                                        num:f( node:fallback(../McuPllDvMfi, num:f(65)) ) +
                                                                                        num:f(
                                                                                            num:f( node:fallback(../McuPllFdMfn, num:f(0)) ) div
                                                                                            num:f( 18432 )
                                                                                        )
                                                                                    )
                                                                                )
                                                                            )
                                                                        ),
                                                                        num:i(0)
                                                                    )
                                                                )
                                                            )
                                                        )"
                                                        true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllFdMfn" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Numerator for fractional loop division factor - PLLDIG_PLLFD[MFN]. <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="MFN"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:ce5ac545-a257-4c4c-8de7-a1b919d675d0"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=32767"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:da>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                                (
                                                                    (num:i(node:fallback(., 0)) != 0) and
                                                                    (node:fallback(../McuPllFdSdmen, 'false') != 'true')
                                                                )"
                                                               true="Fractional loop division factor works only when PLLDIG_PLLFD[SDMEN] is enabled."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllFdSdmen" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Sigma Delta Modulation Enable. <br />
                                                                Set the PLL: PLLDIG_PLLFD[SDMEN] field register. <br />
                                                                0 - Sigma delta modulation enabled. <br />
                                                                1 - Sigma delta modulation disabled. <br />
                                                                Note: PLLFM[SSCGBYP] must be cleared and PLLFD[SDMEN] must be set for the frequency modulation mechanism to be enabled. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:7a41a21a-e5b3-422b-8976-9096d3cc8c1d"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:a name="LABEL" value="Sigma Delta Modulation Enable"/>
                                                </v:var>

                                                <v:var name="McuPllOdiv0_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                PHI0 Divider enable. <br />
                                                                Set the PLL: PLLDIG_PLLODIV0[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PHI0 Divider enable"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8d848bc4-c9a3-81d8-9f9d-b74b444d76ac"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="(ecu:get('MCU.DDRPLL.Terminals.PHI0.Connected') = 'true') or ((ecu:get('MCU.DDRPLL.Terminals.PHI0.Connected') = 'false') and (node:fallback(., 'false') = 'true')) "/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'false') = 'true') and (node:fallback(../../McuPLLEnabled, 'false') = 'false') )"
                                                               true="DDR_PLL must be enabled before enabling PLL_ODIV0."/>
                                                        <a:tst expr="( (ecu:get('MCU.DDRPLL.Terminals.PHI0.Connected') = 'false') and (node:fallback(., 'false') = 'true'))"
                                                               true="This feature is not support on this platform. The value of this node should be set to false."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllOdiv0_Div" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                PHI0 Division value. <br />
                                                                PLLDIG_PLLODIV0[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="PHI0 Division value"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:f4a35a47-c1b1-4b1e-be5d-af0ab7e64c80"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuPllOdiv0_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=255"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:da>
                                                </v:var>

                                            </v:ctr>

                                            <v:ctr name="McuPll_Parameter" type="IDENTIFIABLE">
                                                <a:a name="UUID" value="ECUC:c6be7b51-5ea9-4a2a-8e18-d4f4e99c124b"/>
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            Calculated values for PLL. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>

                                                <v:var name="PLL_PHI0_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Output value for <strong>DDR_PLL_PHI0_CLK frequency</strong>. <br />
                                                                The valid range is [0 ... 800] MHz, the valid value is 0 when disabled. <br />
                                                                Note: This field must not be manually modified. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PLL_PHI0 Frequency (Calculated)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:752ef402-ccc2-466a-aae3-fb472f16c437"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../../McuPll_Configuration/McuPllOdiv0_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                             num:f(number(node:fallback(../../McuPll_Configuration/McuPllOdiv0_En,'false')='true')) *
                                                             (
                                                                 num:f( num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FIRC_CLK')) * num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                        num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FXOSC_CLK')) *
                                                                        num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                      ) *
                                                                num:f(
                                                                    num:f(
                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvMfi, num:f(65) ) ) +
                                                                        num:f(
                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllFdMfn, num:f(0) ) ) div
                                                                            num:f( 18432 )
                                                                        )
                                                                    ) div
                                                                    num:f(
                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) ) *
                                                                        (node:when(
                                                                                   node:fallback(../../McuPll_Configuration/McuPllOdiv0_En,'false') = 'true',
                                                                                   node:fallback(../../McuPll_Configuration/McuPllOdiv0_Div,num:i(19)),
                                                                                   num:i(0)
                                                                                  ) + num:f(1))
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                        "/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.DDRPLL.Limits.PHI0.High')"/>
                                                        <a:tst expr="&gt;=(ecu:get('MCU.DDRPLL.Limits.PHI0.Low') * num:f(number(node:fallback(../../McuPll_Configuration/McuPllOdiv0_En,'false')='true')))"/>
                                                    </a:a>
                                                    <a:da name="RANGE" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (
                                                                (node:fallback(../../McuPll_Configuration/McuPllOdiv0_En,'false')='true') or
                                                                (num:f(node:fallback(., 0)) != 0)
                                                            )
                                                            and
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 800000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 800000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(number(node:fallback(../../McuPll_Configuration/McuPllOdiv0_En,'false')='true')) *
                                                                                (
                                                                                     num:f( num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FIRC_CLK')) * num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                                            num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FXOSC_CLK')) *
                                                                                            num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                                          ) *
                                                                                    num:f(
                                                                                        num:f(
                                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllDvMfi, num:f(65) ) ) +
                                                                                            num:f(
                                                                                                num:f( node:fallback(../../McuPll_Configuration/McuPllFdMfn, num:f(0) ) ) div
                                                                                                num:f( 18432 )
                                                                                            )
                                                                                        ) div
                                                                                        num:f(
                                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) ) *
                                                                                            (node:when(
                                                                                                       node:fallback(../../McuPll_Configuration/McuPllOdiv0_En,'false') = 'true',
                                                                                                       node:fallback(../../McuPll_Configuration/McuPllOdiv0_Div,num:i(19)),
                                                                                                       num:i(0)
                                                                                                      ) + num:f(1))
                                                                                            )
                                                                                        )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:when(
                                                                        ( node:fallback(../../McuPll_Configuration/McuPllFmSscgbyp, 'true') = 'false' )
                                                                        and
                                                                        ( node:fallback(../../McuPll_Configuration/McuPllFmSpreadctl, 'Center_Spread') = 'Center_Spread' ),
                                                                        num:f( node:fallback(., 800000000 ) ) * (num:f(1) + num:f(node:fallback(../../McuPll_Configuration/McuPllFdMdp, 0)) div num:f(200)),
                                                                        num:f( node:fallback(., 800000000 ) )
                                                                    ) &gt; num:i(ecu:get('MCU.DDRPLL.Limits.PHI0.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:when(
                                                                        ( node:fallback(../../McuPll_Configuration/McuPllFmSscgbyp, 'true') = 'false' )
                                                                        and
                                                                        ( node:fallback(../../McuPll_Configuration/McuPllFmSpreadctl, 'Center_Spread') = 'Down_Spread' ),
                                                                        num:f( node:fallback(., 20600000 ) ) * (num:f(1) - ( num:f(2) * num:f(node:fallback(../../McuPll_Configuration/McuPllFdEmdp, 0)) ) div num:f(100)),
                                                                        num:f( node:fallback(., 20600000 ) )
                                                                    ) &lt; num:i(ecu:get('MCU.DDRPLL.Limits.PHI0.Low'))
                                                                )
                                                            )
                                                        )
                                                        "
                                                        true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="PLL_VCO_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Output value for <strong>DDR_PLL_VCO frequency</strong>. <br />
                                                                The valid range is [1300 ... 1600] MHz, the valid value is 0 when disabled. <br />
                                                                Note: This field must not be manually modified. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PLL_VCO Frequency (Calculated)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:9b45406d-0d10-444d-9591-249c542f5ee1"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../../McuPLLEnabled, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                            num:f(
                                                                num:f(number(node:fallback(../../McuPLLEnabled, 'false') = 'true')) *
                                                                (
                                                                    num:f(
                                                                        num:f( num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FIRC_CLK')) * num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                               num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FXOSC_CLK')) *
                                                                               num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                             ) div
                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) )
                                                                    ) *
                                                                    num:f(
                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvMfi, num:f(65) ) ) +
                                                                        num:f(
                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllFdMfn, num:f(0) ) ) div
                                                                            num:f(18432)
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                        "/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.DDRPLL.Limits.VCO.High')"/>
                                                        <a:tst expr="&gt;=(ecu:get('MCU.DDRPLL.Limits.VCO.Low') * num:f(number(node:fallback(../../McuPLLEnabled, 'false') = 'true')))"/>
                                                    </a:a>
                                                    <a:da name="RANGE" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (
                                                                (node:fallback(../../McuPLLEnabled,'false') = 'true') or
                                                                (num:f(node:fallback(., 0)) != 0)
                                                            )
                                                            and
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 1600000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 1600000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(number(node:fallback(../../McuPLLEnabled, 'false') = 'true')) *
                                                                                (
                                                                                    num:f(
                                                                                        num:f( num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FIRC_CLK')) * num:i(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) +
                                                                                               num:i(number(node:fallback(../../McuPllClockSelection,'FXOSC_CLK')='FXOSC_CLK')) *
                                                                                               num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                                             ) div
                                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) )
                                                                                    ) *
                                                                                    num:f(
                                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvMfi, num:f(65) ) ) +
                                                                                        num:f(
                                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllFdMfn, num:f(0) ) ) div
                                                                                            num:f(18432)
                                                                                        )
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:when(
                                                                        ( node:fallback(../../McuPll_Configuration/McuPllFmSscgbyp, 'true') = 'false' )
                                                                        and
                                                                        ( node:fallback(../../McuPll_Configuration/McuPllFmSpreadctl, 'Center_Spread') = 'Center_Spread' ),
                                                                        node:fallback(., num:i(1600000000) ) * (num:f(1) + num:f(node:fallback(../../McuPll_Configuration/McuPllFdMdp, 0)) div num:f(200)),
                                                                        node:fallback(., num:i(1600000000) )
                                                                    ) &gt; num:i(ecu:get('MCU.DDRPLL.Limits.VCO.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:when(
                                                                        ( node:fallback(../../McuPll_Configuration/McuPllFmSscgbyp, 'true') = 'false' )
                                                                        and
                                                                        ( node:fallback(../../McuPll_Configuration/McuPllFmSpreadctl, 'Center_Spread') = 'Down_Spread' ),
                                                                        num:f( node:fallback(., 1300000000 ) ) * (num:f(1) - ( num:f(2) * num:f(node:fallback(../../McuPll_Configuration/McuPllFdEmdp, 0)) ) div num:f(100)),
                                                                        num:f( node:fallback(., 1300000000 ) )
                                                                    ) &lt; num:i(ecu:get('MCU.DDRPLL.Limits.VCO.Low'))
                                                                )
                                                            )
                                                        )
                                                        "
                                                        true="Please press the button to calculate the value automatically."/>
                                                    <a:tst expr="
                                                        (
                                                            (node:fallback(../../McuPLLEnabled,'false')='false') and
                                                            (num:f(node:fallback(., 0)) != 0)
                                                        )"
                                                        true="Please enable DDR_PLL ('McuPLLEnabled') before calculating the frequency."/>
                                                    </a:da>
                                                </v:var>

                                            </v:ctr>

                                        </v:ctr>

                                        <v:lst name="McuClkMonitor" type="MAP">
                                            <a:da name="MIN" type="XPath" expr="num:i(count(ecu:list('MCU.CMU_FC.List')))"/>
                                            <a:da name="INVALID" type="XPath">
                                                <a:tst expr="count(./*) &gt; num:i(count(ecu:list('MCU.CMU_FC.List')))"
                                                    true="The number of McuClkMonitor more than maximum value allowed"/>
                                            </a:da>

                                            <v:ctr name="McuClkMonitor" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container contains the specific configuration (parameters) of the Clock Monitor Unit. <br />
                                                            Each CMU is independently programmed. FIRC and FXOSC are used as the clock monitor references. <br />
                                                            Detailed information on the CMUs can be found in the Clock Monitor Unit chapter. <br />
                                                            This parameter is enabled only if "McuClockSrcFailureNotification" is enabled. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuClkMonitor"/>
                                                <a:a name="UUID" value="ECUC:8cbac65c-6a3d-4b29-b3a4-b1bebf97a468"/>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS"  type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v mclass="PreCompile">VariantPostBuild</icc:v>
                                                    <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                                                </a:a>

                                                <v:var name="McuClockMonitorUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock monitor is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="Mcu Clock Monitor under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:e424418b-1f63-453a-b0b2-ac018578243e"/>
                                                    <a:da name="DEFAULT" type="XPath">
                                                            <a:tst expr="
                                                            (
                                                                node:when(
                                                                    text:contains(node:fallback(../McuCmuName, ecu:get('MCU.CMU_FC.Default')),'NONE'),
                                                                    false(),
                                                                    not(text:contains(ecu:list('MCU.CMU_FC.Default.DisableUnderControl'), node:fallback(../McuCmuName, 'NONE')))
                                                                )
                                                            )
                                                            "/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClkMonitorEn" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Enables/Disables the clock monitor (CMU_FC_GCR[FCE]). <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CMU Enable"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:c7aee6bc-63df-462e-b6d3-ff74458067e5"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                               (
                                                                    (node:fallback(., 'false') = 'true') and
                                                                    (node:fallback(as:modconf('Mcu')[1]/McuModuleConfiguration/McuClockSrcFailureNotification, 'ENABLED') = 'DISABLED')
                                                               )"
                                                               true="The CMU can be enabled only if 'McuModuleConfiguration/McuClockSrcFailureNotification' is set to 'ENABLED'."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuCmuName" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the name of the CMU. <br />
                                                                With name convention: CMU_FC_[Number Of CMU Unit]_[Name of Monitored clock]. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="Mcu CMU Name"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="UUID" value="ECUC:0fef779b-bf2c-466a-9110-56a48d8e3e16"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:list('MCU.CMU_FC.List')[num:i(node:fallback(node:current()/../@index, num:i(0)) + 1)]"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CMU_FC.List')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="text:uniq(node:fallback(../../*/McuCmuName, ecu:list('MCU.CMU_FC.List')), node:fallback(., ecu:get('MCU.CMU_FC.Default')))"
                                                            false="Duplicated value, McuCmuName must be unique across McuClkMonitor."/>
                                                        <a:tst expr="node:fallback(., ecu:get('MCU.CMU_FC.Default')) = ecu:list('MCU.CMU_FC.List')[num:i(node:fallback(node:current()/../@index, num:i(0)) + 1)]"
                                                            false="Number of CMU_FC Unit must be increased according to the index. Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuAsyncFHHInterruptEn" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This field is used to enable/disable FHH asynchronous interrupt at the module boundary. (CMU_FC_IER[FHHAIE]). <br />
                                                                0 - Asynchronous FHH Interrupt is Disabled <br />
                                                                1 - Asynchronous FHH Interrupt is Enabled <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="Enable FHH Asynchronous Interrupt"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:c7a16eba-631f-462e-b6d3-ff74f57a67e5"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="(text:tolower(text:contains(ecu:list('MCU.CMU_FC.AsyncIE.Support'),../McuCmuName))='true')
                                                            or ((text:tolower(text:contains(ecu:list('MCU.CMU_FC.AsyncIE.Support'),../McuCmuName))='false') and (.='true'))"/>
                                                    </a:a>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="(text:tolower(text:contains(ecu:list('MCU.CMU_FC.AsyncIE.Support'),../McuCmuName))='false') and (.='true')"
                                                            true="This feature is not supported by this CMU_FC. Please uncheck this feature."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuAsyncFLLInterruptEn" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This field is used to enable/disable FLL asynchronous interrupt at the module boundary. (CMU_FC_IER[FLLAIE]). <br />
                                                                0 - Asynchronous FLL Interrupt is Disabled <br />
                                                                1 - Asynchronous FLL Interrupt is Enabled <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="Enable FLL Asynchronous Interrupt"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:c7a16eba-63df-48ee-b6d3-ff74db9e67e5"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="(text:tolower(text:contains(ecu:list('MCU.CMU_FC.AsyncIE.Support'),../McuCmuName))='true')
                                                            or ((text:tolower(text:contains(ecu:list('MCU.CMU_FC.AsyncIE.Support'),../McuCmuName))='false') and (.='true'))"/>
                                                    </a:a>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="(text:tolower(text:contains(ecu:list('MCU.CMU_FC.AsyncIE.Support'),../McuCmuName))='false') and (.='true')"
                                                            true="This feature is not supported by this CMU_FC. Please uncheck this feature."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuSyncFHHInterruptEn" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This field is used to enable/disable FHH synchronous interrupt at the module boundary. (CMU_FC_IER[FHHIE]). <br />
                                                                0 - Synchronous FHH Interrupt is Disabled <br />
                                                                1 - Synchronous FHH Interrupt is Enabled <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="Enable FHH Synchronous Interrupt"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:c7a16eba-63df-462e-b6d3-ff74f57a67e5"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="(text:tolower(text:contains(ecu:list('MCU.CMU_FC.SyncIE.Support'),../McuCmuName))='true')
                                                            or ((text:tolower(text:contains(ecu:list('MCU.CMU_FC.SyncIE.Support'),../McuCmuName))='false') and (.='true'))"/>
                                                    </a:a>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="(text:tolower(text:contains(ecu:list('MCU.CMU_FC.SyncIE.Support'),../McuCmuName))='false') and (.='true')"
                                                            true="This feature is not supported by this CMU_FC. Please uncheck this feature."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuSyncFLLInterruptEn" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This field is used to enable/disable FLL synchronous interrupt at the module boundary. (CMU_FC_IER[FLLIE]). <br />
                                                                0 - Synchronous FLL Interrupt is Disabled <br />
                                                                1 - Synchronous FLL Interrupt is Enabled <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="Enable FLL Synchronous Interrupt"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:c7a16eba-63df-462e-b6d3-ff74db9e67e5"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="(text:tolower(text:contains(ecu:list('MCU.CMU_FC.SyncIE.Support'),../McuCmuName))='true')
                                                            or ((text:tolower(text:contains(ecu:list('MCU.CMU_FC.SyncIE.Support'),../McuCmuName))='false') and (.='true'))"/>
                                                    </a:a>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="(text:tolower(text:contains(ecu:list('MCU.CMU_FC.SyncIE.Support'),../McuCmuName))='false') and (.='true')"
                                                            true="This feature is not supported by this CMU_FC. Please uncheck this feature."/>
                                                    </a:da>
                                                </v:var>
                                            </v:ctr>
                                        </v:lst>

                                        <!-- /** @implements McuClockReferencePoint_Object */ -->
                                        <v:lst name="McuClockReferencePoint" type="MAP">
                                            <a:da name="MIN" value="1"/>
                                            <v:ctr name="McuClockReferencePoint" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container defines a reference point in the Mcu Clock tree. It defines the frequency which then can be used by other modules as an input value. Lower multiplictiy is 1, as even in the simpliest case (only one frequency is used), there is one frequency to be defined.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="UUID" value="ECUC:dcc84cdf-93ef-4cca-821b-b1a7f56dcfec"/>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v mclass="PreCompile">VariantPostBuild</icc:v>
                                                </a:a>

                                                <!-- /** @implements McuClockReferencePointFrequency_Object */ -->
                                                <v:var name="McuClockReferencePointFrequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the McuClockReferencePoint container.
                                                                It shall be given in Hz.
                                                                Calculated value.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="LABEL" value="Mcu Clock Reference Point Frequency"/>
                                                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:56f2133a-6d79-4c14-8608-708988a4fd7e"/>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="num:f
                                                                        (   (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'XBAR_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux0/McuClockMux0_Frequency, 48000000)) div num:f(2))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'XBAR_DIV2_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux0/McuClockMux0_Frequency, 48000000)) div num:f(4))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'XBAR_DIV3_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux0/McuClockMux0_Frequency, 48000000)) div num:f(6))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'XBAR_DIV4_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux0/McuClockMux0_Frequency, 48000000)) div num:f(8))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'XBAR_DIV6_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux0/McuClockMux0_Frequency, 48000000)) div num:f(12))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'LBIST_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux0/McuClockMux0Divider0_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'DAPB_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux0/McuClockMux0Divider1_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'CLKOUT0'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux1/McuClockMux1Divider0_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'CLKOUT1'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux2/McuClockMux2Divider0_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'PER_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux3/McuClockMux3Divider0_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'FTM_0_REF_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux4/McuClockMux4Divider0_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'FTM_1_REF_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux5/McuClockMux5Divider0_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'FLEXRAY_PE_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux6/McuClockMux6Divider0_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'CAN_PE_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux7/McuClockMux7_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'LIN_BAUD_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux8/McuClockMux8_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'LINFLEXD_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux8/McuClockMux8_Frequency, 48000000)) div num:f(2))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'GMAC_TS_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux9/McuClockMux9Divider0_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'GMAC0_TX_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux10/McuClockMux10Divider0_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'GMAC0_RX_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux11/McuClockMux11_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'QSPI_2X_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux12/McuClockMux12Divider0_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'QSPI_1X_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux12/McuClockMux12Divider0_Frequency, 48000000)) div num:f(2))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'SDHC_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux14/McuClockMux14Divider0_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'GMAC0_REF_DIV_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux15/McuClockMux15Divider0_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'GMAC0_REF_CLK'))) *
                                                                                (
                                                                                    (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux15/McuClockMux15_Frequency, 48000000))) *
                                                                                    num:i(number(contains(ecu:get('MCU.CGM0.ClockMuxes.List'),'CLKMUX_15') = 'true'))
                                                                                    +
                                                                                    (num:f(node:fallback(../../../McuCgm6SettingConfig/McuCgm6ClockMux3/McuClockMux3_Frequency, 48000000))) *
                                                                                    num:i(number(contains(ecu:get('MCU.CGM6.ClockMuxes.List'),'CLKMUX_3') = 'true'))
                                                                                )
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'SPI_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux16/McuClockMux16_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'A53_CORE_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm1SettingConfig/McuCgm1ClockMux0/McuClockMux0_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'A53_CORE_DIV2_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm1SettingConfig/McuCgm1ClockMux0/McuClockMux0_Frequency, 48000000)) div num:f(2))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'A53_CORE_DIV10_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm1SettingConfig/McuCgm1ClockMux0/McuClockMux0_Frequency, 48000000)) div num:f(10))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'PFEMAC0_TX_DIV_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux1/McuClockMux1Divider0_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'PFEMAC0_REF_DIV_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux7/McuClockMux7Divider0_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'PFEMAC0_RX_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux4/McuClockMux4_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'PFEMAC1_TX_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux2/McuClockMux2Divider0_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'PFEMAC1_REF_DIV_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux8/McuClockMux8Divider0_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'PFEMAC1_RX_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux5/McuClockMux5_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'PFEMAC2_TX_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux3/McuClockMux3Divider0_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'PFEMAC2_REF_DIV_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux9/McuClockMux9Divider0_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'PFEMAC2_RX_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux6/McuClockMux6_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'PFE_PE_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux0/McuClockMux0Divider0_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'PFE_SYS_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux0/McuClockMux0Divider0_Frequency, 48000000)) div num:f(2))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'DDR_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm5SettingConfig/McuCgm5ClockMux0/McuClockMux0_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'SERDES_REF_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI0_Frequency, 16000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'FIRC_CLK'))) *
                                                                                (num:f(ecu:get('MCU.FIRC.Limits.FIRC.Typical')))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'SNVS_CLK'))) *
                                                                                (num:f(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) div num:f(1500))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'SIRC_CLK'))) *
                                                                                (num:f(ecu:get('MCU.SIRC.Limits.SIRC.Typical')))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'FXOSC_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, 40000000)))
                                                                            ) +
                                                                            (   ( num:f( number( node:fallback( ../McuClockFrequencySelect, 'XBAR_CLK') = 'CUSTOM') ) ) *
                                                                                ( node:fallback(., 0) )
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'ACCEL_3_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux0/McuClockMux0Divider0_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'ACCEL_3_DIV3_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux0/McuClockMux0Divider0_Frequency, 48000000)) div num:f(3))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'ACCEL_4_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux1/McuClockMux1Divider0_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'DOF_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux0/McuClockMux0_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'SGM_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux1/McuClockMux1_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'REC_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux2/McuClockMux2Divider0_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'ISP_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux3/McuClockMux3_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'SEQ_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux5/McuClockMux5_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'APEXD_0_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux6/McuClockMux6_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'APEXD_1_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux7/McuClockMux7_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'APEXD_2_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux8/McuClockMux8_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'DCU_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux9/McuClockMux9_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'RTC_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuRtcClockSelect/McuRtc_Frequency, 48000000)))
                                                                            )
                                                                        )"/>
                                                    </a:da>
                                                    <a:a name="RANGE" type="XPath">
                                                        <a:tst expr="not(node:empty(node:fallback(., 80000000))) and
                                                                        (   num:f(node:fallback(., 0)) !=
                                                                            num:f
                                                                                (
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'XBAR_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux0/McuClockMux0_Frequency, 48000000)) div num:f(2))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'XBAR_DIV2_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux0/McuClockMux0_Frequency, 48000000)) div num:f(4))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'XBAR_DIV3_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux0/McuClockMux0_Frequency, 48000000)) div num:f(6))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'XBAR_DIV4_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux0/McuClockMux0_Frequency, 48000000)) div num:f(8))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'XBAR_DIV6_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux0/McuClockMux0_Frequency, 48000000)) div num:f(12))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'LBIST_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux0/McuClockMux0Divider0_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'DAPB_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux0/McuClockMux0Divider1_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'CLKOUT0'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux1/McuClockMux1Divider0_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'CLKOUT1'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux2/McuClockMux2Divider0_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'PER_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux3/McuClockMux3Divider0_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'FTM_0_REF_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux4/McuClockMux4Divider0_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'FTM_1_REF_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux5/McuClockMux5Divider0_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'FLEXRAY_PE_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux6/McuClockMux6Divider0_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'CAN_PE_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux7/McuClockMux7_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'LIN_BAUD_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux8/McuClockMux8_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'LINFLEXD_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux8/McuClockMux8_Frequency, 48000000)) div num:f(2))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'GMAC_TS_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux9/McuClockMux9Divider0_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'GMAC0_TX_CLK'))) *
                                                                                    (   num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux10/McuClockMux10Divider0_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'GMAC0_RX_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux11/McuClockMux11_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'QSPI_2X_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux12/McuClockMux12Divider0_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'QSPI_1X_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux12/McuClockMux12Divider0_Frequency, 48000000)) div num:f(2))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'SDHC_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux14/McuClockMux14Divider0_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'GMAC0_REF_DIV_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux15/McuClockMux15Divider0_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'GMAC0_REF_CLK'))) *
                                                                                        (
                                                                                            (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux15/McuClockMux15_Frequency, 48000000))) *
                                                                                            num:i(number(contains(ecu:get('MCU.CGM0.ClockMuxes.List'),'CLKMUX_15') = 'true'))
                                                                                            +
                                                                                            (num:f(node:fallback(../../../McuCgm6SettingConfig/McuCgm6ClockMux3/McuClockMux3_Frequency, 48000000))) *
                                                                                            num:i(number(contains(ecu:get('MCU.CGM6.ClockMuxes.List'),'CLKMUX_3') = 'true'))
                                                                                        )
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'SPI_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux16/McuClockMux16_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'A53_CORE_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm1SettingConfig/McuCgm1ClockMux0/McuClockMux0_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'A53_CORE_DIV2_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm1SettingConfig/McuCgm1ClockMux0/McuClockMux0_Frequency, 48000000)) div num:f(2))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'A53_CORE_DIV10_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm1SettingConfig/McuCgm1ClockMux0/McuClockMux0_Frequency, 48000000)) div num:f(10))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'PFEMAC0_TX_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux1/McuClockMux1Divider0_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'PFEMAC0_REF_DIV_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux7/McuClockMux7Divider0_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'PFEMAC0_RX_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux4/McuClockMux4_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'PFEMAC1_TX_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux2/McuClockMux2Divider0_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'PFEMAC1_REF_DIV_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux8/McuClockMux8Divider0_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'PFEMAC1_RX_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux5/McuClockMux5_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'PFEMAC2_TX_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux3/McuClockMux3Divider0_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'PFEMAC2_REF_DIV_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux9/McuClockMux9Divider0_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'PFEMAC2_RX_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux6/McuClockMux6_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'PFE_PE_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux0/McuClockMux0Divider0_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'PFE_SYS_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux0/McuClockMux0Divider0_Frequency, 48000000)) div num:f(2))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'DDR_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm5SettingConfig/McuCgm5ClockMux0/McuClockMux0_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'SERDES_REF_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI0_Frequency, 16000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'FIRC_CLK'))) *
                                                                                        (num:f(ecu:get('MCU.FIRC.Limits.FIRC.Typical')))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'SNVS_CLK'))) *
                                                                                        (num:f(ecu:get('MCU.FIRC.Limits.FIRC.Typical')) div num:f(1500))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'SIRC_CLK'))) *
                                                                                        (num:f(ecu:get('MCU.SIRC.Limits.SIRC.Typical')))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'FXOSC_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, 40000000)))
                                                                                    ) +
                                                                                    (   ( num:f( number( node:fallback( ../McuClockFrequencySelect, 'XBAR_CLK') = 'CUSTOM') ) ) *
                                                                                        ( node:fallback(., 0) )
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'ACCEL_3_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux0/McuClockMux0Divider0_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'ACCEL_3_DIV3_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux0/McuClockMux0Divider0_Frequency, 48000000)) div num:f(3))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'ACCEL_4_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux1/McuClockMux1Divider0_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'DOF_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux0/McuClockMux0_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'SGM_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux1/McuClockMux1_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'REC_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux2/McuClockMux2Divider0_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'ISP_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux3/McuClockMux3_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'SEQ_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux5/McuClockMux5_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'APEXD_0_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux6/McuClockMux6_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'APEXD_1_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux7/McuClockMux7_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'APEXD_2_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux8/McuClockMux8_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'DCU_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux9/McuClockMux9_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'XBAR_CLK') = 'RTC_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuRtcClockSelect/McuRtc_Frequency, 48000000)))
                                                                                    )
                                                                                )
                                                                        )"
                                                        true="Please press the button to calculate the value automatically."/>
                                                    </a:a>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=5000000000"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClockFrequencySelect" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Select clock source for the specific instance of the McuClockReferencePoint container. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="LABEL" value="Mcu Clock Frequency Select" />
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:e699f695-3db5-4f60-a174-5aa4454a697f"/>
                                                    <a:da name="DEFAULT" value="XBAR_CLK"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.ClockReferencePoints.List')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="(  (node:fallback(., 'XBAR_CLK')='LBIST_CLK') and
                                                                        (node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux0/McuClkMux0Div0_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM0 Clock Mux0 Divider0 should be enabled. Please check node McuCgm0ClockMux0/McuClkMux0Div0_En"/>
                                                        <a:tst expr="(  (node:fallback(., 'XBAR_CLK')='DAPB_CLK') and
                                                                        (node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux0/McuClkMux0Div1_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM0 Clock Mux0 Divider1 should be enabled. Please check node McuCgm0ClockMux0/McuClkMux0Div1_En"/>
                                                        <a:tst expr="(  (node:fallback(., 'XBAR_CLK')='CLKOUT0') and
                                                                        (node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux1/McuClkMux1Div0_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM0 Clock Mux1 Divider0 should be enabled. Please check node McuCgm0ClockMux1/McuClkMux1Div0_En"/>
                                                        <a:tst expr="(  (node:fallback(., 'XBAR_CLK')='CLKOUT1') and
                                                                        (node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux2/McuClkMux2Div0_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM0 Clock Mux2 Divider0 should be enabled. Please check node McuCgm0ClockMux2/McuClkMux2Div0_En"/>
                                                        <a:tst expr="(  (node:fallback(., 'XBAR_CLK')='PER_CLK') and
                                                                        (node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux3/McuClkMux3Div0_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM0 Clock Mux3 Divider0 should be enabled. Please check node McuCgm0ClockMux3/McuClkMux3Div0_En"/>
                                                        <a:tst expr="(  (node:fallback(., 'XBAR_CLK')='FTM_0_REF_CLK') and
                                                                        (node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux4/McuClkMux4Div0_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM0 Clock Mux4 Divider0 should be enabled. Please check node McuCgm0ClockMux4/McuClkMux4Div0_En"/>
                                                        <a:tst expr="(  (node:fallback(., 'XBAR_CLK')='FTM_1_REF_CLK') and
                                                                        (node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux5/McuClkMux5Div0_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM0 Clock Mux5 Divider0 should be enabled. Please check node McuCgm0ClockMux5/McuClkMux5Div0_En"/>
                                                        <a:tst expr="(  (node:fallback(., 'XBAR_CLK')='FLEXRAY_PE_CLK') and
                                                                        (node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux6/McuClkMux6Div0_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM0 Clock Mux6 Divider0 should be enabled. Please check node McuCgm0ClockMux6/McuClkMux6Div0_En"/>
                                                        <a:tst expr="(  (node:fallback(., 'XBAR_CLK')='GMAC_TS_CLK') and
                                                                        (node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux9/McuClkMux9Div0_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM0 Clock Mux9 Divider0 should be enabled. Please check node McuCgm0ClockMux9/McuClkMux9Div0_En"/>
                                                        <a:tst expr="(  (node:fallback(., 'XBAR_CLK')='GMAC0_TX_CLK') and
                                                                        (node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux10/McuClkMux10Div0_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM0 Clock Mux10 Divider0 should be enabled. Please check node McuCgm0ClockMux10/McuClkMux10Div0_En"/>
                                                        <a:tst expr="(  (node:fallback(., 'XBAR_CLK')='QSPI_1X_CLK') and
                                                                        (node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux12/McuClkMux12Div0_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM0 Clock Mux12 Divider0 should be enabled. Please check node McuCgm0ClockMux12/McuClkMux12Div0_En"/>
                                                        <a:tst expr="(  (node:fallback(., 'XBAR_CLK')='QSPI_2X_CLK') and
                                                                        (node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux12/McuClkMux12Div0_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM0 Clock Mux12 Divider0 should be enabled. Please check node McuCgm0ClockMux12/McuClkMux12Div0_En"/>
                                                        <a:tst expr="(  (node:fallback(., 'XBAR_CLK')='SDHC_CLK') and
                                                                        (node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux14/McuClkMux14Div0_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM0 Clock Mux14 Divider0 should be enabled. Please check node McuCgm0ClockMux14/McuClkMux14Div0_En"/>
                                                        <a:tst expr="(  (node:fallback(., 'XBAR_CLK')='GMAC0_REF_DIV_CLK') and
                                                                        (node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux15/McuClkMux15Div0_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM0 Clock Mux15 Divider0 should be enabled. Please check node McuCgm0ClockMux15/McuClkMux15Div0_En"/>
                                                         <a:tst expr="(  (node:fallback(., 'XBAR_CLK')='PFEMAC0_TX_CLK') and
                                                                        (node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux1/McuClkMux1Div0_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM2 Clock Mux1 Divider0 should be enabled. Please check node McuCgm2ClockMux1/McuClkMux1Div0_En"/>
                                                        <a:tst expr="(  (node:fallback(., 'XBAR_CLK')='PFEMAC0_REF_DIV_CLK') and
                                                                        (node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux7/McuClkMux7Div0_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM2 Clock Mux7 Divider0 should be enabled. Please check node McuCgm2ClockMux7/McuClkMux7Div0_En"/>
                                                        <a:tst expr="(  (node:fallback(., 'XBAR_CLK')='PFEMAC1_TX_CLK') and
                                                                        (node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux2/McuClkMux2Div0_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM2 Clock Mux2 Divider0 should be enabled. Please check node McuCgm2ClockMux2/McuClkMux2Div0_En"/>
                                                        <a:tst expr="(  (node:fallback(., 'XBAR_CLK')='PFEMAC1_REF_DIV_CLK') and
                                                                        (node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux8/McuClkMux8Div0_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM2 Clock Mux8 Divider0 should be enabled. Please check node McuCgm2ClockMux8/McuClkMux8Div0_En"/>
                                                        <a:tst expr="(  (node:fallback(., 'XBAR_CLK')='PFEMAC2_TX_CLK') and
                                                                        (node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux3/McuClkMux3Div0_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM2 Clock Mux3 Divider0 should be enabled. Please check node McuCgm2ClockMux3/McuClkMux3Div0_En"/>
                                                        <a:tst expr="(  (node:fallback(., 'XBAR_CLK')='PFEMAC2_REF_DIV_CLK') and
                                                                        (node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux9/McuClkMux9Div0_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM2 Clock Mux9 Divider0 should be enabled. Please check node McuCgm2ClockMux9/McuClkMux9Div0_En"/>
                                                        <a:tst expr="(  (node:fallback(., 'XBAR_CLK')='PFE_PE_CLK') and
                                                                        (node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux0/McuClkMux0Div0_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM2 Clock Mux0 Divider0 should be enabled. Please check node McuCgm2ClockMux0/McuClkMux0Div0_En"/>
                                                        <a:tst expr="(  (node:fallback(., 'XBAR_CLK')='PFE_SYS_CLK') and
                                                                        (node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux0/McuClkMux0Div0_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM2 Clock Mux0 Divider0 should be enabled. Please check node McuCgm2ClockMux0/McuClkMux0Div0_En"/>
                                                        <a:tst expr="(  (node:fallback(., 'XBAR_CLK')='SERDES_REF_CLK') and
                                                                        (node:fallback(../../../McuPll_1/McuPll_Configuration/McuPllOdiv0_En,'true')='false')
                                                                     )"
                                                            true=" Error: PeriphPLL ODIV0 should be enabled. Please check node McuPll_1/McuPll_Configuration/McuPllOdiv0_En"/>
                                                        <a:tst expr="(  (node:fallback(., 'XBAR_CLK')='FXOSC_CLK') and
                                                                        (node:fallback(../../../McuFXOSC/McuFxoscPowerDownCtr,'true')='false')
                                                                     )"
                                                            true=" Error: McuFXOSC should be enabled. Please check node McuFXOSC/McuFxoscPowerDownCtr"/>
                                                        <!-- check extra clock sources for S32R45 -->
                                                        <a:tst expr="(  (node:fallback(., 'XBAR_CLK')='ACCEL_3_CLK') and
                                                                        (node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux0/McuClkMux0Div0_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM2 Clock Mux0 Divider0 should be enabled. Please check node McuCgm2ClockMux0/McuClkMux0Div0_En"/>
                                                        <a:tst expr="(  (node:fallback(., 'XBAR_CLK')='ACCEL_3_DIV3_CLK') and
                                                                        (node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux0/McuClkMux0Div0_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM2 Clock Mux0 Divider0 should be enabled. Please check node McuCgm2ClockMux0/McuClkMux0Div0_En"/>
                                                        <a:tst expr="(  (node:fallback(., 'XBAR_CLK')='ACCEL_4_CLK') and
                                                                        (node:fallback(../../../McuCgm2SettingConfig/McuCgm2ClockMux1/McuClkMux1Div0_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM2 Clock Mux1 Divider0 should be enabled. Please check node McuCgm2ClockMux1/McuClkMux1Div0_En"/>
                                                    </a:da>
                                                </v:var>
                                            </v:ctr>
                                        </v:lst>

                                    </v:ctr>
                                </v:lst>

                                <!-- /** @implements McuDemEventParameterRefs_Object */ -->
                                <v:ctr name="McuDemEventParameterRefs" type="IDENTIFIABLE">
                                    <a:a name="TAB" value="McuDemEventParameterRefs"/>
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Container for the references to DemEventParameter elements which shall be invoked using the API Dem_SetEventStatus API in case the corresponding error occurs.  <br />
                                                The EventId is taken from the referenced DemEventParameter&apos;s DemEventId value.
                                                The standardized errors are provided in the container and can be extended by vendor specific error references. <br />
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="OPTIONAL" value="true"/>
                                    <a:a name="UUID" value="ECUC:092fb5e2-9ecc-45ad-8121-e1210e335cec"/>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v mclass="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>

                                    <v:ref name="MCU_E_TIMEOUT_FAILURE" type="SYMBOLIC-NAME-REFERENCE">
                                        <a:a name="DESC">
                                            <a:v>
                                                <![CDATA[EN:<html>
                                                    Reference to configured DEM event to report Timeout failure. <br />
                                                </html>]]>
                                            </a:v>
                                        </a:a>
                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                            <icc:v class="PreCompile">VariantPostBuild</icc:v>
                                            <icc:v class="PreCompile">VariantPreCompile</icc:v>
                                        </a:a>
                                        <a:a name="ORIGIN" value="NXP"/>
                                        <a:a name="SCOPE" value="LOCAL"/>
                                        <a:a name="UUID" value="ECUC:8f45d08b-315d-421b-8457-c3c09bc5feda"/>
                                        <a:a name="OPTIONAL" value="true"/>
                                        <a:da name="REF" value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter"/>
                                        <a:da name="INVALID" type="XPath">
                                             <a:tst expr="node:refvalid(.)" false="Invalid XPath or empty reference."/>
                                        </a:da>
                                    </v:ref>

                                    <v:ref name="MCU_E_INVALIDFXOSC_CONFIG" type="SYMBOLIC-NAME-REFERENCE">
                                        <a:a name="DESC">
                                            <a:v>
                                                <![CDATA[EN:<html>
                                                    Reference to configured DEM event to report a FXOSC invalid configuration event.<br />
                                                </html>]]>
                                            </a:v>
                                        </a:a>
                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                            <icc:v class="PreCompile">VariantPostBuild</icc:v>
                                            <icc:v class="PreCompile">VariantPreCompile</icc:v>
                                        </a:a>
                                        <a:a name="ORIGIN" value="NXP"/>
                                        <a:a name="SCOPE" value="LOCAL"/>
                                        <a:a name="UUID" value="ECUC:5b3ee483-b632-4e06-838d-8f4924370747"/>
                                        <a:a name="OPTIONAL" value="true"/>
                                        <a:da name="REF" value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter"/>
                                        <a:da name="INVALID" type="XPath">
                                             <a:tst expr="node:refvalid(.)" false="Invalid XPath or empty reference."/>
                                        </a:da>
                                    </v:ref>

                                    <v:ref name="MCU_E_CLOCKMUXSWITCH_FAILURE" type="SYMBOLIC-NAME-REFERENCE">
                                        <a:a name="DESC">
                                            <a:v>
                                                <![CDATA[EN:<html>
                                                    Reference to configured DEM event to report a failed clock switch request. <br />
                                                </html>]]>
                                            </a:v>
                                        </a:a>
                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                            <icc:v class="PreCompile">VariantPostBuild</icc:v>
                                            <icc:v class="PreCompile">VariantPreCompile</icc:v>
                                        </a:a>
                                        <a:a name="ORIGIN" value="NXP"/>
                                        <a:a name="SCOPE" value="LOCAL"/>
                                        <a:a name="UUID" value="ECUC:5b3ee483-f132-4e06-838d-8f4924370747"/>
                                        <a:a name="OPTIONAL" value="true"/>
                                        <a:da name="REF" value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter"/>
                                        <a:da name="INVALID" type="XPath">
                                             <a:tst expr="node:refvalid(.)" false="Invalid XPath or empty reference."/>
                                        </a:da>
                                    </v:ref>


                                    <!-- /** @implements MCU_E_CLOCK_FAILURE_Object */ -->
                                    <v:ref name="MCU_E_CLOCK_FAILURE" type="REFERENCE">
                                        <a:a name="DESC">
                                            <a:v>
                                                <![CDATA[EN:<html>
                                                    Reference to configured DEM event to report Clock source failure. <br />
                                                </html>]]>
                                            </a:v>
                                        </a:a>
                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                            <icc:v class="PreCompile">VariantPostBuild</icc:v>
                                            <icc:v class="PreCompile">VariantPreCompile</icc:v>
                                        </a:a>
                                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                        <a:a name="SCOPE" value="LOCAL"/>
                                        <a:a name="UUID" value="ECUC:7b1e9402-2922-49e6-a094-efe3ce59f8c0"/>
                                        <a:a name="OPTIONAL" value="true"/>
                                        <a:da name="REF" value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter"/>
                                        <a:da name="INVALID" type="XPath">
                                             <a:tst expr="node:refvalid(.)" false="Invalid XPath or empty reference."/>
                                        </a:da>
                                    </v:ref>
                                </v:ctr>

                                <!-- /** @implements McuModeSettingConf_Object */ -->
                                <v:lst name="McuModeSettingConf" type="MAP">
                                    <a:da name="MIN" value="1"/>
                                    <v:ctr name="McuModeSettingConf" type="IDENTIFIABLE">
                                        <a:a name="DESC">
                                            <a:v>
                                                <![CDATA[EN:<html>
                                                    This container contains the configuration for the Mode setting of the MCU.
                                                    Note: Implementation Specific Parameter.
                                                </html>]]>
                                            </a:v>
                                        </a:a>
                                        <a:a name="UUID" value="ECUC:9d338d97-6006-469a-8111-ac7c93ba66ec"/>
                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                            <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                                            <icc:v mclass="PreCompile">VariantPostBuild</icc:v>
                                        </a:a>


                                        <!-- /** @implements McuMode_Object */ -->
                                        <v:var name="McuMode" type="INTEGER">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        This parameter shall represent the ID of the MCU mode.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="LABEL" value="Mode ID"/>
                                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="true"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="false"/>
                                            <a:a name="UUID" value="ECUC:f296ee65-d7f7-4f6d-ae0c-562449d649b4"/>
                                            <a:da name="DEFAULT" type="XPath" expr="num:i(node:fallback(node:current()/../@index, num:i(0)))"/>
                                            <a:da name="RANGE" type="XPath">
                                                <a:tst expr="text:uniq(node:fallback(../../*/McuMode, text:split('1 2 3')), node:fallback(., 0))"
                                                    false="Duplicated value, McuMode ID must be unique across McuModeSettingConf. Use the Calculate button to calculate correct default value."/>
                                                <a:tst expr="node:fallback(., 0) &lt; count(node:fallback(../../*, 1))"
                                                    false="Value out of range: must be in range 0 to N-1 (N is number of configured Mode setting). Use the Calculate button to calculate correct default value."/>
                                            </a:da>
                                            <a:da name="INVALID" type="Range">
                                                <a:tst expr="&lt;=255"/>
                                                <a:tst expr="&gt;=0"/>
                                            </a:da>
                                        </v:var>

                                        <v:var name="McuPowerMode" type="ENUMERATION">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        This parameter selects the Power Mode to be used. <br />
                                                        For valid Mode transitions refers to "MC_ME Mode Diagram" from Reference Manual. <br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="LABEL" value="Operating Mode"/>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:4e601bd3-e1bf-40ea-8318-740303d8615e"/>
                                            <a:da name="DEFAULT" value="RUN"/>
                                            <a:da name="RANGE">
                                                <a:v>RUN</a:v>
                                                <a:v>CORE_STANDBY</a:v>
                                                <a:v>SOC_STANDBY</a:v>
                                                <a:v>FUNC_RESET</a:v>
                                                <a:v>DEST_RESET</a:v>
                                                <a:v>CORE_WARM_RESET</a:v>
                                            </a:da>
                                            <a:da name="INVALID" type="XPath">
                                                <a:tst
                                                    expr="
                                                    (
                                                        ( (node:fallback(., 'RUN') = 'CORE_STANDBY') or (node:fallback(., 'RUN') = 'SOC_STANDBY' ) ) and
                                                        ( node:fallback(../../../../McuGeneralConfiguration/McuEnterLowPowerMode, 'false') = 'false' )
                                                    )"
                                                       true="Standby mode transitions are invalid when 'McuGeneralConfiguration/McuEnterLowPowerMode' is disabled."/>
                                                <a:tst expr="contains(node:value(as:modconf('Resource')[1]/ResourceGeneral/ResourceSubderivative), 's32r45') and (node:fallback(., 'RUN') = 'SOC_STANDBY')"
                                                        true="Standby mode was supported on S32R45 is CORE_STANDBY."/>
                                            </a:da>
                                        </v:var>

                                        <v:var name="McuMainCoreSelect" type="ENUMERATION">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:
                                                        <html>
                                                        This field is used to select which core will be designated as the Main Core. <br />
                                                        The driver will configure the MC_ME_MAIN_COREID[PIDX] and MC_ME_MAIN_COREID[CIDX]
                                                        register fields based on this parameter. <br />
                                                        This field is modifiable only when McuPowerMode = 'SOC_STANDBY'. <br />
                                                        Note: Implementation Specific Parameter. <p/>
                                                        </html>
                                                    ]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="LABEL" value="Main Core Select" />
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="UUID" value="ECUC:aac952ef-7cb7-4b94-acc5-a7c1ed34fd5b"/>
                                            <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.MC_ME.Cores.Default')"/>
                                            <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.MC_ME.Cores.List')"/>
                                            <a:a name="EDITABLE" type="XPath" expr="(node:fallback(../McuPowerMode, 'RUN') = 'SOC_STANDBY')"/>
                                        </v:var>

                                        <v:var name="McuEnableSleepOnExit" type="BOOLEAN">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        Indicates sleep-on-exit when returning from Handler mode to Thread mode:<p/>
                                                        0 - Do not sleep when returning to Thread mode.<p/>
                                                        1 - Enter sleep, or deep sleep, on return from an ISR.<p/>
                                                        Setting this bit to 1 enables an interrupt driven application to avoid returning to an empty main application.<p/>
                                                        Note: Implementation Specific Parameter.<p/>
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="LABEL" value="Mcu Enable Sleep On Exit"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:28436a22-daa7-4eee-8862-0a368a3c80ef"/>
                                            <a:da name="DEFAULT" value="false"/>
                                            <a:a name="EDITABLE" type="XPath">
                                                <a:tst expr="
                                                    (node:fallback(../McuPowerMode, 'RUN') = 'CORE_STANDBY') or
                                                    (node:fallback(../McuPowerMode, 'RUN') = 'SOC_STANDBY') or
                                                    (node:fallback(../McuPowerMode, 'RUN') = 'STANDBY')
                                                "/>
                                            </a:a>
                                        </v:var>

                                        <v:ctr name="McuPartitionConfiguration" type="IDENTIFIABLE">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        This section generates control signals based on the logic partitions
                                                        implemented inside it. The logic partition refers to SoC blocks controlled by single
                                                        partition of MC_ME. Each of the MC_ME partition implements or control a set of logic
                                                        functionality using the MC_ME partition processes hardware.
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="UUID" value="ECUC:4eb413e5-e88d-4fe5-8e29-28badf24b6c9"/>

                                            <v:ctr name="McuPartition0Config" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                        This container contains the configuration for Partition 0.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuPartition0Config"/>
                                                <a:a name="UUID" value="ECUC:6d197fc7-452a-4168-af62-3f05f950e135"/>

                                                <v:var name="McuPartitionUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if Partition 0 is under MCU control.<br />
                                                                If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN0 or PRST0). <br />
                                                                Note: Implementation Specific Parameter.<br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="Partition0 Under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:56613a64-57c3-4935-bb5f-32d841f15b54"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuPartitionPowerUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if Partition 0 Power Management is under MCU control. <br />
                                                                If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN0_PCONF). <br />
                                                                This means that the setting configured by node "McuPartitionClockEnable" will be left untouched
                                                                (i.e. the configuration will not have any effect in hardware). <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="Partition0 Power Management Under MCU Control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:32613a64-57c3-4935-bb5f-23b836d63c52"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../McuPartitionUnderMcuControl, 'true') = 'false')
                                                            )"
                                                            true="The field McuPartition0Config/McuPartitionUnderMcuControl must be set to 'true' when Partition 0's power management is under MCU control."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPrtnCofb0UnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if PRTN0_COFB0 is under MCU control.<br />
                                                                If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN0_COFB0). <br />
                                                                This means that all the peripherals under the 'McuPeripheral' list prefixed by 'PRTN0_COFB0'
                                                                will be left untouched (i.e. the configuration will not have any effect in hardware). <br />
                                                                Note: Implementation Specific Parameter.<br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PRTN0_COFB0 Under MCU Control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:32613a64-57c3-4935-bb5f-23b836c36b54"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../McuPartitionUnderMcuControl, 'true') = 'false')
                                                            )"
                                                            true="The field McuPartition0Config/McuPartitionUnderMcuControl must be set to 'true' when PRTN0_COFB0 is under MCU control."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPrstCofb0UnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if PRST0_0 is under MCU control.<br />
                                                                If it is FALSE, then the MCU driver will not write the corresponding registers (PRST0_0). <br />
                                                                This means that all the peripherals under the 'McuPeripheral' list prefixed by 'PRST0_COFB0'
                                                                will be left untouched (i.e. the configuration will not have any effect in hardware). <br />
                                                                Note: Implementation Specific Parameter.<br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PRST0_0 Under MCU Control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:56613a64-57c3-4935-0f5f-23b415d63b54"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../McuPartitionUnderMcuControl, 'true') = 'false')
                                                            )"
                                                            true="The field McuPartition0Config/McuPartitionUnderMcuControl must be set to 'true' when PRST0_0 is under MCU control."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPartitionClockEnable" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Configures the MC_ME_PRTN0_PCONF[PCE] register field. <br />
                                                                This bit controls whether the clock to IPs (other than core(s)) in the partition are enabled or disabled. <br />
                                                                0b - Disable the clock to IPs. <br />
                                                                1b - Enable the clock to IPs. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Partition0 Clock Enable"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:a68ae507-8e89-4c1a-8e04-35b9cac34438"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuPartitionResetEnable" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Partition 0 corresponds to the Main Reset Partition which is automatically released from reset after POR, destructive or functional reset. <br />
                                                                This bit controls whether the reset signal to IPs (other than core(s)) in the partition is asserted or deasserted. <br />
                                                                0b - Deassert the reset signal to IPs.<br />
                                                                1b - Assert the reset signal to IPs.<br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Partition0 Reset Enable"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:a68ae507-8e89-4c1a-8e04-3a34154bdf55"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:da name="READONLY" value="true"/>
                                                </v:var>

                                                <v:ctr name="McuCore0Configuration" type="IDENTIFIABLE">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This container contains the configuration for the CM7_0 core within Partition 0. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="UUID" value="ECUC:51dd8220-8b81-4cc9-9cff-346e19b4558d"/>

                                                    <v:var name="McuCoreUnderMcuControl" type="BOOLEAN">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Set this to TRUE if CM7_0 is under MCU control.<br />
                                                                    If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN0_CORE0 and PRST0_0).<br />
                                                                    Note: Implementation Specific Parameter.<br />
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="LABEL" value="CM7_0 Under MCU Control"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:56613a64-57c3-4935-bb5f-23b843c16b54"/>
                                                        <a:da name="DEFAULT" value="true"/>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'false') = 'true') and
                                                                    (node:fallback(../../McuPartitionUnderMcuControl, 'true') = 'false')
                                                                )"
                                                                true="The field McuPartition0Config/McuPartitionUnderMcuControl must be set to 'true' when CM7_0 is under MCU control."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuCoreClockEnable" type="BOOLEAN">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_ME_PRTN0_CORE0_PCONF[CCE] register field.<br />
                                                                    This bit controls whether the clock to CM7_0 is enabled or disabled. <br />
                                                                    0 - CM7_0 Core Clock is Disabled. <br />
                                                                    1 - CM7_0 Core Clock is Enabled. <br />
                                                                    <strong>Warning:</strong> When disabling the core clock, the driver
                                                                    will busy-wait until the corresponding MC_ME_PRTN0_CORE0_STAT[WFI]
                                                                    flag is set. This means that the core to be shutdown must always
                                                                    execute an WFI as its last instruction. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="CM7_0 Core Clock Enable"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:f68ae507-338e-4c1a-8e94-76cacdafd0c5"/>
                                                        <a:da name="DEFAULT" value="false"/>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'false') = 'true') and
                                                                    (node:fallback(../../McuPartitionClockEnable, 'true') = 'false')
                                                                )"
                                                                true="The clock to partition 0 must be enabled first in order to enable the clock of the CM7_0 core within the partition (i.e. McuPartition0Config/McuPartitionClockEnable = 'true')."/>
                                                        </a:da>
                                                    </v:var>

                                                   <v:var name="McuCoreResetEnable" type="BOOLEAN">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_RGM_PRST0_0[PERIPH_0_RST] register field.<br />
                                                                    This bit controls whether the CM7_0 reset is asserted or deasserted. <br />
                                                                    0 - CM7_0 Core Reset is Deasserted. <br />
                                                                    1 - CM7_0 Core Reset is Asserted. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="CM7_0 Core Reset Enable"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:118ae507-338e-4c1a-8e94-76acbadfd0c5"/>
                                                        <a:da name="DEFAULT" value="true"/>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'false') = 'false') and
                                                                    (node:fallback(../../McuPartitionResetEnable, 'true') = 'true')
                                                                )"
                                                                true="The reset signal to partition 0 must be deasserted first in order to deassert the reset signal of the CM7_0 core within the partition (i.e. McuPartition0Config/McuPartitionResetEnable = 'false')."/>
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'false') = 'false') and
                                                                    (node:fallback(../McuCoreClockEnable, 'false') = 'false')
                                                                )"
                                                                true="The clock of the CM7_0 core must be enabled first in order to deassert its reset signal (i.e. McuCore0Configuration/McuCoreClockEnable = 'true')."/>
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'false') = 'true') and
                                                                    (node:fallback(../McuCoreClockEnable, 'false') = 'true')
                                                                )"
                                                                true="The clock of the CM7_0 core must be disabled first in order to assert its reset signal (i.e. McuCore0Configuration/McuCoreClockEnable = 'false')."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuCoreBootAddress" type="INTEGER">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_ME_PRTN0_CORE0_ADDR[ADDR] register field.<br />
                                                                    This register controls the boot address of the CM7_0 core. <br />
                                                                    The value from this field will be masked with 0xFFFFFFFC (i.e.
                                                                    the boot address must be aligned on a 4-byte boundary). <br />
                                                                    This field is modifiable only when the corresponding CM7_0 core
                                                                    clock is enabled and McuCoreControlConfiguration/McuCoreBootAddressControl
                                                                    is 'true'. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="CM7_0 Boot Address"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:cab556a4-fd92-4e77-80db-6809aebd6a11"/>
                                                        <a:da name="DEFAULT" value="0"/>
                                                        <a:a name="INVALID" type="Range">
                                                            <a:tst expr="&lt;=4294967292"/>
                                                            <a:tst expr="&gt;=0"/>
                                                        </a:a>
                                                        <a:a name="EDITABLE" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(../McuCoreClockEnable, 'false') = 'true') and
                                                                    (node:fallback(as:modconf('Mcu')[1]/McuCoreControlConfiguration/McuCoreBootAddressControl, 'false') = 'true')
                                                                )"/>
                                                        </a:a>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="(node:fallback(., 4294967292) mod 4) != 0" true="The boot address must be aligned on a 4-byte boundary."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuCoreBootAddressLinkerSym" type="STRING">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_ME_PRTN0_CORE0_ADDR[ADDR] register field.<br />
                                                                    This register controls the boot address of the CM7_0 core. <br />
                                                                    The value from this field will be masked with 0xFFFFFFFC (i.e.
                                                                    the boot address must be aligned on a 4-byte boundary). <br />
                                                                    This field is modifiable only when the corresponding CM7_0 core
                                                                    clock is enabled and McuCoreControlConfiguration/McuCoreBootAddressControl
                                                                    is 'true'. <br />
                                                                    <strong>Note:</strong> If this parameter is empty, then the boot address
                                                                    (integer value) defined by 'McuCoreBootAddress' will be used. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="CM7_0 Boot Address Linker Symbol"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:5179e367-2481-4677-b488-51c3eb1cd797"/>
                                                        <a:da name="DEFAULT" value=""/>
                                                        <a:a name="EDITABLE" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(../McuCoreClockEnable, 'false') = 'true') and
                                                                    (node:fallback(as:modconf('Mcu')[1]/McuCoreControlConfiguration/McuCoreBootAddressControl, 'false') = 'true')
                                                                )"/>
                                                        </a:a>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="( node:empty(.) or (text:match(normalize-space(.),'^[_a-zA-Z]+[_0-9a-zA-Z]*$')) )"
                                                               false="Invalid identifier. The field must specify a valid C identifier (i.e. an arbitrarily long sequence of digits, underscores, lowercase and uppercase Latin letters, that must begin with a non-digit character)."/>
                                                        </a:da>
                                                    </v:var>

                                                </v:ctr>

                                                <v:ctr name="McuCore1Configuration" type="IDENTIFIABLE">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This container contains the configuration for the CM7_1 core within Partition 0. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="UUID" value="ECUC:51dd8220-8b81-4cc9-9c2d-346e19b4558d"/>

                                                    <v:var name="McuCoreUnderMcuControl" type="BOOLEAN">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Set this to TRUE if CM7_1 is under MCU control.<br />
                                                                    If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN0_CORE1 and PRST0_0).<br />
                                                                    Note: Implementation Specific Parameter.<br />
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="LABEL" value="CM7_1 Under MCU Control"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:56612e64-57c3-4935-bb5f-23b843c16b54"/>
                                                        <a:da name="DEFAULT" value="true"/>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'false') = 'true') and
                                                                    (node:fallback(../../McuPartitionUnderMcuControl, 'true') = 'false')
                                                                )"
                                                                true="The field McuPartition0Config/McuPartitionUnderMcuControl must be set to 'true' when CM7_1 is under MCU control."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuCoreClockEnable" type="BOOLEAN">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_ME_PRTN0_CORE1_PCONF[CCE] register field.<br />
                                                                    This bit controls whether the clock to CM7_1 is enabled or disabled. <br />
                                                                    0 - CM7_1 Core Clock is Disabled. <br />
                                                                    1 - CM7_1 Core Clock is Enabled. <br />
                                                                    <strong>Warning:</strong> When disabling the core clock, the driver
                                                                    will busy-wait until the corresponding MC_ME_PRTN0_CORE1_STAT[WFI]
                                                                    flag is set. This means that the core to be shutdown must always
                                                                    execute an WFI as its last instruction. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="CM7_1 Core Clock Enable"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:a68a3e07-33e9-bc1a-8a04-74fe9aa2e03f"/>
                                                        <a:da name="DEFAULT" value="false"/>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'false') = 'true') and
                                                                    (node:fallback(../../McuPartitionClockEnable, 'true') = 'false')
                                                                )"
                                                                true="The clock to partition 0 must be enabled first in order to enable the clock of the CM7_1 core within the partition (i.e. McuPartition0Config/McuPartitionClockEnable = 'true')."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuCoreResetEnable" type="BOOLEAN">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_RGM_PRST0_0[PERIPH_1_RST] register field.<br />
                                                                    This bit controls whether the CM7_1 reset is asserted or deasserted. <br />
                                                                    0 - CM7_1 Core Reset is Deasserted. <br />
                                                                    1 - CM7_1 Core Reset is Asserted. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="CM7_1 Core Reset Enable"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:238ae507-338e-4c1a-8e94-76acbadfd0c5"/>
                                                        <a:da name="DEFAULT" value="true"/>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'false') = 'false') and
                                                                    (node:fallback(../../McuPartitionResetEnable, 'true') = 'true')
                                                                )"
                                                                true="The reset signal to partition 0 must be deasserted first in order to deassert the reset signal of the CM7_1 core within the partition (i.e. McuPartition0Config/McuPartitionResetEnable = 'false')."/>
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'false') = 'false') and
                                                                    (node:fallback(../McuCoreClockEnable, 'false') = 'false')
                                                                )"
                                                                true="The clock of the CM7_1 core must be enabled first in order to deassert its reset signal (i.e. McuCore1Configuration/McuCoreClockEnable = 'true')."/>
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'false') = 'true') and
                                                                    (node:fallback(../McuCoreClockEnable, 'false') = 'true')
                                                                )"
                                                                true="The clock of the CM7_1 core must be disabled first in order to assert its reset signal (i.e. McuCore1Configuration/McuCoreClockEnable = 'false')."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuCoreBootAddress" type="INTEGER">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_ME_PRTN0_CORE1_ADDR[ADDR] register field.<br />
                                                                    This register controls the boot address of the CM7_1 core. <br />
                                                                    The value from this field will be masked with 0xFFFFFFFC (i.e.
                                                                    the boot address must be aligned on a 4-byte boundary). <br />
                                                                    This field is modifiable only when the corresponding CM7_1 core
                                                                    clock is enabled and McuCoreControlConfiguration/McuCoreBootAddressControl
                                                                    is 'true'. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="CM7_1 Boot Address"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:18e656a4-fd92-4e7e-81d0-3e24a97c4bb6"/>
                                                        <a:da name="DEFAULT" value="0"/>
                                                        <a:a name="INVALID" type="Range">
                                                            <a:tst expr="&lt;=4294967292"/>
                                                            <a:tst expr="&gt;=0"/>
                                                        </a:a>
                                                        <a:a name="EDITABLE" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(../McuCoreClockEnable, 'false') = 'true') and
                                                                    (node:fallback(as:modconf('Mcu')[1]/McuCoreControlConfiguration/McuCoreBootAddressControl, 'false') = 'true')
                                                                )"/>
                                                        </a:a>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="(node:fallback(., 4294967292) mod 4) != 0" true="The boot address must be aligned on a 4-byte boundary."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuCoreBootAddressLinkerSym" type="STRING">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_ME_PRTN0_CORE1_ADDR[ADDR] register field.<br />
                                                                    This register controls the boot address of the CM7_1 core. <br />
                                                                    The value from this field will be masked with 0xFFFFFFFC (i.e.
                                                                    the boot address must be aligned on a 4-byte boundary). <br />
                                                                    This field is modifiable only when the corresponding CM7_1 core
                                                                    clock is enabled and McuCoreControlConfiguration/McuCoreBootAddressControl
                                                                    is 'true'. <br />
                                                                    <strong>Note:</strong> If this parameter is empty, then the boot address
                                                                    (integer value) defined by 'McuCoreBootAddress' will be used. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="CM7_1 Boot Address Linker Symbol"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:5177f367-2481-4677-b488-51c3eb1cd797"/>
                                                        <a:da name="DEFAULT" value=""/>
                                                        <a:a name="EDITABLE" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(../McuCoreClockEnable, 'false') = 'true') and
                                                                    (node:fallback(as:modconf('Mcu')[1]/McuCoreControlConfiguration/McuCoreBootAddressControl, 'false') = 'true')
                                                                )"/>
                                                        </a:a>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="( node:empty(.) or (text:match(normalize-space(.),'^[_a-zA-Z]+[_0-9a-zA-Z]*$')) )"
                                                               false="Invalid identifier. The field must specify a valid C identifier (i.e. an arbitrarily long sequence of digits, underscores, lowercase and uppercase Latin letters, that must begin with a non-digit character)."/>
                                                        </a:da>
                                                    </v:var>

                                                </v:ctr>

                                                <v:ctr name="McuCore2Configuration" type="IDENTIFIABLE">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This container contains the configuration for the CM7_2 core within Partition 0. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="UUID" value="ECUC:51f28220-8b81-4cc9-9c2d-346e19b4558d"/>
                                                    <a:a name="VISIBLE" type="XPath">
                                                        <a:tst expr="contains(ecu:get('MCU.MC_ME.Partition0.Cores.List'),'CORE_2')" />
                                                    </a:a>

                                                    <v:var name="McuCoreUnderMcuControl" type="BOOLEAN">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Set this to TRUE if CM7_2 is under MCU control.<br />
                                                                    If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN0_CORE2 and PRST0_0).<br />
                                                                    Note: Implementation Specific Parameter.<br />
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="LABEL" value="CM7_2 Under MCU Control"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:56612e64-574d-4935-bb5f-23b843c16b54"/>
                                                        <a:da name="DEFAULT" value="true"/>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (contains(ecu:get('MCU.MC_ME.Partition0.Cores.List'),'CORE_2')) and
                                                                    (node:fallback(., 'false') = 'true') and
                                                                    (node:fallback(../../McuPartitionUnderMcuControl, 'true') = 'false')
                                                                )"
                                                                true="The field McuPartition0Config/McuPartitionUnderMcuControl must be set to 'true' when CM7_2 is under MCU control."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuCoreClockEnable" type="BOOLEAN">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_ME_PRTN0_CORE2_PCONF[CCE] register field.<br />
                                                                    This bit controls whether the clock to CM7_2 is enabled or disabled. <br />
                                                                    0 - CM7_2 Core Clock is Disabled. <br />
                                                                    1 - CM7_2 Core Clock is Enabled. <br />
                                                                    <strong>Warning:</strong> When disabling the core clock, the driver
                                                                    will busy-wait until the corresponding MC_ME_PRTN0_CORE2_STAT[WFI]
                                                                    flag is set. This means that the core to be shutdown must always
                                                                    execute an WFI as its last instruction. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="CM7_2 Core Clock Enable"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:a68ea507-3ee9-4cba-8a04-d0e9c13e65aa"/>
                                                        <a:da name="DEFAULT" value="false"/>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'false') = 'true') and
                                                                    (node:fallback(../../McuPartitionClockEnable, 'true') = 'false')
                                                                )"
                                                                   true="The clock to partition 0 must be enabled first in order to enable the clock of the CM7_2 core within the partition (i.e. McuPartition0Config/McuPartitionClockEnable = 'true')."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuCoreResetEnable" type="BOOLEAN">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_RGM_PRST0_0[PERIPH_2_RST] register field.<br />
                                                                    This bit controls whether the CM7_2 reset is asserted or deasserted. <br />
                                                                    0 - CM7_2 Core Reset is Deasserted. <br />
                                                                    1 - CM7_2 Core Reset is Asserted. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="CM7_2 Core Reset Enable"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:4b8ae507-338e-4c1a-8e94-76acbadfd0c5"/>
                                                        <a:da name="DEFAULT" value="true"/>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'false') = 'false') and
                                                                    (node:fallback(../../McuPartitionResetEnable, 'true') = 'true')
                                                                )"
                                                                true="The reset signal to partition 0 must be deasserted first in order to deassert the reset signal of the CM7_2 core within the partition (i.e. McuPartition0Config/McuPartitionResetEnable = 'false')."/>
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'false') = 'false') and
                                                                    (node:fallback(../McuCoreClockEnable, 'false') = 'false')
                                                                )"
                                                                true="The clock of the CM7_2 core must be enabled first in order to deassert its reset signal (i.e. McuCore2Configuration/McuCoreClockEnable = 'true')."/>
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'false') = 'true') and
                                                                    (node:fallback(../McuCoreClockEnable, 'false') = 'true')
                                                                )"
                                                                true="The clock of the CM7_2 core must be disabled first in order to assert its reset signal (i.e. McuCore2Configuration/McuCoreClockEnable = 'false')."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuCoreBootAddress" type="INTEGER">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_ME_PRTN0_CORE2_ADDR[ADDR] register field.<br />
                                                                    This register controls the boot address of the CM7_2 core. <br />
                                                                    The value from this field will be masked with 0xFFFFFFFC (i.e.
                                                                    the boot address must be aligned on a 4-byte boundary). <br />
                                                                    This field is modifiable only when the corresponding CM7_2 core
                                                                    clock is enabled and McuCoreControlConfiguration/McuCoreBootAddressControl
                                                                    is 'true'. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="CM7_2 Boot Address"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:cae5f6a4-fd9e-de7a-81db-a0ea29a6ccd0"/>
                                                        <a:da name="DEFAULT" value="0"/>
                                                        <a:a name="INVALID" type="Range">
                                                            <a:tst expr="&lt;=4294967292"/>
                                                            <a:tst expr="&gt;=0"/>
                                                        </a:a>
                                                        <a:a name="EDITABLE" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(../McuCoreClockEnable, 'false') = 'true') and
                                                                    (node:fallback(as:modconf('Mcu')[1]/McuCoreControlConfiguration/McuCoreBootAddressControl, 'false') = 'true')
                                                                )"/>
                                                        </a:a>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="(node:fallback(., 4294967292) mod 4) != 0" true="The boot address must be aligned on a 4-byte boundary."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuCoreBootAddressLinkerSym" type="STRING">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_ME_PRTN0_CORE2_ADDR[ADDR] register field.<br />
                                                                    This register controls the boot address of the CM7_2 core. <br />
                                                                    The value from this field will be masked with 0xFFFFFFFC (i.e.
                                                                    the boot address must be aligned on a 4-byte boundary). <br />
                                                                    This field is modifiable only when the corresponding CM7_2 core
                                                                    clock is enabled and McuCoreControlConfiguration/McuCoreBootAddressControl
                                                                    is 'true'. <br />
                                                                    <strong>Note:</strong> If this parameter is empty, then the boot address
                                                                    (integer value) defined by 'McuCoreBootAddress' will be used. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="CM7_2 Boot Address Linker Symbol"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:5110f367-2481-4677-b488-51c3e6acd797"/>
                                                        <a:da name="DEFAULT" value=""/>
                                                        <a:a name="EDITABLE" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(../McuCoreClockEnable, 'false') = 'true') and
                                                                    (node:fallback(as:modconf('Mcu')[1]/McuCoreControlConfiguration/McuCoreBootAddressControl, 'false') = 'true')
                                                                )"/>
                                                        </a:a>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="( node:empty(.) or (text:match(normalize-space(.),'^[_a-zA-Z]+[_0-9a-zA-Z]*$')) )"
                                                               false="Invalid identifier. The field must specify a valid C identifier (i.e. an arbitrarily long sequence of digits, underscores, lowercase and uppercase Latin letters, that must begin with a non-digit character)."/>
                                                        </a:da>
                                                    </v:var>

                                                </v:ctr>

                                                <v:ctr name="McuCore4Configuration" type="IDENTIFIABLE">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This container contains the configuration for the CM7_3 core within Partition 0. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="UUID" value="ECUC:e451179e-d10c-451c-a704-d1bbe4533d4f"/>
                                                    <a:a name="VISIBLE" type="XPath">
                                                        <a:tst expr="contains(ecu:get('MCU.MC_ME.Partition0.Cores.List'),'CORE_4')" />
                                                    </a:a>
                                                    <v:var name="McuCoreUnderMcuControl" type="BOOLEAN">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Set this to TRUE if CM7_3 is under MCU control.<br />
                                                                    If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN0_CORE4 and PRST0_0).<br />
                                                                    Note: Implementation Specific Parameter.<br />
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="LABEL" value="CM7_3 Under MCU Control"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:f423a925-ff75-4b1f-b8e0-6b72ad0a29ad"/>
                                                        <a:da name="DEFAULT" value="true"/>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (contains(ecu:get('MCU.MC_ME.Partition0.Cores.List'),'CORE_4')) and
                                                                    (node:fallback(., 'false') = 'true') and
                                                                    (node:fallback(../../McuPartitionUnderMcuControl, 'true') = 'false')
                                                                )"
                                                                true="The field McuPartition0Config/McuPartitionUnderMcuControl must be set to 'true' when CM7_3 is under MCU control."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuCoreClockEnable" type="BOOLEAN">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_ME_PRTN0_CORE4_PCONF[CCE] register field.<br />
                                                                    This bit controls whether the clock to CM7_3 is enabled or disabled. <br />
                                                                    0 - CM7_3 Core Clock is Disabled. <br />
                                                                    1 - CM7_3 Core Clock is Enabled. <br />
                                                                    <strong>Warning:</strong> When disabling the core clock, the driver
                                                                    will busy-wait until the corresponding MC_ME_PRTN0_CORE4_STAT[WFI]
                                                                    flag is set. This means that the core to be shutdown must always
                                                                    execute an WFI as its last instruction. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="CM7_3 Core Clock Enable"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:a68ea507-3ee9-4cba-8a04-d0e9c13e65ba"/>
                                                        <a:da name="DEFAULT" value="false"/>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'false') = 'true') and
                                                                    (node:fallback(../../McuPartitionClockEnable, 'true') = 'false')
                                                                )"
                                                                   true="The clock to partition 0 must be enabled first in order to enable the clock of the CM7_3 core within the partition (i.e. McuPartition0Config/McuPartitionClockEnable = 'true')."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuCoreResetEnable" type="BOOLEAN">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_RGM_PRST0_0[PERIPH_6_RST] register field.<br />
                                                                    This bit controls whether the CM7_3 reset is asserted or deasserted. <br />
                                                                    0 - CM7_3 Core Reset is Deasserted. <br />
                                                                    1 - CM7_3 Core Reset is Asserted. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="CM7_3 Core Reset Enable"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:425185e5-43f3-49cf-abb5-aa688ca8989a"/>
                                                        <a:da name="DEFAULT" value="true"/>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'false') = 'false') and
                                                                    (node:fallback(../../McuPartitionResetEnable, 'true') = 'true')
                                                                )"
                                                                true="The reset signal to partition 0 must be deasserted first in order to deassert the reset signal of the CM7_3 core within the partition (i.e. McuPartition0Config/McuPartitionResetEnable = 'false')."/>
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'false') = 'false') and
                                                                    (node:fallback(../McuCoreClockEnable, 'false') = 'false')
                                                                )"
                                                                true="The clock of the CM7_3 core must be enabled first in order to deassert its reset signal (i.e. McuCore4Configuration/McuCoreClockEnable = 'true')."/>
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'false') = 'true') and
                                                                    (node:fallback(../McuCoreClockEnable, 'false') = 'true')
                                                                )"
                                                                true="The clock of the CM7_3 core must be disabled first in order to assert its reset signal (i.e. McuCore4Configuration/McuCoreClockEnable = 'false')."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuCoreBootAddress" type="INTEGER">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_ME_PRTN0_CORE4_ADDR[ADDR] register field.<br />
                                                                    This register controls the boot address of the CM7_3 core. <br />
                                                                    The value from this field will be masked with 0xFFFFFFFC (i.e.
                                                                    the boot address must be aligned on a 4-byte boundary). <br />
                                                                    This field is modifiable only when the corresponding CM7_3 core
                                                                    clock is enabled and McuCoreControlConfiguration/McuCoreBootAddressControl
                                                                    is 'true'. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="CM7_3 Boot Address"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:a8150311-f3ff-4272-a341-72157f7493b5"/>
                                                        <a:da name="DEFAULT" value="0"/>
                                                        <a:a name="INVALID" type="Range">
                                                            <a:tst expr="&lt;=4294967292"/>
                                                            <a:tst expr="&gt;=0"/>
                                                        </a:a>
                                                        <a:a name="EDITABLE" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(../McuCoreClockEnable, 'false') = 'true') and
                                                                    (node:fallback(as:modconf('Mcu')[1]/McuCoreControlConfiguration/McuCoreBootAddressControl, 'false') = 'true')
                                                                )"/>
                                                        </a:a>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="(node:fallback(., 4294967292) mod 4) != 0" true="The boot address must be aligned on a 4-byte boundary."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuCoreBootAddressLinkerSym" type="STRING">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_ME_PRTN0_CORE4_ADDR[ADDR] register field.<br />
                                                                    This register controls the boot address of the CM7_3 core. <br />
                                                                    The value from this field will be masked with 0xFFFFFFFC (i.e.
                                                                    the boot address must be aligned on a 4-byte boundary). <br />
                                                                    This field is modifiable only when the corresponding CM7_3 core
                                                                    clock is enabled and McuCoreControlConfiguration/McuCoreBootAddressControl
                                                                    is 'true'. <br />
                                                                    <strong>Note:</strong> If this parameter is empty, then the boot address
                                                                    (integer value) defined by 'McuCoreBootAddress' will be used. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="CM7_3 Boot Address Linker Symbol"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:95e0be13-cfdb-4256-a136-ff01ca934b39"/>
                                                        <a:da name="DEFAULT" value=""/>
                                                        <a:a name="EDITABLE" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(../McuCoreClockEnable, 'false') = 'true') and
                                                                    (node:fallback(as:modconf('Mcu')[1]/McuCoreControlConfiguration/McuCoreBootAddressControl, 'false') = 'true')
                                                                )"/>
                                                        </a:a>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="( node:empty(.) or (text:match(normalize-space(.),'^[_a-zA-Z]+[_0-9a-zA-Z]*$')) )"
                                                               false="Invalid identifier. The field must specify a valid C identifier (i.e. an arbitrarily long sequence of digits, underscores, lowercase and uppercase Latin letters, that must begin with a non-digit character)."/>
                                                        </a:da>
                                                    </v:var>

                                                </v:ctr>
                                            </v:ctr>

                                            <v:ctr name="McuPartition1Config" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container contains the configuration for Partition 1.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuPartition1Config"/>
                                                <a:a name="UUID" value="ECUC:6d197fc7-412a-4168-af62-3f05f950e135"/>

                                                <v:var name="McuPartitionUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if Partition 1 is under MCU control.<br />
                                                                If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN1 or PRST1). <br />
                                                                Note: Implementation Specific Parameter.<br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="Partition1 Under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:56613a64-57c3-7635-bb5f-32d841f15b54"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuPartitionPowerUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if Partition 1 Power Management is under MCU control. <br />
                                                                If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN1_PCONF or
                                                                PRST1_0[PERIPH_64_RST] or RDC1). <br />
                                                                This means that the settings configured by nodes "McuPartitionClockEnable" and "McuPartitionResetEnable"
                                                                will be left untouched (i.e. the configuration will not have any effect in hardware). <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="Partition1 Power Management Under MCU Control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:32613a64-57c3-4935-bb5f-23c259d63c52"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../McuPartitionUnderMcuControl, 'true') = 'false')
                                                            )"
                                                            true="The field McuPartition1Config/McuPartitionUnderMcuControl must be set to 'true' when Partition 1's power management is under MCU control."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPrtnCofb0UnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if PRTN1_COFB0 is under MCU control.<br />
                                                                If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN1_COFB0). <br />
                                                                This means that all the peripherals under the 'McuPeripheral' list prefixed by 'PRTN1_COFB0'
                                                                will be left untouched (i.e. the configuration will not have any effect in hardware). <br />
                                                                Note: Implementation Specific Parameter.<br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PRTN1_COFB0 Under MCU Control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:41613a64-57c3-4935-bb5f-23b836c36b54"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../McuPartitionUnderMcuControl, 'true') = 'false')
                                                            )"
                                                            true="The field McuPartition1Config/McuPartitionUnderMcuControl must be set to 'true' when PRTN1_COFB0 is under MCU control."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPrstCofb0UnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if PRST1_0 is under MCU control.<br />
                                                                If it is FALSE, then the MCU driver will not write the corresponding registers (PRST1_0). <br />
                                                                This means that all the peripherals under the 'McuPeripheral' list prefixed by 'PRST1_COFB0'
                                                                will be left untouched (i.e. the configuration will not have any effect in hardware). <br />
                                                                Note: Implementation Specific Parameter.<br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PRST1_0 Under MCU Control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:56613a64-57c3-4935-1a5f-23b415d63b54"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../McuPartitionUnderMcuControl, 'true') = 'false')
                                                            )"
                                                            true="The field McuPartition1Config/McuPartitionUnderMcuControl must be set to 'true' when PRST1_0 is under MCU control."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPartitionClockEnable" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Configures the MC_ME_PRTN1_PCONF[PCE] register field. <br />
                                                                This bit controls whether the clock to IPs (other than core(s)) in the partition are enabled or disabled. <br />
                                                                0b - Disable the clock to IPs. <br />
                                                                1b - Enable the clock to IPs. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Partition1 Clock Enable"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:a68ae507-8e89-4c1a-8e04-35b45ac34438"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'true') = 'true') and
                                                                (node:fallback(../McuPartitionResetEnable, 'true') = 'true')
                                                            )"
                                                            true="The Partition Reset must be disable in order to enable clock partition (i.e. McuPartition1Config/McuPartitionResetEnable = 'false')."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPartitionResetEnable" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Configures the MC_RGM_PRST1_0[PERIPH_64_RST] and RDC1_CTRL_REG[INTERCONNECT_INTERFACE_DISABLE] register fields. <br />
                                                                This bit controls whether the reset signal to IPs (other than core(s)) in the partition is asserted or deasserted. <br />
                                                                0b - Deassert the reset signal to IPs.<br />
                                                                1b - Assert the reset signal to IPs.<br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Partition1 Reset Enable"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:b08ae507-8e89-4c1a-8e04-3a54532cbf55"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'false') and
                                                                (node:fallback(../McuPartitionClockEnable, 'false') = 'false')
                                                            )"
                                                            true="The clock to the current partition must be enabled first in order to deassert its reset signal (i.e. McuPartition1Config/McuPartitionClockEnable = 'true')."/>
                                                    </a:da>
                                                </v:var>

                                                <v:ctr name="McuCore0Configuration" type="IDENTIFIABLE">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This container contains the configuration for the Cortex-A53 CORE 0 cluster 0 within Partition 1. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="UUID" value="ECUC:51dd8220-8b81-4cc9-9cff-346e1534558d"/>

                                                    <v:var name="McuCoreUnderMcuControl" type="BOOLEAN">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Set this to TRUE if Cortex-A53 CORE 0 cluster 0 is under MCU control.<br />
                                                                    If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN1_CORE0 and PRST1_0).<br />
                                                                    Note: Implementation Specific Parameter.<br />
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="LABEL" value="Cortex-A53 CORE 0 cluster 0 Under MCU Control"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:56613a64-57c3-4935-bb5f-23b843476b54"/>
                                                        <a:da name="DEFAULT" value="true"/>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'false') = 'true') and
                                                                    (node:fallback(../../McuPartitionUnderMcuControl, 'true') = 'false')
                                                                )"
                                                                true="The field McuPartition1Config/McuPartitionUnderMcuControl must be set to 'true' when Cortex-A53 CORE 0 cluster 0 is under MCU control."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuCoreClockEnable" type="BOOLEAN">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_ME_PRTN1_CORE0_PCONF[CCE] register field.<br />
                                                                    Lockstep mode: These registers control CA53 cluster0–1. <br />
                                                                    Performance mode: These registers control CA53 cluster0. <br />
                                                                    0 - CA53 cluster0 Core Clock is Disabled. <br />
                                                                    1 - CA53 cluster0 Core Clock is Enabled. <br />
                                                                    <strong>Warning:</strong> When disabling the core clock, the driver
                                                                    will busy-wait until the corresponding MC_ME_PRTN1_CORE0_STAT[WFI]
                                                                    flag is set. This means that the core to be shutdown must always
                                                                    execute an WFI as its last instruction. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="CA53 cluster0 Core Clock Enable"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:f68ae507-338e-4c1a-0194-76cacdafd0c5"/>
                                                        <a:da name="DEFAULT" value="false"/>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'false') = 'true') and
                                                                    (node:fallback(../../McuPartitionClockEnable, 'true') = 'false')
                                                                )"
                                                                true="The clock to partition 1 must be enabled first in order to enable the clock of the CA53 cluster0 core within the partition (i.e. McuPartition1Config/McuPartitionClockEnable = 'true')."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuCoreResetEnable" type="BOOLEAN">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_RGM_PRST1_0[PERIPH_65_RST] register field.<br />
                                                                    This bit controls whether the A53_0 reset is asserted or deasserted. <br />
                                                                    0 - Cortex-A53 CORE 0 cluster 0 Reset is Deasserted. <br />
                                                                    1 - Cortex-A53 CORE 0 cluster 0 Reset is Asserted. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="Cortex-A53 CORE 0 cluster 0 Reset Enable"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:7a8ae507-338e-4c1a-8e94-76acbadfd0c5"/>
                                                        <a:da name="DEFAULT" value="true"/>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'false') = 'false') and
                                                                    (node:fallback(../../McuPartitionResetEnable, 'true') = 'true')
                                                                )"
                                                                true="The reset signal to partition 1 must be deasserted first in order to deassert the reset signal of the Cortex-A53 CORE 0 cluster 0 within the partition (i.e. McuPartition1Config/McuPartitionResetEnable = 'false')."/>
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'false') = 'false') and
                                                                    (node:fallback(../McuCoreClockEnable, 'false') = 'false')
                                                                )"
                                                                true="The clock of the Cortex-A53 CORE 0 cluster 0 must be enabled first in order to deassert its reset signal (i.e. McuCore0Configuration/McuCoreClockEnable = 'true')."/>
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'false') = 'true') and
                                                                    (node:fallback(../McuCoreClockEnable, 'false') = 'true')
                                                                )"
                                                                true="The clock of the Cortex-A53 CORE 0 cluster 0 must be disabled first in order to assert its reset signal (i.e. McuCore0Configuration/McuCoreClockEnable = 'false')."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuCoreBootAddress" type="INTEGER">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_ME_PRTN1_CORE0_ADDR[ADDR] register field.<br />
                                                                    This register controls the boot address of the Cortex-A53 CORE 0 cluster 0. <br />
                                                                    The value from this field will be masked with 0xFFFFFFFC (i.e.
                                                                    the boot address must be aligned on a 4-byte boundary). <br />
                                                                    This field is modifiable only when the corresponding Cortex-A53 CORE 0 cluster 0
                                                                    clock is enabled and McuCoreControlConfiguration/McuCoreBootAddressControl
                                                                    is 'true'. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="Cortex-A53 CORE 0 cluster 0 Boot Address"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:cab556a4-fd92-4e77-28db-6809aebd6a11"/>
                                                        <a:da name="DEFAULT" value="0"/>
                                                        <a:a name="INVALID" type="Range">
                                                            <a:tst expr="&lt;=4294967292"/>
                                                            <a:tst expr="&gt;=0"/>
                                                        </a:a>
                                                        <a:a name="EDITABLE" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(../McuCoreClockEnable, 'false') = 'true') and
                                                                    (node:fallback(as:modconf('Mcu')[1]/McuCoreControlConfiguration/McuCoreBootAddressControl, 'false') = 'true')
                                                                )"/>
                                                        </a:a>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="(node:fallback(., 4294967292) mod 4) != 0" true="The boot address must be aligned on a 4-byte boundary."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuCoreBootAddressLinkerSym" type="STRING">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_ME_PRTN1_CORE0_ADDR[ADDR] register field.<br />
                                                                    This register controls the boot address of the Cortex-A53 CORE 0 cluster 0. <br />
                                                                    The value from this field will be masked with 0xFFFFFFFC (i.e.
                                                                    the boot address must be aligned on a 4-byte boundary). <br />
                                                                    This field is modifiable only when the corresponding Cortex-A53 CORE 0 cluster 0
                                                                    clock is enabled and McuCoreControlConfiguration/McuCoreBootAddressControl
                                                                    is 'true'. <br />
                                                                    <strong>Note:</strong> If this parameter is empty, then the boot address
                                                                    (integer value) defined by 'McuCoreBootAddress' will be used. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="Cortex-A53 CORE 0 cluster 0 Boot Address Linker Symbol"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:5179e367-2481-4677-b488-51c3eb32d797"/>
                                                        <a:da name="DEFAULT" value=""/>
                                                        <a:a name="EDITABLE" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(../McuCoreClockEnable, 'false') = 'true') and
                                                                    (node:fallback(as:modconf('Mcu')[1]/McuCoreControlConfiguration/McuCoreBootAddressControl, 'false') = 'true')
                                                                )"/>
                                                        </a:a>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="( node:empty(.) or (text:match(normalize-space(.),'^[_a-zA-Z]+[_0-9a-zA-Z]*$')) )"
                                                               false="Invalid identifier. The field must specify a valid C identifier (i.e. an arbitrarily long sequence of digits, underscores, lowercase and uppercase Latin letters, that must begin with a non-digit character)."/>
                                                        </a:da>
                                                    </v:var>

                                                </v:ctr>

                                                <v:ctr name="McuCore1Configuration" type="IDENTIFIABLE">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This container contains the configuration for the Cortex-A53 CORE 1 cluster 0 within Partition 1. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="UUID" value="ECUC:51dd8220-8b81-4cc9-9c2d-346e51b4558d"/>

                                                    <v:var name="McuCoreUnderMcuControl" type="BOOLEAN">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Set this to TRUE if Cortex-A53 CORE 1 cluster 0 is under MCU control.<br />
                                                                    If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN1_CORE1 and PRST1_0).<br />
                                                                    Note: Implementation Specific Parameter.<br />
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="LABEL" value="Cortex-A53 CORE 1 cluster 0 Under MCU Control"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:56612e64-01c3-4935-bb5f-23b843c16b54"/>
                                                        <a:da name="DEFAULT" value="true"/>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'false') = 'true') and
                                                                    (node:fallback(../../McuPartitionUnderMcuControl, 'true') = 'false')
                                                                )"
                                                                true="The field McuPartition1Config/McuPartitionUnderMcuControl must be set to 'true' when Cortex-A53 CORE 1 cluster 0 is under MCU control."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuCoreClockEnable" type="BOOLEAN">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_ME_PRTN1_CORE1_PCONF[CCE] register field.<br />
                                                                    This bit is reserved. To enable Cortex-A53 CORE 1 cluster 0 please configure McuCore0Configuration/McuCoreClockEnable. <br />
                                                                    <strong>Warning:</strong> When disabling the core clock, the driver
                                                                    will busy-wait until the corresponding MC_ME_PRTN1_CORE1_STAT[WFI]
                                                                    flag is set. This means that the core to be shutdown must always
                                                                    execute an WFI as its last instruction. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="Cortex-A53 CORE 1 cluster 0 Core Clock Enable"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:a6763e07-33e9-bc1a-8a04-74fe9aa2e03f"/>
                                                        <a:da name="DEFAULT" value="false"/>
                                                        <a:da name="READONLY" value="true"/>
                                                    </v:var>

                                                    <v:var name="McuCoreResetEnable" type="BOOLEAN">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_RGM_PRST1_0[PERIPH_66_RST] register field.<br />
                                                                    This bit controls whether the Cortex-A53 CORE 1 cluster 0 reset is asserted or deasserted. <br />
                                                                    0 - Cortex-A53 CORE 1 cluster 0 Core Reset is Deasserted. <br />
                                                                    1 - Cortex-A53 CORE 1 cluster 0 Core Reset is Asserted. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="Cortex-A53 CORE 1 cluster 0 Core Reset Enable"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:f4bae507-338e-4c1a-8e94-76acbadfd0c5"/>
                                                        <a:da name="DEFAULT" value="true"/>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'false') = 'false') and
                                                                    (node:fallback(../../McuPartitionResetEnable, 'true') = 'true')
                                                                )"
                                                                true="The reset signal to partition 1 must be deasserted first in order to deassert the reset signal of the Cortex-A53 CORE 1 cluster 0 within the partition (i.e. McuPartition1Config/McuPartitionResetEnable = 'false')."/>
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'false') = 'false') and
                                                                    (node:fallback(../../McuCore0Configuration/McuCoreClockEnable, 'false') = 'false')
                                                                )"
                                                                true="The clock of the Cortex-A53 CORE 1 cluster 0 must be enabled first in order to deassert its reset signal (i.e. McuCore0Configuration/McuCoreClockEnable = 'true')."/>
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'false') = 'true') and
                                                                    (node:fallback(../../McuCore0Configuration/McuCoreClockEnable, 'false') = 'true')
                                                                )"
                                                                true="The clock of the Cortex-A53 CORE 1 cluster 0 must be disabled first in order to assert its reset signal (i.e. McuCore0Configuration/McuCoreClockEnable = 'false')."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuCoreBootAddress" type="INTEGER">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_ME_PRTN1_CORE1_ADDR[ADDR] register field.<br />
                                                                    This register controls the boot address of the Cortex-A53 CORE 1 cluster 0. <br />
                                                                    The value from this field will be masked with 0xFFFFFFFC (i.e.
                                                                    the boot address must be aligned on a 4-byte boundary). <br />
                                                                    This field is modifiable only when the corresponding Cortex-A53 CORE 1 cluster 0
                                                                    clock is enabled and McuCoreControlConfiguration/McuCoreBootAddressControl
                                                                    is 'true'. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="Cortex-A53 CORE 1 cluster 0 Boot Address"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:18e656a4-fd92-4e7e-81d0-3e24a9793bb6"/>
                                                        <a:da name="DEFAULT" value="0"/>
                                                        <a:a name="INVALID" type="Range">
                                                            <a:tst expr="&lt;=4294967292"/>
                                                            <a:tst expr="&gt;=0"/>
                                                        </a:a>
                                                        <a:a name="EDITABLE" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(../McuCoreClockEnable, 'false') = 'true') and
                                                                    (node:fallback(as:modconf('Mcu')[1]/McuCoreControlConfiguration/McuCoreBootAddressControl, 'false') = 'true')
                                                                )"/>
                                                        </a:a>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="(node:fallback(., 4294967292) mod 4) != 0" true="The boot address must be aligned on a 4-byte boundary."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuCoreBootAddressLinkerSym" type="STRING">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_ME_PRTN1_CORE1_ADDR[ADDR] register field.<br />
                                                                    This register controls the boot address of the Cortex-A53 CORE 1 cluster 0. <br />
                                                                    The value from this field will be masked with 0xFFFFFFFC (i.e.
                                                                    the boot address must be aligned on a 4-byte boundary). <br />
                                                                    This field is modifiable only when the corresponding Cortex-A53 CORE 1 cluster 0
                                                                    clock is enabled and McuCoreControlConfiguration/McuCoreBootAddressControl
                                                                    is 'true'. <br />
                                                                    <strong>Note:</strong> If this parameter is empty, then the boot address
                                                                    (integer value) defined by 'McuCoreBootAddress' will be used. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="Cortex-A53 CORE 1 cluster 0 Boot Address Linker Symbol"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:5177f367-0781-4677-b488-51c3eb1cd797"/>
                                                        <a:da name="DEFAULT" value=""/>
                                                        <a:a name="EDITABLE" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(../McuCoreClockEnable, 'false') = 'true') and
                                                                    (node:fallback(as:modconf('Mcu')[1]/McuCoreControlConfiguration/McuCoreBootAddressControl, 'false') = 'true')
                                                                )"/>
                                                        </a:a>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="( node:empty(.) or (text:match(normalize-space(.),'^[_a-zA-Z]+[_0-9a-zA-Z]*$')) )"
                                                               false="Invalid identifier. The field must specify a valid C identifier (i.e. an arbitrarily long sequence of digits, underscores, lowercase and uppercase Latin letters, that must begin with a non-digit character)."/>
                                                        </a:da>
                                                    </v:var>

                                                </v:ctr>

                                                <v:ctr name="McuCore2Configuration" type="IDENTIFIABLE">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This container contains the configuration for the Cortex-A53 CORE 0 cluster 1 within Partition 1. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="UUID" value="ECUC:51f54220-8b81-4cc9-9c2d-346e19b4558d"/>

                                                    <v:var name="McuCoreUnderMcuControl" type="BOOLEAN">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Set this to TRUE if Cortex-A53 CORE 0 cluster 1 is under MCU control.<br />
                                                                    If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN1_CORE2 and PRST1_0).<br />
                                                                    Note: Implementation Specific Parameter.<br />
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="LABEL" value="Cortex-A53 CORE 0 cluster 1 Under MCU Control"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:56612e64-574d-4935-2a5f-23b843c16b54"/>
                                                        <a:da name="DEFAULT" value="true"/>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'false') = 'true') and
                                                                    (node:fallback(../../McuPartitionUnderMcuControl, 'true') = 'false')
                                                                )"
                                                                true="The field McuPartition1Config/McuPartitionUnderMcuControl must be set to 'true' when Cortex-A53 CORE 0 cluster 1 is under MCU control."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuCoreClockEnable" type="BOOLEAN">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_ME_PRTN1_CORE2_PCONF[CCE] register field.<br />
                                                                    Lockstep mode: These registers are reserved. <br />
                                                                    Performance mode: These registers control CA53 cluster1. <br />
                                                                    0 - Cortex-A53 CORE 0 cluster 1 Core Clock is Disabled. <br />
                                                                    1 - Cortex-A53 CORE 0 cluster 1 Core Clock is Enabled. <br />
                                                                    <strong>Warning:</strong> When disabling the core clock, the driver
                                                                    will busy-wait until the corresponding MC_ME_PRTN1_CORE2_STAT[WFI]
                                                                    flag is set. This means that the core to be shutdown must always
                                                                    execute an WFI as its last instruction. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="Cortex-A53 CORE 0 cluster 1 Core Clock Enable"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:a68ea507-3ee9-4cba-8a04-d0e9c54e65aa"/>
                                                        <a:da name="DEFAULT" value="false"/>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'false') = 'true') and
                                                                    (node:fallback(../../McuPartitionClockEnable, 'true') = 'false')
                                                                )"
                                                                true="The clock to partition 1 must be enabled first in order to enable the clock of the Cortex-A53 CORE 0 cluster 1 within the partition (i.e. McuPartition1Config/McuPartitionClockEnable = 'true')."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuCoreResetEnable" type="BOOLEAN">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_RGM_PRST1_0[PERIPH_67_RST] register field.<br />
                                                                    This bit controls whether the Cortex-A53 CORE 0 cluster 1 reset is asserted or deasserted. <br />
                                                                    0 - Cortex-A53 CORE 0 cluster 1 Core Reset is Deasserted. <br />
                                                                    1 - Cortex-A53 CORE 0 cluster 1 Core Reset is Asserted. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="Cortex-A53 CORE 0 cluster 1 Core Reset Enable"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:6c8ae507-338e-4c1a-8e94-76acbadfd0c5"/>
                                                        <a:da name="DEFAULT" value="true"/>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'false') = 'false') and
                                                                    (node:fallback(../../McuPartitionResetEnable, 'true') = 'true')
                                                                )"
                                                                true="The reset signal to partition 1 must be deasserted first in order to deassert the reset signal of the Cortex-A53 CORE 0 cluster 1 within the partition (i.e. McuPartition1Config/McuPartitionResetEnable = 'false')."/>
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'false') = 'false') and
                                                                    (node:fallback(../McuCoreClockEnable, 'false') = 'false')
                                                                )"
                                                                true="The clock of the Cortex-A53 CORE 0 cluster 1 must be enabled first in order to deassert its reset signal (i.e. McuCore2Configuration/McuCoreClockEnable = 'true')."/>
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'false') = 'true') and
                                                                    (node:fallback(../McuCoreClockEnable, 'false') = 'true')
                                                                )"
                                                                true="The clock of the Cortex-A53 CORE 0 cluster 1 must be disabled first in order to assert its reset signal (i.e. McuCore2Configuration/McuCoreClockEnable = 'false')."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuCoreBootAddress" type="INTEGER">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_ME_PRTN1_CORE2_ADDR[ADDR] register field.<br />
                                                                    This register controls the boot address of the Cortex-A53 CORE 0 cluster 1. <br />
                                                                    The value from this field will be masked with 0xFFFFFFFC (i.e.
                                                                    the boot address must be aligned on a 4-byte boundary). <br />
                                                                    This field is modifiable only when the corresponding Cortex-A53 CORE 0 cluster 1
                                                                    clock is enabled and McuCoreControlConfiguration/McuCoreBootAddressControl
                                                                    is 'true'. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="Cortex-A53 CORE 0 cluster 1 Boot Address"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:cae5f6a4-fd9e-de7a-81db-a0e719a6ccd0"/>
                                                        <a:da name="DEFAULT" value="0"/>
                                                        <a:a name="INVALID" type="Range">
                                                            <a:tst expr="&lt;=4294967292"/>
                                                            <a:tst expr="&gt;=0"/>
                                                        </a:a>
                                                        <a:a name="EDITABLE" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(../McuCoreClockEnable, 'false') = 'true') and
                                                                    (node:fallback(as:modconf('Mcu')[1]/McuCoreControlConfiguration/McuCoreBootAddressControl, 'false') = 'true')
                                                                )"/>
                                                        </a:a>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="(node:fallback(., 4294967292) mod 4) != 0" true="The boot address must be aligned on a 4-byte boundary."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuCoreBootAddressLinkerSym" type="STRING">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_ME_PRTN1_CORE2_ADDR[ADDR] register field.<br />
                                                                    This register controls the boot address of the Cortex-A53 CORE 0 cluster 1. <br />
                                                                    The value from this field will be masked with 0xFFFFFFFC (i.e.
                                                                    the boot address must be aligned on a 4-byte boundary). <br />
                                                                    This field is modifiable only when the corresponding Cortex-A53 CORE 0 cluster 1
                                                                    clock is enabled and McuCoreControlConfiguration/McuCoreBootAddressControl
                                                                    is 'true'. <br />
                                                                    <strong>Note:</strong> If this parameter is empty, then the boot address
                                                                    (integer value) defined by 'McuCoreBootAddress' will be used. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="Cortex-A53 CORE 0 cluster 1 Boot Address Linker Symbol"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:5177f367-2481-4677-b488-51c3e642d797"/>
                                                        <a:da name="DEFAULT" value=""/>
                                                        <a:a name="EDITABLE" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(../McuCoreClockEnable, 'false') = 'true') and
                                                                    (node:fallback(as:modconf('Mcu')[1]/McuCoreControlConfiguration/McuCoreBootAddressControl, 'false') = 'true')
                                                                )"/>
                                                        </a:a>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="( node:empty(.) or (text:match(normalize-space(.),'^[_a-zA-Z]+[_0-9a-zA-Z]*$')) )"
                                                               false="Invalid identifier. The field must specify a valid C identifier (i.e. an arbitrarily long sequence of digits, underscores, lowercase and uppercase Latin letters, that must begin with a non-digit character)."/>
                                                        </a:da>
                                                    </v:var>

                                                </v:ctr>

                                                <v:ctr name="McuCore3Configuration" type="IDENTIFIABLE">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This container contains the configuration for the Cortex-A53 CORE 1 cluster 1 within Partition 1. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="UUID" value="ECUC:53b27820-8b81-4cc9-9c2d-346e19b4558d"/>

                                                    <v:var name="McuCoreUnderMcuControl" type="BOOLEAN">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Set this to TRUE if Cortex-A53 CORE 1 cluster 1 is under MCU control.<br />
                                                                    If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN1_CORE3 and PRST1_0).<br />
                                                                    Note: Implementation Specific Parameter.<br />
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="LABEL" value="Cortex-A53 CORE 1 cluster 1 Under MCU Control"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:56612924-574d-4935-bb5f-23b8437a6b54"/>
                                                        <a:da name="DEFAULT" value="true"/>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'false') = 'true') and
                                                                    (node:fallback(../../McuPartitionUnderMcuControl, 'true') = 'false')
                                                                )"
                                                                true="The field McuPartition1Config/McuPartitionUnderMcuControl must be set to 'true' when Cortex-A53 CORE 1 cluster 1 is under MCU control."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuCoreClockEnable" type="BOOLEAN">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_ME_PRTN1_CORE3_PCONF[CCE] register field.<br />
                                                                    This bit is reserved. To enable Cortex-A53 CORE 1 cluster 1 please configure McuCore2Configuration/McuCoreClockEnable. <br />
                                                                    <strong>Warning:</strong> When disabling the core clock, the driver
                                                                    will busy-wait until the corresponding MC_ME_PRTN1_CORE3_STAT[WFI]
                                                                    flag is set. This means that the core to be shutdown must always
                                                                    execute an WFI as its last instruction. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="Cortex-A53 CORE 1 cluster 1 Core Clock Enable"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:a68ea51b-2fe9-4cba-23a4-c4349d7faeba"/>
                                                        <a:da name="DEFAULT" value="false"/>
                                                        <a:da name="READONLY" value="true"/>
                                                    </v:var>

                                                    <v:var name="McuCoreResetEnable" type="BOOLEAN">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_RGM_PRST1_0[PERIPH_68_RST] register field.<br />
                                                                    This bit controls whether the Cortex-A53 CORE 1 cluster 1 reset is asserted or deasserted. <br />
                                                                    0 - Cortex-A53 CORE 1 cluster 1 Core Reset is Deasserted. <br />
                                                                    1 - Cortex-A53 CORE 1 cluster 1 Core Reset is Asserted. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="Cortex-A53 CORE 1 cluster 1 Core Reset Enable"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:a18ae507-338e-4c1a-8e94-76acbadfd0c5"/>
                                                        <a:da name="DEFAULT" value="true"/>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'false') = 'false') and
                                                                    (node:fallback(../../McuPartitionResetEnable, 'true') = 'true')
                                                                )"
                                                                true="The reset signal to partition 1 must be deasserted first in order to deassert the reset signal of the Cortex-A53 CORE 1 cluster 1 within the partition (i.e. McuPartition1Config/McuPartitionResetEnable = 'false')."/>
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'false') = 'false') and
                                                                    (node:fallback(../../McuCore2Configuration/McuCoreClockEnable, 'false') = 'false')
                                                                )"
                                                                true="The clock of the Cortex-A53 CORE 1 cluster 1 must be enabled first in order to deassert its reset signal (i.e. McuCore2Configuration/McuCoreClockEnable = 'true')."/>
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'false') = 'true') and
                                                                    (node:fallback(../../McuCore2Configuration/McuCoreClockEnable, 'false') = 'true')
                                                                )"
                                                                true="The clock of the Cortex-A53 CORE 1 cluster 1 must be disabled first in order to assert its reset signal (i.e. McuCore2Configuration/McuCoreClockEnable = 'false')."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuCoreBootAddress" type="INTEGER">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_ME_PRTN1_CORE3_ADDR[ADDR] register field.<br />
                                                                    This register controls the boot address of the Cortex-A53 CORE 1 cluster 1. <br />
                                                                    The value from this field will be masked with 0xFFFFFFFC (i.e.
                                                                    the boot address must be aligned on a 4-byte boundary). <br />
                                                                    This field is modifiable only when the corresponding Cortex-A53 CORE 1 cluster 1
                                                                    clock is enabled and McuCoreControlConfiguration/McuCoreBootAddressControl
                                                                    is 'true'. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="Cortex-A53 CORE 1 cluster 1 Boot Address"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:cae5f6a4-fd9e-107a-7adb-b3e7efbbc2e0"/>
                                                        <a:da name="DEFAULT" value="0"/>
                                                        <a:a name="INVALID" type="Range">
                                                            <a:tst expr="&lt;=4294967292"/>
                                                            <a:tst expr="&gt;=0"/>
                                                        </a:a>
                                                        <a:a name="EDITABLE" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(../McuCoreClockEnable, 'false') = 'true') and
                                                                    (node:fallback(as:modconf('Mcu')[1]/McuCoreControlConfiguration/McuCoreBootAddressControl, 'false') = 'true')
                                                                )"/>
                                                        </a:a>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="(node:fallback(., 4294967292) mod 4) != 0" true="The boot address must be aligned on a 4-byte boundary."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuCoreBootAddressLinkerSym" type="STRING">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_ME_PRTN1_CORE3_ADDR[ADDR] register field.<br />
                                                                    This register controls the boot address of the Cortex-A53 CORE 1 cluster 1. <br />
                                                                    The value from this field will be masked with 0xFFFFFFFC (i.e.
                                                                    the boot address must be aligned on a 4-byte boundary). <br />
                                                                    This field is modifiable only when the corresponding Cortex-A53 CORE 1 cluster 1
                                                                    clock is enabled and McuCoreControlConfiguration/McuCoreBootAddressControl
                                                                    is 'true'. <br />
                                                                    <strong>Note:</strong> If this parameter is empty, then the boot address
                                                                    (integer value) defined by 'McuCoreBootAddress' will be used. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="Cortex-A53 CORE 1 cluster 1 Boot Address Linker Symbol"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:516bf367-2481-4677-b488-54a3e6acd797"/>
                                                        <a:da name="DEFAULT" value=""/>
                                                        <a:a name="EDITABLE" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(../McuCoreClockEnable, 'false') = 'true') and
                                                                    (node:fallback(as:modconf('Mcu')[1]/McuCoreControlConfiguration/McuCoreBootAddressControl, 'false') = 'true')
                                                                )"/>
                                                        </a:a>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="( node:empty(.) or (text:match(normalize-space(.),'^[_a-zA-Z]+[_0-9a-zA-Z]*$')) )"
                                                               false="Invalid identifier. The field must specify a valid C identifier (i.e. an arbitrarily long sequence of digits, underscores, lowercase and uppercase Latin letters, that must begin with a non-digit character)."/>
                                                        </a:da>
                                                    </v:var>
                                                </v:ctr>

                                                <v:ctr name="McuCore4Configuration" type="IDENTIFIABLE">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This container contains the configuration for the Cortex-A53 CORE 2 cluster 0 core within Partition 1. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="UUID" value="ECUC:51dd8220-8b81-4cc9-9cff-346e2534558d"/>
                                                    <a:a name="VISIBLE" type="XPath">
                                                        <a:tst expr="contains(ecu:get('MCU.MC_ME.Partition1.Cores.List'),'CORE_4')" />
                                                    </a:a>
                                                    <v:var name="McuCoreUnderMcuControl" type="BOOLEAN">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Set this to TRUE if Cortex-A53 CORE 2 cluster 0 is under MCU control.<br />
                                                                    If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN1_CORE4 and PRST1_0).<br />
                                                                    Note: Implementation Specific Parameter.<br />
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="LABEL" value="Cortex-A53 CORE 2 cluster 0 Under MCU Control"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:56613a64-57c3-4935-bb5f-23b843477b54"/>
                                                        <a:da name="DEFAULT" value="true"/>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (contains(ecu:get('MCU.MC_ME.Partition1.Cores.List'),'CORE_4')) and
                                                                    (node:fallback(., 'false') = 'true') and
                                                                    (node:fallback(../../McuPartitionUnderMcuControl, 'true') = 'false')
                                                                )"
                                                                true="The field McuPartition1Config/McuPartitionUnderMcuControl must be set to 'true' when Cortex-A53 CORE 2 cluster 0 is under MCU control."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuCoreClockEnable" type="BOOLEAN">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_ME_PRTN1_CORE4_PCONF[CCE] register field.<br />
                                                                    This bit is reserved. To enable Cortex-A53 CORE 2 cluster 0 please configure McuCore0Configuration/McuCoreClockEnable. <br />
                                                                    <strong>Warning:</strong> When disabling the core clock, the driver
                                                                    will busy-wait until the corresponding MC_ME_PRTN1_CORE0_STAT[WFI]
                                                                    flag is set. This means that the core to be shutdown must always
                                                                    execute an WFI as its last instruction. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="Cortex-A53 CORE 2 cluster 0 Clock Enable"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:f68ae507-338e-4c1a-0194-76cacdafd1c5"/>
                                                        <a:da name="DEFAULT" value="false"/>
                                                        <a:da name="READONLY" value="true"/>
                                                    </v:var>

                                                    <v:var name="McuCoreResetEnable" type="BOOLEAN">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_RGM_PRST1_0[PERIPH_69_RST] register field.<br />
                                                                    This bit controls whether the Cortex-A53 CORE 2 cluster 0 reset is asserted or deasserted. <br />
                                                                    0 - Cortex-A53 CORE 2 cluster 0 Core Reset is Deasserted. <br />
                                                                    1 - Cortex-A53 CORE 2 cluster 0 Core Reset is Asserted. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="Cortex-A53 CORE 2 cluster 0 Core Reset Enable"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:7a8ae507-338e-4c1a-8e94-76acbadfd1c5"/>
                                                        <a:da name="DEFAULT" value="true"/>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (contains(ecu:get('MCU.MC_ME.Partition1.Cores.List'),'CORE_4')) and
                                                                    (node:fallback(., 'false') = 'false') and
                                                                    (node:fallback(../../McuPartitionResetEnable, 'true') = 'true')
                                                                )"
                                                                true="The reset signal to partition 1 must be deasserted first in order to deassert the reset signal of the A53_0 core within the partition (i.e. McuPartition1Config/McuPartitionResetEnable = 'false')."/>
                                                            <a:tst expr="
                                                                (
                                                                    (contains(ecu:get('MCU.MC_ME.Partition1.Cores.List'),'CORE_4')) and
                                                                    (node:fallback(., 'false') = 'false') and
                                                                    (node:fallback(../../McuCore0Configuration/McuCoreClockEnable, 'false') = 'false')
                                                                )"
                                                                true="The clock of the A53_0 core must be enabled first in order to deassert its reset signal (i.e. McuCore0Configuration/McuCoreClockEnable = 'true')."/>
                                                            <a:tst expr="
                                                                (
                                                                    (contains(ecu:get('MCU.MC_ME.Partition1.Cores.List'),'CORE_4')) and
                                                                    (node:fallback(., 'false') = 'true') and
                                                                    (node:fallback(../../McuCore0Configuration/McuCoreClockEnable, 'false') = 'true')
                                                                )"
                                                                true="The clock of the A53_0 core must be disabled first in order to assert its reset signal (i.e. McuCore0Configuration/McuCoreClockEnable = 'false')."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuCoreBootAddress" type="INTEGER">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_ME_PRTN1_CORE4_ADDR[ADDR] register field.<br />
                                                                    This register controls the boot address of the Cortex-A53 CORE 2 cluster 0 core. <br />
                                                                    The value from this field will be masked with 0xFFFFFFFC (i.e.
                                                                    the boot address must be aligned on a 4-byte boundary). <br />
                                                                    This field is modifiable only when the corresponding A53_0 core
                                                                    clock is enabled and McuCoreControlConfiguration/McuCoreBootAddressControl
                                                                    is 'true'. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="Cortex-A53 CORE 2 cluster 0 Boot Address"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:cab556a4-fd92-4e77-28db-6819aebd6a11"/>
                                                        <a:da name="DEFAULT" value="0"/>
                                                        <a:a name="INVALID" type="Range">
                                                            <a:tst expr="&lt;=4294967292"/>
                                                            <a:tst expr="&gt;=0"/>
                                                        </a:a>
                                                        <a:a name="EDITABLE" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(../McuCoreClockEnable, 'false') = 'true') and
                                                                    (node:fallback(as:modconf('Mcu')[1]/McuCoreControlConfiguration/McuCoreBootAddressControl, 'false') = 'true')
                                                                )"/>
                                                        </a:a>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="(node:fallback(., 4294967292) mod 4) != 0" true="The boot address must be aligned on a 4-byte boundary."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuCoreBootAddressLinkerSym" type="STRING">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_ME_PRTN1_CORE4_ADDR[ADDR] register field.<br />
                                                                    This register controls the boot address of the Cortex-A53 CORE 2 cluster 0 core. <br />
                                                                    The value from this field will be masked with 0xFFFFFFFC (i.e.
                                                                    the boot address must be aligned on a 4-byte boundary). <br />
                                                                    This field is modifiable only when the corresponding Cortex-A53 CORE 2 cluster 0 core
                                                                    clock is enabled and McuCoreControlConfiguration/McuCoreBootAddressControl
                                                                    is 'true'. <br />
                                                                    <strong>Note:</strong> If this parameter is empty, then the boot address
                                                                    (integer value) defined by 'McuCoreBootAddress' will be used. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="Cortex-A53 CORE 2 cluster 0 Boot Address Linker Symbol"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:5179e367-2481-4677-b488-51c3eb32d897"/>
                                                        <a:da name="DEFAULT" value=""/>
                                                        <a:a name="EDITABLE" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(../McuCoreClockEnable, 'false') = 'true') and
                                                                    (node:fallback(as:modconf('Mcu')[1]/McuCoreControlConfiguration/McuCoreBootAddressControl, 'false') = 'true')
                                                                )"/>
                                                        </a:a>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="( node:empty(.) or (text:match(normalize-space(.),'^[_a-zA-Z]+[_0-9a-zA-Z]*$')) )"
                                                               false="Invalid identifier. The field must specify a valid C identifier (i.e. an arbitrarily long sequence of digits, underscores, lowercase and uppercase Latin letters, that must begin with a non-digit character)."/>
                                                        </a:da>
                                                    </v:var>

                                                </v:ctr>

                                                <v:ctr name="McuCore5Configuration" type="IDENTIFIABLE">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This container contains the configuration for the Cortex-A53 CORE 3 cluster 0 within Partition 1. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="UUID" value="ECUC:51dd8220-8b81-4cc9-9c2d-346e51b4658d"/>
                                                    <a:a name="VISIBLE" type="XPath">
                                                        <a:tst expr="contains(ecu:get('MCU.MC_ME.Partition1.Cores.List'),'CORE_5')" />
                                                    </a:a>

                                                    <v:var name="McuCoreUnderMcuControl" type="BOOLEAN">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Set this to TRUE if Cortex-A53 CORE 3 cluster 0 is under MCU control.<br />
                                                                    If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN1_CORE1 and PRST1_0).<br />
                                                                    Note: Implementation Specific Parameter.<br />
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="LABEL" value="Cortex-A53 CORE 3 cluster 0 Under MCU Control"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:56612e64-01c3-4935-bb5f-23b853c16b54"/>
                                                        <a:da name="DEFAULT" value="true"/>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (contains(ecu:get('MCU.MC_ME.Partition1.Cores.List'),'CORE_5')) and
                                                                    (node:fallback(., 'false') = 'true') and
                                                                    (node:fallback(../../McuPartitionUnderMcuControl, 'true') = 'false')
                                                                )"
                                                                true="The field McuPartition1Config/McuPartitionUnderMcuControl must be set to 'true' when Cortex-A53 CORE 3 cluster 0 is under MCU control."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuCoreClockEnable" type="BOOLEAN">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_ME_PRTN1_CORE1_PCONF[CCE] register field.<br />
                                                                    This bit is reserved. To enable Cortex-A53 CORE 3 cluster 0 please configure McuCore0Configuration/McuCoreClockEnable. <br />
                                                                    <strong>Warning:</strong> When disabling the core clock, the driver
                                                                    will busy-wait until the corresponding MC_ME_PRTN1_CORE1_STAT[WFI]
                                                                    flag is set. This means that the core to be shutdown must always
                                                                    execute an WFI as its last instruction. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="Cortex-A53 CORE 3 cluster 0 Core Clock Enable"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:a6763e07-33e9-bc1a-8a04-74fe9aa2e13f"/>
                                                        <a:da name="DEFAULT" value="false"/>
                                                        <a:da name="READONLY" value="true"/>
                                                    </v:var>

                                                    <v:var name="McuCoreResetEnable" type="BOOLEAN">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_RGM_PRST1_0[PERIPH_70_RST] register field.<br />
                                                                    This bit controls whether the Cortex-A53 CORE 3 cluster 0 reset is asserted or deasserted. <br />
                                                                    0 - Cortex-A53 CORE 3 cluster 0 Core Reset is Deasserted. <br />
                                                                    1 - Cortex-A53 CORE 3 cluster 0 Core Reset is Asserted. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="Cortex-A53 CORE 3 cluster 0 Core Reset Enable"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:f4bae507-338e-4c1a-8e94-76acbadfd1c5"/>
                                                        <a:da name="DEFAULT" value="true"/>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (contains(ecu:get('MCU.MC_ME.Partition1.Cores.List'),'CORE_5')) and
                                                                    (node:fallback(., 'false') = 'false') and
                                                                    (node:fallback(../../McuPartitionResetEnable, 'true') = 'true')
                                                                )"
                                                                true="The reset signal to partition 1 must be deasserted first in order to deassert the reset signal of the Cortex-A53 CORE 3 cluster 0 within the partition (i.e. McuPartition1Config/McuPartitionResetEnable = 'false')."/>
                                                            <a:tst expr="
                                                                (
                                                                    (contains(ecu:get('MCU.MC_ME.Partition1.Cores.List'),'CORE_5')) and
                                                                    (node:fallback(., 'false') = 'false') and
                                                                    (node:fallback(../../McuCore0Configuration/McuCoreClockEnable, 'false') = 'false')
                                                                )"
                                                                true="The clock of the Cortex-A53 CORE 3 cluster 0 must be enabled first in order to deassert its reset signal (i.e. McuCore0Configuration/McuCoreClockEnable = 'true')."/>
                                                            <a:tst expr="
                                                                (
                                                                    (contains(ecu:get('MCU.MC_ME.Partition1.Cores.List'),'CORE_5')) and
                                                                    (node:fallback(., 'false') = 'true') and
                                                                    (node:fallback(../../McuCore0Configuration/McuCoreClockEnable, 'false') = 'true')
                                                                )"
                                                                true="The clock of the Cortex-A53 CORE 3 cluster 0 must be disabled first in order to assert its reset signal (i.e. McuCore0Configuration/McuCoreClockEnable = 'false')."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuCoreBootAddress" type="INTEGER">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_ME_PRTN1_CORE1_ADDR[ADDR] register field.<br />
                                                                    This register controls the boot address of the Cortex-A53 CORE 3 cluster 0. <br />
                                                                    The value from this field will be masked with 0xFFFFFFFC (i.e.
                                                                    the boot address must be aligned on a 4-byte boundary). <br />
                                                                    This field is modifiable only when the corresponding Cortex-A53 CORE 3 cluster 0
                                                                    clock is enabled and McuCoreControlConfiguration/McuCoreBootAddressControl
                                                                    is 'true'. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="Cortex-A53 CORE 3 cluster 0 Boot Address"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:18e656a4-fd92-4e7e-81d0-3e24a9794bb6"/>
                                                        <a:da name="DEFAULT" value="0"/>
                                                        <a:a name="INVALID" type="Range">
                                                            <a:tst expr="&lt;=4294967292"/>
                                                            <a:tst expr="&gt;=0"/>
                                                        </a:a>
                                                        <a:a name="EDITABLE" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(../McuCoreClockEnable, 'false') = 'true') and
                                                                    (node:fallback(as:modconf('Mcu')[1]/McuCoreControlConfiguration/McuCoreBootAddressControl, 'false') = 'true')
                                                                )"/>
                                                        </a:a>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="(node:fallback(., 4294967292) mod 4) != 0" true="The boot address must be aligned on a 4-byte boundary."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuCoreBootAddressLinkerSym" type="STRING">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_ME_PRTN1_CORE1_ADDR[ADDR] register field.<br />
                                                                    This register controls the boot address of the Cortex-A53 CORE 3 cluster 0. <br />
                                                                    The value from this field will be masked with 0xFFFFFFFC (i.e.
                                                                    the boot address must be aligned on a 4-byte boundary). <br />
                                                                    This field is modifiable only when the corresponding Cortex-A53 CORE 3 cluster 0
                                                                    clock is enabled and McuCoreControlConfiguration/McuCoreBootAddressControl
                                                                    is 'true'. <br />
                                                                    <strong>Note:</strong> If this parameter is empty, then the boot address
                                                                    (integer value) defined by 'McuCoreBootAddress' will be used. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="Cortex-A53 CORE 3 cluster 0 Boot Address Linker Symbol"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:5177f367-0781-4677-b488-51c3eb1cd897"/>
                                                        <a:da name="DEFAULT" value=""/>
                                                        <a:a name="EDITABLE" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(../McuCoreClockEnable, 'false') = 'true') and
                                                                    (node:fallback(as:modconf('Mcu')[1]/McuCoreControlConfiguration/McuCoreBootAddressControl, 'false') = 'true')
                                                                )"/>
                                                        </a:a>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="( node:empty(.) or (text:match(normalize-space(.),'^[_a-zA-Z]+[_0-9a-zA-Z]*$')) )"
                                                               false="Invalid identifier. The field must specify a valid C identifier (i.e. an arbitrarily long sequence of digits, underscores, lowercase and uppercase Latin letters, that must begin with a non-digit character)."/>
                                                        </a:da>
                                                    </v:var>

                                                </v:ctr>

                                                <v:ctr name="McuCore6Configuration" type="IDENTIFIABLE">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This container contains the configuration for the Cortex-A53 CORE 2 cluster 1 within Partition 1. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="UUID" value="ECUC:51f54220-8b81-4cc9-9c2d-346e19b4568d"/>
                                                    <a:a name="VISIBLE" type="XPath">
                                                        <a:tst expr="contains(ecu:get('MCU.MC_ME.Partition1.Cores.List'),'CORE_6')" />
                                                    </a:a>

                                                    <v:var name="McuCoreUnderMcuControl" type="BOOLEAN">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Set this to TRUE if Cortex-A53 CORE 2 cluster 1 is under MCU control.<br />
                                                                    If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN1_CORE2 and PRST1_0).<br />
                                                                    Note: Implementation Specific Parameter.<br />
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="LABEL" value="Cortex-A53 CORE 2 cluster 1 Under MCU Control"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:56612e64-574d-4935-2a5f-23b843c26b54"/>
                                                        <a:da name="DEFAULT" value="true"/>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (contains(ecu:get('MCU.MC_ME.Partition1.Cores.List'),'CORE_6')) and
                                                                    (node:fallback(., 'false') = 'true') and
                                                                    (node:fallback(../../McuPartitionUnderMcuControl, 'true') = 'false')
                                                                )"
                                                                true="The field McuPartition1Config/McuPartitionUnderMcuControl must be set to 'true' when Cortex-A53 CORE 2 cluster 1 is under MCU control."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuCoreClockEnable" type="BOOLEAN">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_ME_PRTN1_CORE2_PCONF[CCE] register field.<br />
                                                                    This bit is reserved. To enable Cortex-A53 CORE 2 cluster 1 please configure McuCore2Configuration/McuCoreClockEnable. <br />
                                                                    <strong>Warning:</strong> When disabling the core clock, the driver
                                                                    will busy-wait until the corresponding MC_ME_PRTN1_CORE2_STAT[WFI]
                                                                    flag is set. This means that the core to be shutdown must always
                                                                    execute an WFI as its last instruction. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="Cortex-A53 CORE 2 cluster 1 Core Clock Enable"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:a68ea507-3ee9-4cba-8a04-d0e9c54e657a"/>
                                                        <a:da name="DEFAULT" value="false"/>
                                                        <a:da name="READONLY" value="true"/>
                                                    </v:var>

                                                    <v:var name="McuCoreResetEnable" type="BOOLEAN">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_RGM_PRST1_0[PERIPH_71_RST] register field.<br />
                                                                    This bit controls whether the Cortex-A53 CORE 2 cluster 1 reset is asserted or deasserted. <br />
                                                                    0 - Cortex-A53 CORE 2 cluster 1 Core Reset is Deasserted. <br />
                                                                    1 - Cortex-A53 CORE 2 cluster 1 Core Reset is Asserted. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="Cortex-A53 CORE 2 cluster 1 Core Reset Enable"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:6c8ae507-338e-4c1a-8e94-76acbadfd1c5"/>
                                                        <a:da name="DEFAULT" value="true"/>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (contains(ecu:get('MCU.MC_ME.Partition1.Cores.List'),'CORE_6')) and
                                                                    (node:fallback(., 'false') = 'false') and
                                                                    (node:fallback(../../McuPartitionResetEnable, 'true') = 'true')
                                                                )"
                                                                true="The reset signal to partition 1 must be deasserted first in order to deassert the reset signal of the Cortex-A53 CORE 2 cluster 1 within the partition (i.e. McuPartition1Config/McuPartitionResetEnable = 'false')."/>
                                                            <a:tst expr="
                                                                (
                                                                    (contains(ecu:get('MCU.MC_ME.Partition1.Cores.List'),'CORE_6')) and
                                                                    (node:fallback(., 'false') = 'false') and
                                                                    (node:fallback(../../McuCore2Configuration/McuCoreClockEnable, 'false') = 'false')
                                                                )"
                                                                true="The clock of the Cortex-A53 CORE 2 cluster 1 must be enabled first in order to deassert its reset signal (i.e. McuCore2Configuration/McuCoreClockEnable = 'true')."/>
                                                            <a:tst expr="
                                                                (
                                                                    (contains(ecu:get('MCU.MC_ME.Partition1.Cores.List'),'CORE_6')) and
                                                                    (node:fallback(., 'false') = 'true') and
                                                                    (node:fallback(../../McuCore2Configuration/McuCoreClockEnable, 'false') = 'true')
                                                                )"
                                                                true="The clock of the Cortex-A53 CORE 2 cluster 1 must be disabled first in order to assert its reset signal (i.e. McuCore2Configuration/McuCoreClockEnable = 'false')."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuCoreBootAddress" type="INTEGER">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_ME_PRTN1_CORE2_ADDR[ADDR] register field.<br />
                                                                    This register controls the boot address of the Cortex-A53 CORE 2 cluster 1. <br />
                                                                    The value from this field will be masked with 0xFFFFFFFC (i.e.
                                                                    the boot address must be aligned on a 4-byte boundary). <br />
                                                                    This field is modifiable only when the corresponding Cortex-A53 CORE 2 cluster 1
                                                                    clock is enabled and McuCoreControlConfiguration/McuCoreBootAddressControl
                                                                    is 'true'. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="Cortex-A53 CORE 2 cluster 1 Boot Address"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:cae5f6a4-fd9e-de7a-81db-a0e729a6ccd0"/>
                                                        <a:da name="DEFAULT" value="0"/>
                                                        <a:a name="INVALID" type="Range">
                                                            <a:tst expr="&lt;=4294967292"/>
                                                            <a:tst expr="&gt;=0"/>
                                                        </a:a>
                                                        <a:a name="EDITABLE" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(../McuCoreClockEnable, 'false') = 'true') and
                                                                    (node:fallback(as:modconf('Mcu')[1]/McuCoreControlConfiguration/McuCoreBootAddressControl, 'false') = 'true')
                                                                )"/>
                                                        </a:a>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="(node:fallback(., 4294967292) mod 4) != 0" true="The boot address must be aligned on a 4-byte boundary."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuCoreBootAddressLinkerSym" type="STRING">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_ME_PRTN1_CORE2_ADDR[ADDR] register field.<br />
                                                                    This register controls the boot address of the Cortex-A53 CORE 2 cluster 1. <br />
                                                                    The value from this field will be masked with 0xFFFFFFFC (i.e.
                                                                    the boot address must be aligned on a 4-byte boundary). <br />
                                                                    This field is modifiable only when the corresponding Cortex-A53 CORE 2 cluster 1
                                                                    clock is enabled and McuCoreControlConfiguration/McuCoreBootAddressControl
                                                                    is 'true'. <br />
                                                                    <strong>Note:</strong> If this parameter is empty, then the boot address
                                                                    (integer value) defined by 'McuCoreBootAddress' will be used. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="Cortex-A53 CORE 2 cluster 1 Boot Address Linker Symbol"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:5177f367-2481-4677-b488-51c3e643d797"/>
                                                        <a:da name="DEFAULT" value=""/>
                                                        <a:a name="EDITABLE" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(../McuCoreClockEnable, 'false') = 'true') and
                                                                    (node:fallback(as:modconf('Mcu')[1]/McuCoreControlConfiguration/McuCoreBootAddressControl, 'false') = 'true')
                                                                )"/>
                                                        </a:a>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="( node:empty(.) or (text:match(normalize-space(.),'^[_a-zA-Z]+[_0-9a-zA-Z]*$')) )"
                                                               false="Invalid identifier. The field must specify a valid C identifier (i.e. an arbitrarily long sequence of digits, underscores, lowercase and uppercase Latin letters, that must begin with a non-digit character)."/>
                                                        </a:da>
                                                    </v:var>

                                                </v:ctr>

                                                <v:ctr name="McuCore7Configuration" type="IDENTIFIABLE">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This container contains the configuration for the Cortex-A53 CORE 3 cluster 1 within Partition 1. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="UUID" value="ECUC:53b27820-8b81-4cc9-9c2d-346e19b4658d"/>
                                                    <a:a name="VISIBLE" type="XPath">
                                                        <a:tst expr="contains(ecu:get('MCU.MC_ME.Partition1.Cores.List'),'CORE_7')" />
                                                    </a:a>

                                                    <v:var name="McuCoreUnderMcuControl" type="BOOLEAN">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Set this to TRUE if Cortex-A53 CORE 3 cluster 1 is under MCU control.<br />
                                                                    If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN1_CORE3 and PRST1_0).<br />
                                                                    Note: Implementation Specific Parameter.<br />
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="LABEL" value="Cortex-A53 CORE 3 cluster 1 Under MCU Control"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:56612924-574d-4935-bb5f-23b8438a6b54"/>
                                                        <a:da name="DEFAULT" value="true"/>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (contains(ecu:get('MCU.MC_ME.Partition1.Cores.List'),'CORE_7')) and
                                                                    (node:fallback(., 'false') = 'true') and
                                                                    (node:fallback(../../McuPartitionUnderMcuControl, 'true') = 'false')
                                                                )"
                                                                true="The field McuPartition1Config/McuPartitionUnderMcuControl must be set to 'true' when Cortex-A53 CORE 3 cluster 1 is under MCU control."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuCoreClockEnable" type="BOOLEAN">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_ME_PRTN1_CORE3_PCONF[CCE] register field.<br />
                                                                    This bit is reserved. To enable Cortex-A53 CORE 3 cluster 1 please configure McuCore1Configuration/McuCoreClockEnable. <br />
                                                                    <strong>Warning:</strong> When disabling the core clock, the driver
                                                                    will busy-wait until the corresponding MC_ME_PRTN1_CORE3_STAT[WFI]
                                                                    flag is set. This means that the core to be shutdown must always
                                                                    execute an WFI as its last instruction. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="Cortex-A53 CORE 3 cluster 1 Core Clock Enable"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:a68ea51b-2fe9-4cba-23a4-c4359d7faeba"/>
                                                        <a:da name="DEFAULT" value="false"/>
                                                        <a:da name="READONLY" value="true"/>
                                                    </v:var>

                                                    <v:var name="McuCoreResetEnable" type="BOOLEAN">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_RGM_PRST1_0[PERIPH_72_RST] register field.<br />
                                                                    This bit controls whether the Cortex-A53 CORE 3 cluster 1 reset is asserted or deasserted. <br />
                                                                    0 - Cortex-A53 CORE 3 cluster 1 Core Reset is Deasserted. <br />
                                                                    1 - Cortex-A53 CORE 3 cluster 1 Core Reset is Asserted. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="Cortex-A53 CORE 3 cluster 1 Core Reset Enable"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:a18ae507-338e-4c1a-8e94-76acbadfd1c5"/>
                                                        <a:da name="DEFAULT" value="true"/>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (contains(ecu:get('MCU.MC_ME.Partition1.Cores.List'),'CORE_7')) and
                                                                    (node:fallback(., 'false') = 'false') and
                                                                    (node:fallback(../../McuPartitionResetEnable, 'true') = 'true')
                                                                )"
                                                                true="The reset signal to partition 1 must be deasserted first in order to deassert the reset signal of the Cortex-A53 CORE 3 cluster 1 within the partition (i.e. McuPartition1Config/McuPartitionResetEnable = 'false')."/>
                                                            <a:tst expr="
                                                                (
                                                                    (contains(ecu:get('MCU.MC_ME.Partition1.Cores.List'),'CORE_7')) and
                                                                    (node:fallback(., 'false') = 'false') and
                                                                    (node:fallback(../../McuCore2Configuration/McuCoreClockEnable, 'false') = 'false')
                                                                )"
                                                                true="The clock of the Cortex-A53 CORE 3 cluster 1 must be enabled first in order to deassert its reset signal (i.e. McuCore2Configuration/McuCoreClockEnable = 'true')."/>
                                                            <a:tst expr="
                                                                (
                                                                    (contains(ecu:get('MCU.MC_ME.Partition1.Cores.List'),'CORE_7')) and
                                                                    (node:fallback(., 'false') = 'true') and
                                                                    (node:fallback(../../McuCore2Configuration/McuCoreClockEnable, 'false') = 'true')
                                                                )"
                                                                true="The clock of the Cortex-A53 CORE 3 cluster 1 must be disabled first in order to assert its reset signal (i.e. McuCore2Configuration/McuCoreClockEnable = 'false')."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuCoreBootAddress" type="INTEGER">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_ME_PRTN1_CORE3_ADDR[ADDR] register field.<br />
                                                                    This register controls the boot address of the Cortex-A53 CORE 3 cluster 1. <br />
                                                                    The value from this field will be masked with 0xFFFFFFFC (i.e.
                                                                    the boot address must be aligned on a 4-byte boundary). <br />
                                                                    This field is modifiable only when the corresponding Cortex-A53 CORE 3 cluster 1
                                                                    clock is enabled and McuCoreControlConfiguration/McuCoreBootAddressControl
                                                                    is 'true'. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="Cortex-A53 CORE 3 cluster 1 Boot Address"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:cae5f6a4-fd9e-107a-7adb-b3e7efbbc3e0"/>
                                                        <a:da name="DEFAULT" value="0"/>
                                                        <a:a name="INVALID" type="Range">
                                                            <a:tst expr="&lt;=4294967292"/>
                                                            <a:tst expr="&gt;=0"/>
                                                        </a:a>
                                                        <a:a name="EDITABLE" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(../McuCoreClockEnable, 'false') = 'true') and
                                                                    (node:fallback(as:modconf('Mcu')[1]/McuCoreControlConfiguration/McuCoreBootAddressControl, 'false') = 'true')
                                                                )"/>
                                                        </a:a>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="(node:fallback(., 4294967292) mod 4) != 0" true="The boot address must be aligned on a 4-byte boundary."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuCoreBootAddressLinkerSym" type="STRING">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_ME_PRTN1_CORE3_ADDR[ADDR] register field.<br />
                                                                    This register controls the boot address of the Cortex-A53 CORE 3 cluster 1. <br />
                                                                    The value from this field will be masked with 0xFFFFFFFC (i.e.
                                                                    the boot address must be aligned on a 4-byte boundary). <br />
                                                                    This field is modifiable only when the corresponding Cortex-A53 CORE 3 cluster 1
                                                                    clock is enabled and McuCoreControlConfiguration/McuCoreBootAddressControl
                                                                    is 'true'. <br />
                                                                    <strong>Note:</strong> If this parameter is empty, then the boot address
                                                                    (integer value) defined by 'McuCoreBootAddress' will be used. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="Cortex-A53 CORE 3 cluster 1 Boot Address Linker Symbol"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:516bf367-2481-4677-b488-54a3e6acd897"/>
                                                        <a:da name="DEFAULT" value=""/>
                                                        <a:a name="EDITABLE" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(../McuCoreClockEnable, 'false') = 'true') and
                                                                    (node:fallback(as:modconf('Mcu')[1]/McuCoreControlConfiguration/McuCoreBootAddressControl, 'false') = 'true')
                                                                )"/>
                                                        </a:a>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="( node:empty(.) or (text:match(normalize-space(.),'^[_a-zA-Z]+[_0-9a-zA-Z]*$')) )"
                                                               false="Invalid identifier. The field must specify a valid C identifier (i.e. an arbitrarily long sequence of digits, underscores, lowercase and uppercase Latin letters, that must begin with a non-digit character)."/>
                                                        </a:da>
                                                    </v:var>
                                                </v:ctr>

                                            </v:ctr>

                                            <v:ctr name="McuPartition2Config" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container contains the configuration for Partition 2.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuPartition2Config"/>
                                                <a:a name="UUID" value="ECUC:6d9c7fc7-452a-4168-af62-3f05f950e135"/>
                                                <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.Partitions.List'),'Partition2')" />
                                                </a:a>

                                                <v:var name="McuPartitionUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if Partition 2 is under MCU control.<br />
                                                                If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN2 or PRST2). <br />
                                                                Note: Implementation Specific Parameter.<br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="Partition2 Under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:56613a64-57c3-4935-b14f-32d841f15b54"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuPartitionPowerUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if Partition 2 Power Management is under MCU control. <br />
                                                                If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN2_PCONF or
                                                                PRST2_0[PERIPH_128_RST] or RDC2). <br />
                                                                This means that the settings configured by nodes "McuPartitionClockEnable" and "McuPartitionResetEnable"
                                                                will be left untouched (i.e. the configuration will not have any effect in hardware). <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="Partition2 Power Management Under MCU Control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:32613a64-57c3-4935-bb5f-23d235c63c52"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../McuPartitionUnderMcuControl, 'true') = 'false')
                                                            )"
                                                            true="The field McuPartition2Config/McuPartitionUnderMcuControl must be set to 'true' when Partition 2's power management is under MCU control."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPrtnCofb0UnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if PRTN2_COFB0 is under MCU control.<br />
                                                                If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN2_COFB0). <br />
                                                                This means that all the peripherals under the 'McuPeripheral' list prefixed by 'PRTN2_COFB0'
                                                                will be left untouched (i.e. the configuration will not have any effect in hardware). <br />
                                                                Note: Implementation Specific Parameter.<br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PRTN2_COFB0 Under MCU Control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:69613a64-57c3-4935-bb5f-23b836c36b54"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../McuPartitionUnderMcuControl, 'true') = 'false')
                                                            )"
                                                            true="The field McuPartition2Config/McuPartitionUnderMcuControl must be set to 'true' when PRTN2_COFB0 is under MCU control."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPrstCofb0UnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if PRST2_0 is under MCU control.<br />
                                                                If it is FALSE, then the MCU driver will not write the corresponding registers (PRST2_0). <br />
                                                                This means that all the peripherals under the 'McuPeripheral' list prefixed by 'PRST2_COFB0'
                                                                will be left untouched (i.e. the configuration will not have any effect in hardware). <br />
                                                                Note: Implementation Specific Parameter.<br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PRST2_0 Under MCU Control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:56614c64-57c3-4935-bb5f-23b415d63b54"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../McuPartitionUnderMcuControl, 'true') = 'false')
                                                            )"
                                                            true="The field McuPartition2Config/McuPartitionUnderMcuControl must be set to 'true' when PRST2_0 is under MCU control."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPartitionClockEnable" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Configures the MC_ME_PRTN2_PCONF[PCE] register field. <br />
                                                                This bit controls whether the clock to IPs (other than core(s)) in the partition are enabled or disabled. <br />
                                                                0b - Disable the clock to IPs. <br />
                                                                1b - Enable the clock to IPs. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Partition2 Clock Enable"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:a68ae507-8e89-4c1a-8e04-35b9cac34548"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'true') = 'true') and
                                                                (node:fallback(../McuPartitionResetEnable, 'true') = 'true')
                                                            )"
                                                            true="The Partition Reset must be disable in order to enable clock partition (i.e. McuPartition2Config/McuPartitionResetEnable = 'false')."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPartitionResetEnable" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Configures the MC_RGM_PRST2_0[PERIPH_128_RST] and RDC2_CTRL_REG[INTERCONNECT_INTERFACE_DISABLE] register fields. <br />
                                                                This bit controls whether the reset signal to IPs (other than core(s)) in the partition is asserted or deasserted. <br />
                                                                0b - Deassert the reset signal to IPs.<br />
                                                                1b - Assert the reset signal to IPs.<br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Partition2 Reset Enable"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:a68ae507-8e89-4c1a-8e04-3acc132dbf55"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'false') and
                                                                (node:fallback(../McuPartitionClockEnable, 'false') = 'false')
                                                            )"
                                                            true="The clock to the current partition must be enabled first in order to deassert its reset signal (i.e. McuPartition2Config/McuPartitionClockEnable = 'true')."/>
                                                    </a:da>
                                                </v:var>

                                            </v:ctr>

                                            <v:ctr name="McuPartition3Config" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container contains the configuration for Partition 3.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuPartition3Config"/>
                                                <a:a name="UUID" value="ECUC:6d197fc7-452a-4168-af62-4a05f950e135"/>
                                                <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.Partitions.List'),'Partition3')" />
                                                </a:a>

                                                <v:var name="McuPartitionUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if Partition 3 is under MCU control.<br />
                                                                If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN3 or PRST3). <br />
                                                                Note: Implementation Specific Parameter.<br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="Partition3 Under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:56613a64-57c3-4935-bb5f-32d82df15b54"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuPartitionPowerUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if Partition 3 Power Management is under MCU control. <br />
                                                                If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN3_PCONF or
                                                                PRST3_0[PERIPH_192_RST] or RDC3). <br />
                                                                This means that the settings configured by nodes "McuPartitionClockEnable" and "McuPartitionResetEnable"
                                                                will be left untouched (i.e. the configuration will not have any effect in hardware). <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="Partition3 Power Management Under MCU Control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:32613a64-57c3-4935-bb5f-23d235e68b51"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../McuPartitionUnderMcuControl, 'true') = 'false')
                                                            )"
                                                            true="The field McuPartition3Config/McuPartitionUnderMcuControl must be set to 'true' when Partition 3's power management is under MCU control."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPrtnCofb0UnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if PRTN3_COFB0 is under MCU control.<br />
                                                                If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN3_COFB0). <br />
                                                                This means that all the peripherals under the 'McuPeripheral' list prefixed by 'PRTN3_COFB0'
                                                                will be left untouched (i.e. the configuration will not have any effect in hardware). <br />
                                                                Note: Implementation Specific Parameter.<br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PRTN3_COFB0 Under MCU Control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:56613a64-57c3-4935-bb5f-23b836c36b54"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../McuPartitionUnderMcuControl, 'true') = 'false')
                                                            )"
                                                            true="The field McuPartition3Config/McuPartitionUnderMcuControl must be set to 'true' when PRTN3_COFB0 is under MCU control."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPrstCofb0UnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if PRST3_0 is under MCU control.<br />
                                                                If it is FALSE, then the MCU driver will not write the corresponding registers (PRST3_0). <br />
                                                                This means that all the peripherals under the 'McuPeripheral' list prefixed by 'PRST3_COFB0'
                                                                will be left untouched (i.e. the configuration will not have any effect in hardware). <br />
                                                                Note: Implementation Specific Parameter.<br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PRST3_0 Under MCU Control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:56613a64-57c3-4935-bb5f-23b415d63b54"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../McuPartitionUnderMcuControl, 'true') = 'false')
                                                            )"
                                                            true="The field McuPartition3Config/McuPartitionUnderMcuControl must be set to 'true' when PRST3_0 is under MCU control."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPartitionClockEnable" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Configures the MC_ME_PRTN3_PCONF[PCE] register field. <br />
                                                                This bit controls whether the clock to IPs (other than core(s)) in the partition are enabled or disabled.
                                                                0b - Disable the clock to IPs. <br />
                                                                1b - Enable the clock to IPs. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Partition3 Clock Enable"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:a686b507-8e89-4c1a-8e04-35b9cac34438"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'true') = 'true') and
                                                                (node:fallback(../McuPartitionResetEnable, 'true') = 'true')
                                                            )"
                                                            true="The Partition Reset must be disable in order to enable clock partition (i.e. McuPartition3Config/McuPartitionResetEnable = 'false')."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPartitionResetEnable" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Configures the MC_RGM_PRST3_0[PERIPH_192_RST] and RDC3_CTRL_REG[INTERCONNECT_INTERFACE_DISABLE] register fields. <br />
                                                                This bit controls whether the reset signal to IPs (other than core(s)) in the partition is asserted or deasserted. <br />
                                                                0b - Deassert the reset signal to IPs.<br />
                                                                1b - Assert the reset signal to IPs.<br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Partition3 Reset Enable"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:a68ae507-8e89-4c1a-8e04-3a54151bcf55"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'false') and
                                                                (node:fallback(../McuPartitionClockEnable, 'false') = 'false')
                                                            )"
                                                            true="The clock to the current partition must be enabled first in order to deassert its reset signal (i.e. McuPartition3Config/McuPartitionClockEnable = 'true')."/>
                                                    </a:da>
                                                </v:var>

                                            </v:ctr>

                                            <v:ctr name="McuPartition4Config" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container contains the configuration for Partition 4.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuPartition4Config"/>
                                                <a:a name="UUID" value="ECUC:6d8c7fc7-452a-4168-af62-3f05f950e135"/>
                                                <a:da name="READONLY" value="true"/>
                                                <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.Partitions.List'),'Partition4')" />
                                                </a:a>

                                                <v:var name="McuPartitionUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if Partition 4 is under MCU control.<br />
                                                                If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN4 or PRST4). <br />
                                                                Note: Implementation Specific Parameter.<br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="Partition4 Under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:56613a64-57c3-1f35-bb5f-32d841f15b54"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:da name="READONLY" value="true"/>
                                                </v:var>

                                                <v:var name="McuPartitionPowerUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if Partition 4 Power Management is under MCU control. <br />
                                                                If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN4_PCONF or
                                                                PRST4_0[PERIPH_256_RST] or RDC4). <br />
                                                                This means that the settings configured by nodes "McuPartitionClockEnable" and "McuPartitionResetEnable"
                                                                will be left untouched (i.e. the configuration will not have any effect in hardware). <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="Partition4 Power Management Under MCU Control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:32613a64-57c3-4935-bb5f-23d325c46b51"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../McuPartitionUnderMcuControl, 'true') = 'false')
                                                            )"
                                                            true="The field McuPartition4Config/McuPartitionUnderMcuControl must be set to 'true' when Partition 4's power management is under MCU control."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPartitionClockEnable" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Configures the MC_ME_PRTN4_PCONF[PCE] register field. <br />
                                                                This bit controls whether the clock to IPs (other than core(s)) in the partition are enabled or disabled.
                                                                0b - Disable the clock to IPs. <br />
                                                                1b - Enable the clock to IPs. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Partition4 Clock Enable"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:a65ce507-8e89-4c1a-8e04-35b9cac34438"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:da name="READONLY" value="true"/>
                                                </v:var>

                                                <v:var name="McuPartitionResetEnable" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Configures the MC_RGM_PRST4_0[PERIPH_256_RST] and RDC4_CTRL_REG[INTERCONNECT_INTERFACE_DISABLE] register fields. <br />
                                                                This bit controls whether the reset signal to IPs (other than core(s)) in the partition is asserted or deasserted. <br />
                                                                0b - Deassert the reset signal to IPs.<br />
                                                                1b - Assert the reset signal to IPs.<br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Partition4 Reset Enable"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:a68ae507-8e89-4c1a-8e04-3a52314dfc22"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'false') and
                                                                (node:fallback(../McuPartitionClockEnable, 'false') = 'false')
                                                            )"
                                                            true="The clock to the current partition must be enabled first in order to deassert its reset signal (i.e. McuPartition4Config/McuPartitionClockEnable = 'true')."/>
                                                    </a:da>
                                                </v:var>

                                            </v:ctr>

                                            <v:ctr name="McuPartition5Config" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container contains the configuration for Partition 5.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuPartition5Config"/>
                                                <a:a name="UUID" value="ECUC:6d6c7fc7-452a-4168-af62-3f05f950e135"/>
                                                <a:da name="READONLY" value="true"/>
                                                <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.Partitions.List'),'Partition5')" />
                                                </a:a>

                                                <v:var name="McuPartitionUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if Partition 5 is under MCU control.<br />
                                                                If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN5 or PRST5). <br />
                                                                Note: Implementation Specific Parameter.<br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="Partition5 Under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:56613a64-57c3-4935-b8af-32d841f15b54"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:da name="READONLY" value="true"/>
                                                </v:var>

                                                <v:var name="McuPartitionPowerUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if Partition 5 Power Management is under MCU control. <br />
                                                                If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN5_PCONF or
                                                                PRST5_0[PERIPH_320_RST] or RDC5). <br />
                                                                This means that the settings configured by nodes "McuPartitionClockEnable" and "McuPartitionResetEnable"
                                                                will be left untouched (i.e. the configuration will not have any effect in hardware). <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="Partition5 Power Management Under MCU Control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:32613a64-57c3-4935-bb5f-25d325a41e41"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../McuPartitionUnderMcuControl, 'true') = 'false')
                                                            )"
                                                            true="The field McuPartition5Config/McuPartitionUnderMcuControl must be set to 'true' when Partition 5's power management is under MCU control."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPartitionClockEnable" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Configures the MC_ME_PRTN5_PCONF[PCE] register field. <br />
                                                                This bit controls whether the clock to IPs (other than core(s)) in the partition are enabled or disabled.
                                                                0b - Disable the clock to IPs. <br />
                                                                1b - Enable the clock to IPs. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Partition5 Clock Enable"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:a68ae507-5589-4c1a-8e04-35b9cac34438"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:da name="READONLY" value="true"/>
                                                </v:var>

                                                <v:var name="McuPartitionResetEnable" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Configures the MC_RGM_PRST5_0[PERIPH_320_RST] and RDC5_CTRL_REG[INTERCONNECT_INTERFACE_DISABLE] register fields. <br />
                                                                This bit controls whether the reset signal to IPs (other than core(s)) in the partition is asserted or deasserted. <br />
                                                                0b - Deassert the reset signal to IPs.<br />
                                                                1b - Assert the reset signal to IPs.<br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Partition5 Reset Enable"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:a68ae507-8e89-4c1a-8e04-37a3214dfc15"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'false') and
                                                                (node:fallback(../McuPartitionClockEnable, 'false') = 'false')
                                                            )"
                                                            true="The clock to the current partition must be enabled first in order to deassert its reset signal (i.e. McuPartition5Config/McuPartitionClockEnable = 'true')."/>
                                                    </a:da>
                                                </v:var>

                                            </v:ctr>

                                            <v:ctr name="McuPartition6Config" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container contains the configuration for Partition 6.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuPartition6Config"/>
                                                <a:a name="UUID" value="ECUC:6d133fc7-452a-4168-af62-3f05f950e135"/>
                                                <a:da name="READONLY" value="true"/>
                                                <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.Partitions.List'),'Partition6')" />
                                                </a:a>

                                                <v:var name="McuPartitionUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if Partition 6 is under MCU control.<br />
                                                                If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN6 or PRST6). <br />
                                                                Note: Implementation Specific Parameter.<br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="Partition6 Under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:56613a64-57c3-1335-bb5f-11d841f15b54"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:da name="READONLY" value="true"/>
                                                </v:var>

                                                <v:var name="McuPartitionPowerUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if Partition 6 Power Management is under MCU control. <br />
                                                                If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN6_PCONF or
                                                                PRST6_0[PERIPH_384_RST] or RDC6). <br />
                                                                This means that the settings configured by nodes "McuPartitionClockEnable" and "McuPartitionResetEnable"
                                                                will be left untouched (i.e. the configuration will not have any effect in hardware). <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="Partition6 Power Management Under MCU Control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:32613a64-57c3-4935-bb5f-25d314b28e41"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../McuPartitionUnderMcuControl, 'true') = 'false')
                                                            )"
                                                            true="The field McuPartition6Config/McuPartitionUnderMcuControl must be set to 'true' when Partition 6's power management is under MCU control."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPartitionClockEnable" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Configures the MC_ME_PRTN6_PCONF[PCE] register field. <br />
                                                                This bit controls whether the clock to IPs (other than core(s)) in the partition should be enabled or disabled.
                                                                0b - Disable the clock to IPs. <br />
                                                                1b - Enable the clock to IPs. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Partition6 Clock Enable"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:f18ae507-8e89-4c1a-8e04-35b9cac34438"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:da name="READONLY" value="true"/>
                                                </v:var>

                                                <v:var name="McuPartitionResetEnable" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Configures the MC_RGM_PRST6_0[PERIPH_384_RST] and RDC6_CTRL_REG[INTERCONNECT_INTERFACE_DISABLE] register fields. <br />
                                                                This bit controls whether the reset signal to IPs (other than core(s)) in the partition is asserted or deasserted. <br />
                                                                0b - Deassert the reset signal to IPs.<br />
                                                                1b - Assert the reset signal to IPs.<br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Partition6 Reset Enable"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:a68ae507-8e89-4c1a-8e04-35e3124dfc33"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'false') and
                                                                (node:fallback(../McuPartitionClockEnable, 'false') = 'false')
                                                            )"
                                                            true="The clock to the current partition must be enabled first in order to deassert its reset signal (i.e. McuPartition6Config/McuPartitionClockEnable = 'true')."/>
                                                    </a:da>
                                                </v:var>

                                            </v:ctr>

                                            <v:ctr name="McuPartition7Config" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container contains the configuration for Partition 7.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuPartition7Config"/>
                                                <a:a name="UUID" value="ECUC:6d197fc7-452a-4168-af62-3ff4f950e135"/>
                                                <a:da name="READONLY" value="true"/>
                                                <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.Partitions.List'),'Partition7')" />
                                                </a:a>

                                                <v:var name="McuPartitionUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if Partition 7 is under MCU control.<br />
                                                                If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN7 or PRST7). <br />
                                                                Note: Implementation Specific Parameter.<br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="Partition7 Under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:56613a64-5993-4935-bb5f-32d841f15b54"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:da name="READONLY" value="true"/>
                                                </v:var>

                                                <v:var name="McuPartitionPowerUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if Partition 7 Power Management is under MCU control. <br />
                                                                If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN7_PCONF or
                                                                PRST7_0[PERIPH_448_RST] or RDC7). <br />
                                                                This means that the settings configured by nodes "McuPartitionClockEnable" and "McuPartitionResetEnable"
                                                                will be left untouched (i.e. the configuration will not have any effect in hardware). <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="Partition7 Power Management Under MCU Control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:32613a64-57c3-4935-bb5f-25d335c19f41"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../McuPartitionUnderMcuControl, 'true') = 'false')
                                                            )"
                                                            true="The field McuPartition7Config/McuPartitionUnderMcuControl must be set to 'true' when Partition 7's power management is under MCU control."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPartitionClockEnable" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Configures the MC_ME_PRTN7_PCONF[PCE] register field. <br />
                                                                This bit controls whether the clock to IPs (other than core(s)) in the partition are enabled or disabled.
                                                                0b - Disable the clock to IPs. <br />
                                                                1b - Enable the clock to IPs. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Partition7 Clock Enable"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:a6813507-8e89-4c1a-8e04-35b9cac34438"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:da name="READONLY" value="true"/>
                                                </v:var>

                                                <v:var name="McuPartitionResetEnable" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Configures the MC_RGM_PRST7_0[PERIPH_448_RST] and RDC7_CTRL_REG[INTERCONNECT_INTERFACE_DISABLE] register fields. <br />
                                                                This bit controls whether the reset signal to IPs (other than core(s)) in the partition is asserted or deasserted. <br />
                                                                0b - Deassert the reset signal to IPs.<br />
                                                                1b - Assert the reset signal to IPs.<br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Partition7 Reset Enable"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:a68ae507-8e89-4c1a-8e04-35a3214fdc33"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'false') and
                                                                (node:fallback(../McuPartitionClockEnable, 'false') = 'false')
                                                            )"
                                                            true="The clock to the current partition must be enabled first in order to deassert its reset signal (i.e. McuPartition7Config/McuPartitionClockEnable = 'true')."/>
                                                    </a:da>
                                                </v:var>

                                            </v:ctr>

                                            <v:lst name="McuPeripheral" type="MAP">
                                                <a:da name="MIN" type="XPath" expr="num:i(count(ecu:list('MCU.Peripherals.List')))"/>
                                                <a:da name="INVALID" type="XPath">
                                                    <a:tst expr="num:i(count(./*)) &gt; num:i(count(ecu:list('MCU.Peripherals.List')))"
                                                        true="The number of McuPeripherals exceeds the maximum allowed."/>
                                                </a:da>

                                                <v:ctr name="McuPeripheral" type="IDENTIFIABLE">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This contains the power state configuration for the current peripheral.<br />
                                                                Note: Implementation Specific Container.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="TAB" value="McuPeripheral"/>
                                                    <a:a name="UUID" value="ECUC:0983ec47-86a6-4940-ae8d-5cf0e543929b"/>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS"  type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v mclass="PreCompile">VariantPostBuild</icc:v>
                                                        <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                                                    </a:a>

                                                    <v:var name="McuPeripheralName" type="ENUMERATION">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    This is the name of the peripheral. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="LABEL" value="Peripheral Name"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="false"/>
                                                        <a:a name="UUID" value="ECUC:0fef779b-bf2c-5e91-9110-5f848d8e3e16"/>
                                                        <a:da name="DEFAULT" type="XPath" expr="ecu:list('MCU.Peripherals.List')[num:i(node:fallback(node:current()/../@index, num:i(0)) + 1)]"/>
                                                        <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.Peripherals.List')"/>
                                                        <a:da name="READONLY" value="true"/>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="(
                                                                            (text:contains(node:fallback(., ecu:get('MCU.Peripherals.Default')),'NONE')) or
                                                                            (text:uniq(node:fallback(../../*/McuPeripheralName, ecu:list('MCU.Peripherals.List')), node:fallback(., ecu:get('MCU.Peripherals.Default'))))
                                                                        )"
                                                                   false="Duplicated value, McuPeripheralName must be unique across McuPeripheral."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuModeEntrySlot" type="ENUMERATION">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    This is the MC_ME slot corresponding to the peripheral. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="LABEL" value="MC_ME Slot"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="false"/>
                                                        <a:a name="UUID" value="ECUC:0fef779b-bf2c-466a-9110-5f848d8e3e16"/>
                                                        <a:da name="DEFAULT" type="XPath" expr="ecu:list('MCU.MC_ME.Peripherals.Slots.List')[num:i(node:fallback(node:current()/../@index, num:i(0)) + 1)]"/>
                                                        <!-- Return a unique list of possible values for RANGE. Duplicated values in RANGE will result in VSMD errors  -->
                                                        <a:da name="RANGE" type="XPath" expr="text:split(concat(text:replaceAll(text:join(ecu:list('MCU.MC_ME.Peripherals.Slots.List')), 'NONE', ''), ' NONE'))"/>
                                                        <a:da name="READONLY" value="true"/>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="(
                                                                            (text:contains(node:fallback(., ecu:get('MCU.MC_ME.Peripherals.Slots.Default')),'NONE')) or
                                                                            (text:uniq(node:fallback(../../*/McuModeEntrySlot, ecu:list('MCU.MC_ME.Peripherals.Slots.List')), node:fallback(., ecu:get('MCU.MC_ME.Peripherals.Slots.Default'))))
                                                                        )"
                                                                   false="Duplicated value, McuModeEntrySlot must be unique across McuPeripheral."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuResetGenerationSlot" type="ENUMERATION">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    This is the MC_RGM slot corresponding to the peripheral. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="LABEL" value="MC_RGM Slot"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="false"/>
                                                        <a:a name="UUID" value="ECUC:0fef779b-bf2c-466a-9110-5c317d8e3f16"/>
                                                        <a:da name="DEFAULT" type="XPath" expr="ecu:list('MCU.MC_RGM.Peripherals.Slots.List')[num:i(node:fallback(node:current()/../@index, num:i(0)) + 1)]"/>
                                                        <!-- Return a unique list of possible values for RANGE. Duplicated values in RANGE will result in VSMD errors -->
                                                        <a:da name="RANGE" type="XPath" expr="text:split(concat(text:replaceAll(text:join(ecu:list('MCU.MC_RGM.Peripherals.Slots.List')), 'NONE', ''), ' NONE'))"/>
                                                        <a:da name="READONLY" value="true"/>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="(
                                                                            (text:contains(node:fallback(., ecu:get('MCU.MC_RGM.Peripherals.Slots.Default')),'NONE')) or
                                                                            (text:uniq(node:fallback(../../*/McuResetGenerationSlot, ecu:list('MCU.MC_RGM.Peripherals.Slots.List')), node:fallback(., ecu:get('MCU.MC_RGM.Peripherals.Slots.Default'))))
                                                                        )"
                                                                   false="Duplicated value, McuModeEntrySlot must be unique across McuPeripheral."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuPeripheralClockEnable" type="BOOLEAN">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_ME_PRTNx_COFBx_CLKEN[REQx] register field. <br />
                                                                    0 - Peripheral Clock is Gated. <br />
                                                                    1 - Peripheral Clock is Running. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="Peripheral Clock Enable"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:898a2ef7-3fa9-4c1a-8a93-eeef17ba4a10"/>
                                                        <a:da name="DEFAULT" type="XPath">
                                                            <a:tst expr="
                                                            (
                                                                node:when(
                                                                    text:contains(node:fallback(../McuModeEntrySlot, ecu:get('MCU.MC_ME.Peripherals.Slots.Default')),'NONE'),
                                                                    false(),
                                                                    text:contains(ecu:list('MCU.MC_ME.Peripherals.DefaultClockEnabled.List'), node:fallback(../McuPeripheralName, 'NONE'))
                                                                )
                                                            )
                                                            "/>
                                                        </a:da>
                                                        <a:da name="EDITABLE" type="XPath">
                                                            <a:tst expr="not(text:contains(node:fallback(../McuModeEntrySlot, ecu:get('MCU.MC_ME.Peripherals.Slots.Default')),'NONE'))"/>
                                                        </a:da>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'false') = 'true') and
                                                                    (not(text:contains(node:fallback(../McuModeEntrySlot, ecu:get('MCU.MC_ME.Peripherals.Slots.Default')),'NONE'))) and
                                                                    (num:i(substring-after(node:fallback(../McuModeEntrySlot, 'PRTN0'), 'PRTN')) = num:i(0)) and
                                                                    (node:fallback(../../../McuPartition0Config/McuPartitionClockEnable, 'true') = 'false')
                                                                )"
                                                                true="The clock to partition 0 must be enabled first in order to enable the clock of any other IP within the partition (i.e. McuPartition0Config/McuPartitionClockEnable = 'true')."/>
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'false') = 'true') and
                                                                    (not(text:contains(node:fallback(../McuModeEntrySlot, ecu:get('MCU.MC_ME.Peripherals.Slots.Default')),'NONE'))) and
                                                                    (num:i(substring-after(node:fallback(../McuModeEntrySlot, 'PRTN0'), 'PRTN')) = num:i(1)) and
                                                                    (node:fallback(../../../McuPartition1Config/McuPartitionClockEnable, 'true') = 'false')
                                                                )"
                                                                true="The clock to partition 1 must be enabled first in order to enable the clock of any other IP within the partition (i.e. McuPartition1Config/McuPartitionClockEnable = 'true')."/>
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'false') = 'true') and
                                                                    (not(text:contains(node:fallback(../McuModeEntrySlot, ecu:get('MCU.MC_ME.Peripherals.Slots.Default')),'NONE'))) and
                                                                    (num:i(substring-after(node:fallback(../McuModeEntrySlot, 'PRTN0'), 'PRTN')) = num:i(2)) and
                                                                    (node:fallback(../../../McuPartition2Config/McuPartitionClockEnable, 'true') = 'false')
                                                                )"
                                                                true="The clock to partition 2 must be enabled first in order to enable the clock of any other IP within the partition (i.e. McuPartition2Config/McuPartitionClockEnable = 'true')."/>
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'false') = 'true') and
                                                                    (not(text:contains(node:fallback(../McuModeEntrySlot, ecu:get('MCU.MC_ME.Peripherals.Slots.Default')),'NONE'))) and
                                                                    (num:i(substring-after(node:fallback(../McuModeEntrySlot, 'PRTN0'), 'PRTN')) = num:i(3)) and
                                                                    (node:fallback(../../../McuPartition3Config/McuPartitionClockEnable, 'true') = 'false')
                                                                )"
                                                                true="The clock to partition 3 must be enabled first in order to enable the clock of any other IP within the partition (i.e. McuPartition3Config/McuPartitionClockEnable = 'true')."/>
                                                        </a:da>
                                                        <a:da name="WARNING" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'true') = 'false') and
                                                                    (node:fallback(../McuPeripheralName, 'TRGMUX') = 'MSCM') and
                                                                    (node:fallback(../../../McuPartition1Config/McuPartitionClockEnable, 'true') = 'true')
                                                                )"
                                                                true="In RTD's default implementation OsIf_GetCoreId is using MSCM, so if the peripheral is disabled then a HardFault will be entered at Mcu_SetMode call. OsIf_GetCoreId is used as part of the default implementation of the SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA and SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuPeripheralResetEnable" type="BOOLEAN">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_RGM_PRSTx_x[PERIPH_x_RST] register field. <br />
                                                                    0 - Peripheral Reset is Deasserted. <br />
                                                                    1 - Peripheral Reset is Asserted. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="Peripheral Reset Enable"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:898a2ef7-3fa9-4c1a-8a93-efee13bc4a10"/>
                                                        <a:da name="DEFAULT" type="XPath">
                                                            <a:tst expr="
                                                            (
                                                                node:when(
                                                                    text:contains(node:fallback(../McuResetGenerationSlot, ecu:get('MCU.MC_RGM.Peripherals.Slots.Default')),'NONE'),
                                                                    false(),
                                                                    not(text:contains(ecu:list('MCU.MC_RGM.Peripherals.DefaultResetDeasserted.List'), node:fallback(../McuPeripheralName, 'NONE')))
                                                                )
                                                            )
                                                            "/>
                                                        </a:da>
                                                        <a:da name="EDITABLE" type="XPath">
                                                            <a:tst expr="not((text:contains(node:fallback(../McuResetGenerationSlot, ecu:get('MCU.MC_RGM.Peripherals.Slots.Default')),'NONE')))"/>
                                                        </a:da>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'false') = 'false') and
                                                                    (not(text:contains(node:fallback(../McuResetGenerationSlot, ecu:get('MCU.MC_RGM.Peripherals.Slots.Default')),'NONE'))) and
                                                                    (num:i(substring-after(node:fallback(../McuResetGenerationSlot, 'PRST0'), 'PRST')) = num:i(0)) and
                                                                    (node:fallback(../../../McuPartition0Config/McuPartitionResetEnable, 'true') = 'true')
                                                                )"
                                                                true="The reset signal to partition 0 must be deasserted first in order to deassert the reset signal of any other IP within the partition (i.e. McuPartition0Config/McuPartitionResetEnable = 'false')."/>
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'false') = 'false') and
                                                                    (not(text:contains(node:fallback(../McuResetGenerationSlot, ecu:get('MCU.MC_RGM.Peripherals.Slots.Default')),'NONE'))) and
                                                                    (num:i(substring-after(node:fallback(../McuResetGenerationSlot, 'PRST0'), 'PRST')) = num:i(1)) and
                                                                    (node:fallback(../../../McuPartition1Config/McuPartitionResetEnable, 'true') = 'true')
                                                                )"
                                                                true="The reset signal to partition 1 must be deasserted first in order to deassert the reset signal of any other IP within the partition (i.e. McuPartition1Config/McuPartitionResetEnable = 'false')."/>
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'false') = 'false') and
                                                                    (not(text:contains(node:fallback(../McuResetGenerationSlot, ecu:get('MCU.MC_RGM.Peripherals.Slots.Default')),'NONE'))) and
                                                                    (num:i(substring-after(node:fallback(../McuResetGenerationSlot, 'PRST0'), 'PRST')) = num:i(2)) and
                                                                    (node:fallback(../../../McuPartition2Config/McuPartitionResetEnable, 'true') = 'true')
                                                                )"
                                                                true="The reset signal to partition 2 must be deasserted first in order to deassert the reset signal of any other IP within the partition (i.e. McuPartition2Config/McuPartitionResetEnable = 'false')."/>
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'false') = 'false') and
                                                                    (not(text:contains(node:fallback(../McuResetGenerationSlot, ecu:get('MCU.MC_RGM.Peripherals.Slots.Default')),'NONE'))) and
                                                                    (num:i(substring-after(node:fallback(../McuResetGenerationSlot, 'PRST0'), 'PRST')) = num:i(3)) and
                                                                    (node:fallback(../../../McuPartition3Config/McuPartitionResetEnable, 'true') = 'true')
                                                                )"
                                                                true="The reset signal to partition 3 must be deasserted first in order to deassert the reset signal of any other IP within the partition (i.e. McuPartition3Config/McuPartitionResetEnable = 'false')."/>
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'false') = 'false') and
                                                                    (not(text:contains(node:fallback(../McuResetGenerationSlot, ecu:get('MCU.MC_RGM.Peripherals.Slots.Default')),'NONE'))) and
                                                                    (node:fallback(../McuPeripheralClockEnable, 'false') = 'false')
                                                                )"
                                                                true="The clock to the current peripheral must be enabled first in order to deassert its reset signal (i.e. McuPeripheralClockEnable = 'true')."/>
                                                        </a:da>
                                                    </v:var>
                                                </v:ctr>
                                            </v:lst>

                                        </v:ctr>
                                    </v:ctr>
                                </v:lst>

                                <v:lst name="McuRamSectorSettingConf" type="MAP">
                                    <v:ctr name="McuRamSectorSettingConf" type="IDENTIFIABLE">
                                        <a:a name="DESC">
                                            <a:v>
                                                <![CDATA[EN:<html>
                                                    This container contains the configuration for the RAM Sector setting.
                                                </html>]]>
                                            </a:v>
                                        </a:a>
                                        <a:a name="UUID" value="ECUC:2ec4ce5f-1c38-47ec-b1c6-9d01a6589e0d"/>
                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                            <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                                            <icc:v mclass="PreCompile">VariantPostBuild</icc:v>
                                        </a:a>

                                        <v:var name="McuRamSectorId" type="INTEGER">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        This parameter shall represent the ID of the MCU RAM Sector configuration.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="LABEL" value="RAM Sector ID"/>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="true"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="false"/>
                                            <a:a name="UUID" value="ECUC:2e5b0f55-dce2-46d3-ac26-2b8fd1fd7772"/>
                                            <a:da name="DEFAULT" type="XPath" expr="node:fallback(node:current()/../@index, num:i(0))"/>
                                            <a:da name="RANGE" type="XPath">
                                                <a:tst expr="text:uniq(node:fallback(../../*/McuRamSectorId, text:split('1 2 3')), node:fallback(., 0))"
                                                    false="Duplicated value, McuRamSectorId ID must be unique across McuRamSectorSettingConf. Use the Calculate button to calculate correct default value."/>
                                                <a:tst expr="node:fallback(., 0) &lt; count(node:fallback(../../*, 1))"
                                                    false="Value out of range: must be in range 0 to N-1 (N is number of configured RAM Sector setting). Use the Calculate button to calculate correct default value."/>
                                            </a:da>
                                            <a:a name="INVALID" type="Range">
                                                <a:tst expr="&lt;=4294967295"/>
                                                <a:tst expr="&gt;=0"/>
                                            </a:a>
                                        </v:var>

                                        <!-- /** @implements McuRamDefaultValue_Object */ -->
                                        <v:var name="McuRamDefaultValue" type="INTEGER">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        This parameter shall represent the Data pre-setting to be initialized.
                                                        Default value is 0.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="LABEL" value="RAM Default Value"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:9d2319c7-8658-4e05-af6e-db52438353dc"/>
                                            <a:da name="DEFAULT" value="0"/>
                                            <a:da name="INVALID" type="Range">
                                                <a:tst expr="&lt;=255"/>
                                                <a:tst expr="&gt;=0"/>
                                            </a:da>
                                        </v:var>


                                        <!-- /** @implements McuRamSectionBaseAddress_Object */ -->
                                        <v:var name="McuRamSectionBaseAddress" type="INTEGER">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        This parameter represents the RAM section base address.
                                                        The address must be aligned to 4 bytes.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="LABEL" value="RAM Section Base Address"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:4ed60578-049f-4504-a189-0121d770c42a"/>
                                            <a:da name="DEFAULT" type="XPath"  expr="num:i(ecu:get('MCU.McuModuleConfiguration.McuRamSectorSettingConf.McuRamSectionBaseAddress.low'))"/>
                                            <a:da name="INVALID" type="Range">
                                                <a:tst expr="&lt;ecu:get('MCU.McuModuleConfiguration.McuRamSectorSettingConf.McuRamSectionBaseAddress.high')"/>
                                                <a:tst expr="&gt;=ecu:get('MCU.McuModuleConfiguration.McuRamSectorSettingConf.McuRamSectionBaseAddress.low')"/>
                                            </a:da>
                                            <a:da name="RANGE" type="XPath">
                                                <a:tst expr="(node:fallback(., 872415232) mod 4) != 0" true="The Ram base address must be 4 byte aligned."/>
                                            </a:da>
                                        </v:var>


                                        <!-- /** @implements McuRamSectionSize_Object */ -->
                                        <v:var name="McuRamSectionSize" type="INTEGER">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        This parameter represents the RAM section size in bytes.
                                                        The size must be a multiple of 4.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="LABEL" value="RAM Section Size"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:b8e5c869-b036-4015-a0c4-d38886825a25"/>
                                            <a:da name="DEFAULT" value="1024"/>
                                            <a:da name="INVALID" type="Range">
                                                <a:tst expr="&lt;=ecu:get('MCU.McuModuleConfiguration.McuRamSectorSettingConf.McuRamSectionSize')"/>
                                                <a:tst expr="&gt;=0"/>
                                            </a:da>
                                            <a:da name="INVALID" type="XPath">
                                                <a:tst expr="(node:fallback(., 1024) mod 4) != 0" true="The Ram size must be 4 byte aligned."/>
                                            </a:da>
                                            <a:da name="RANGE" type="XPath">
                                                <a:tst expr="num:i(node:fallback(., 1024)) + num:i(node:fallback(../McuRamSectionBaseAddress, 872415232)) &gt;= num:i(ecu:get('MCU.McuModuleConfiguration.McuRamSectorSettingConf.McuRamSectionBaseAddress.high'))" true="The Ram size is out of range. Please keep Ram Base Address (after adding the Ram Size) in range address."/>
                                            </a:da>
                                        </v:var>


                                        <!-- /** @implements McuRamSectionWriteSize_Object */ -->
                                        <v:var name="McuRamSectionWriteSize" type="INTEGER">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        This parameter shall define the size in bytes of data which can be written into RAM at once.
                                                        The ram write size is currently restricted to {1, 2, 4, 8} bytes.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="LABEL" value="RAM Section Write Size"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:b8e5c869-b036-4015-ac04-38d86885a225"/>
                                            <a:da name="DEFAULT" value="8"/>
                                            <a:da name="INVALID" type="Range">
                                                <a:tst expr="&lt;=4294967295"/>
                                                <a:tst expr="&gt;=0"/>
                                            </a:da>
                                            <a:da name="INVALID" type="XPath">
                                                <a:tst expr="( num:i(node:fallback(../McuRamSectionSize, 1024)) mod num:i(node:fallback(., 8)) ) != 0" true="The McuRamSectionWriteSize must divide McuRamSectionSize (i.e. McuRamSectionSize must be a multiple of McuRamSectionWriteSize)."/>
                                                <a:tst expr="
                                                    (
                                                        ( num:i(node:fallback(., 8)) != 1 ) and
                                                        ( num:i(node:fallback(., 8)) != 2 ) and
                                                        ( num:i(node:fallback(., 8)) != 4 ) and
                                                        ( num:i(node:fallback(., 8)) != 8 )
                                                    )"
                                                        true="The ram write size is currently restricted to {1, 2, 4, 8} bytes."/>
                                            </a:da>
                                        </v:var>


                                        <v:var name="McuRamSectionBaseAddrLinkerSym" type="STRING">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        This parameter represents the RAM section base address.
                                                        The address must be aligned to 4 bytes.
                                                        If this parameter is empty, then the integer values from "McuRamSectionBaseAddress" will be used.
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="LABEL" value="RAM Section Base Address Linker Symbol"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:5179e367-2481-4677-b488-15f5be2dc797"/>
                                            <a:da name="DEFAULT" value=""/>
                                            <a:da name="INVALID" type="XPath">
                                                <a:tst expr="( node:empty(.) or (text:match(normalize-space(.),'^[_a-zA-Z]+[_0-9a-zA-Z]*$')) )"
                                                   false="Invalid identifier. The field must specify a valid C identifier (i.e. an arbitrarily long sequence of digits, underscores, lowercase and uppercase Latin letters, that must begin with a non-digit character)."/>
                                            </a:da>
                                        </v:var>

                                        <v:var name="McuRamSectionSizeLinkerSym" type="STRING">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        This parameter represents the RAM section size in bytes.
                                                        The size must be multiple of 4.
                                                        If this parameter is empty, then the integer values from "McuRamSectionSize" will be used.
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="LABEL" value="RAM Section Size Linker Symbol"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:2abc7efe-8cea-407a-a89a-fe033dc7c3a8"/>
                                            <a:da name="DEFAULT" value=""/>
                                            <a:da name="INVALID" type="XPath">
                                                <a:tst expr="( node:empty(.) or (text:match(normalize-space(.),'^[_a-zA-Z]+[_0-9a-zA-Z]*$')) )"
                                                   false="Invalid identifier. The field must specify a valid C identifier (i.e. an arbitrarily long sequence of digits, underscores, lowercase and uppercase Latin letters, that must begin with a non-digit character)."/>
                                            </a:da>
                                        </v:var>

                                    </v:ctr>
                                </v:lst>

                                <v:ctr name="McuResetConfig" type="IDENTIFIABLE">
                                    <a:a name="TAB" value="McuResetConfig"/>
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                The reset generation module (MC_RGM) centralizes the different reset sources and manages the reset sequence of the device. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="UUID" value="ECUC:28115898-f56e-45f7-98d8-02bb15ee7e03"/>

                                    <v:var name="McuResetType" type="ENUMERATION">
                                        <a:a name="DESC">
                                            <a:v>
                                                <![CDATA[EN:<html>
                                                    This parameter selects the type of the reset to be performed through the McuPerformReset API.
                                                    A 'destructive' reset source is associated with an event related to a critical - usually
                                                    hardware - error or dysfunction. When a 'destructive' reset event occurs, the full reset
                                                    sequence is applied to the chip. This resets the full chip ensuring a safe start-up state for
                                                    both digital and analog modules, and the memory content must be considered to be
                                                    unknown. <br />
                                                    A 'functional' reset source is associated with an event related to a less-critical - usually
                                                    non-hardware - error or dysfunction. When a 'functional' reset event occurs, a partial
                                                    reset sequence is applied to the chip. In this case, most digital modules are reset
                                                    normally, while the state of analog modules or specific digital modules (e.g., debug
                                                    modules, flash modules) as well as the system memory content is preserved. <br />
                                                </html>]]>
                                            </a:v>
                                        </a:a>
                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        </a:a>
                                        <a:da name="DEFAULT" value="FunctionalReset"/>
                                        <a:a name="ORIGIN" value="NXP"/>
                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                        <a:a name="SCOPE" value="LOCAL"/>
                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                        <a:a name="UUID" value="ECUC:9da822b3-8070-440e-aa67-2e8a31ad8a24"/>
                                        <a:a name="LABEL" value="Mcu Reset Type"/>
                                        <a:da name="RANGE">
                                            <a:v>FunctionalReset</a:v>
                                            <a:v>DestructiveReset</a:v>
                                        </a:da>
                                    </v:var>

                                    <v:var name="McuFuncResetEscThreshold" type="INTEGER">
                                        <a:a name="DESC">
                                            <a:v>
                                                <![CDATA[EN:<html>
                                                    RGM_FRET[FRET] field configuration. <br />
                                                    If the value of this field is 0, the functional reset escalation function is disabled.
                                                    Any other value is the number of 'functional' resets which will cause a 'destructive' reset. <br />
                                                    Note: Implementation Specific Parameter.
                                                </html>]]>
                                            </a:v>
                                        </a:a>
                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        </a:a>
                                        <a:a name="LABEL" value="Mcu Functional Reset Escalation Threshold"/>
                                        <a:a name="ORIGIN" value="NXP"/>
                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                        <a:a name="SCOPE" value="LOCAL"/>
                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                        <a:a name="UUID" value="ECUC:c7988d5c-a1a0-432d-868c-d8da2118b812"/>
                                        <a:da name="DEFAULT" value="15"/>
                                        <a:a name="INVALID" type="Range">
                                            <a:tst expr="&lt;=15"/>
                                            <a:tst expr="&gt;=0"/>
                                        </a:a>
                                    </v:var>

                                    <v:var name="McuDestResetEscThreshold" type="INTEGER">
                                        <a:a name="DESC">
                                            <a:v>
                                                <![CDATA[EN:<html>
                                                    RGM_DRET[DRET] field configuration. <br />
                                                    If the value of this field is 0, the destructive reset escalation function is disabled.
                                                    Any other value is the number of 'destructive' resets which will keep the chip in the reset state
                                                    until the next power-on reset. <br />
                                                    Note: Implementation Specific Parameter.
                                                </html>]]>
                                            </a:v>
                                        </a:a>
                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        </a:a>
                                        <a:a name="LABEL" value="Mcu Destructive Reset Escalation Threshold"/>
                                        <a:a name="ORIGIN" value="NXP"/>
                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                        <a:a name="SCOPE" value="LOCAL"/>
                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                        <a:a name="UUID" value="ECUC:1478ee17-3755-408a-8857-c044fda72aec"/>
                                        <a:da name="DEFAULT" value="0"/>
                                        <a:a name="INVALID" type="Range">
                                            <a:tst expr="&lt;=15"/>
                                            <a:tst expr="&gt;=0"/>
                                        </a:a>
                                    </v:var>

                                    <v:ctr name="McuResetSourcesConfig" type="IDENTIFIABLE">
                                        <a:a name="DESC">
                                            <a:v>
                                                <![CDATA[EN:<html>
                                                    Configuration of reset sources.<br />
                                                    Note: Implementation Specific Parameter.
                                                </html>]]>
                                            </a:v>
                                        </a:a>
                                        <a:a name="LABEL" value="Reset Sources"/>
                                        <a:a name="UUID" value="ECUC:28351898-f56e-45f7-98d8-02bb15ee7e03"/>

                                        <v:ctr name="McuEXR_ResetSource" type="IDENTIFIABLE">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        'RESET_B pin assertion' reset source configuration.<br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="LABEL" value="External Reset Source"/>"/>
                                            <a:a name="UUID" value="ECUC:a0ad47fe-ab5c-4e98-ba60-c34fada765ac"/>

                                            <v:var name="McuDisableReset" type="BOOLEAN">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            RGM_FERD[D_EXR] field configuration.<br />
                                                            0 - Functional reset event 'RESET_B pin assertion' triggers a reset sequence.<br />
                                                            1 - Functional reset event 'RESET_B pin assertion' generates an interrupt request.<br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="LABEL" value="Disable reset source"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:e28566ec-ee10-466f-a25c-d475bce51bda"/>
                                                <a:da name="DEFAULT" value="false"/>
                                                <a:a name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            ( node:fallback(., 'false') = 'true' ) and
                                                            ( node:fallback(as:modconf('Mcu')[1]/McuGeneralConfiguration/McuAlternateResetIsrUsed, 'false') = 'false' )
                                                        )"
                                                           true="The field McuGeneralConfiguration/McuAlternateResetIsrUsed must be set to 'true' when demoting a reset source to IRQ."/>
                                                </a:a>
                                            </v:var>
                                        </v:ctr>

                                        <v:ctr name="McuF_FR_31_ResetSource" type="IDENTIFIABLE">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        'Debug Functional Reset' reset source configuration.<br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="LABEL" value="DEBUG_FUNC Reset Source"/>
                                            <a:a name="UUID" value="ECUC:a0ad47fe-ab5c-4e98-ba60-c04ae2fb4a5c"/>

                                            <v:var name="McuDisableReset" type="BOOLEAN">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            RGM_FERD[D_F_FR_31] field configuration.<br />
                                                            0 - Functional reset event 'Debug Functional Reset' triggers a reset sequence.<br />
                                                            1 - Functional reset event 'Debug Functional Reset' generates an interrupt request.<br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="LABEL" value="Disable reset source"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:e28566ec-ee10-466f-a25c-d472fe35adbe"/>
                                                <a:da name="DEFAULT" value="false"/>
                                                <a:a name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            ( node:fallback(., 'false') = 'true' ) and
                                                            ( node:fallback(as:modconf('Mcu')[1]/McuGeneralConfiguration/McuAlternateResetIsrUsed, 'false') = 'false' )
                                                        )"
                                                           true="The field McuGeneralConfiguration/McuAlternateResetIsrUsed must be set to 'true' when demoting a reset source to IRQ."/>
                                                </a:a>
                                            </v:var>
                                        </v:ctr>
                                    </v:ctr>
                                </v:ctr>

                                <!-- /**@implements  McuPowerControl_Object */ -->
                                <v:ctr name="McuPowerControl" type="IDENTIFIABLE">
                                    <a:a name="TAB" value="McuPowerControlUnit"/>
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>

                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="UUID" value="ECUC:96aa5819-ac80-4bbe-b43b-7d3ebe2807ef"/>

                                    <v:ctr name="McuPMC_Config" type="IDENTIFIABLE">
                                        <a:a name="DESC">
                                            <a:v>
                                                <![CDATA[EN:<html>
                                                    This PMC Control Register contains the various control settings of the PMC block, see table "PMC NCSPD mapping" in RM. <br />
                                                    Note: Implementation Specific Parameter. <br />
                                                </html>]]>
                                            </a:v>
                                        </a:a>
                                        <a:a name="UUID" value="ECUC:a76f1590-ab79-4586-95d9-c657bb134d88"/>

                                        <v:var name="McuVDD_FXOSCNonCriticalFlag" type="BOOLEAN">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        PMC_NCPSD_CTL[NCSPD_CTL0] field configuration. <br />
                                                        Non-critical supply presence detector control <br />
                                                        The non-critical SPD input on VDD_FXOSC able to set the non-critical output flag. <br />
                                                        0 - The NCSPD cannot set the non-critical flag. <br />
                                                        1 - An NCSPD event will set the non-critical flag. <br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="LABEL" value="VDD_FXOSC Set Non-Critical Flag"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:e28566ec-ee10-466f-a25c-6da2639c9199"/>
                                            <a:da name="DEFAULT" value="false"/>
                                            <a:a name="VISIBLE" type="XPath">
                                                <a:tst expr="(text:contains(ecu:list('MCU.PMC.NonCriticalSPD.List'),substring-before(substring-after(node:name(.),'Mcu'),'NonCriticalFlag'))='true')"/>
                                            </a:a>
                                        </v:var>

                                        <v:var name="McuVDD_ADC0NonCriticalFlag" type="BOOLEAN">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        PMC_NCPSD_CTL[NCSPD_CTL1] field configuration. <br />
                                                        Non-critical supply presence detector control <br />
                                                        The non-critical SPD input on VDD_ADC0 able to set the non-critical output flag. <br />
                                                        0 - The NCSPD cannot set the non-critical flag. <br />
                                                        1 - An NCSPD event will set the non-critical flag. <br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="LABEL" value="VDD_ADC0 Set Non-Critical Flag"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:e28566ec-ee10-466f-a25c-493a97536bea"/>
                                            <a:da name="DEFAULT" value="false"/>
                                            <a:a name="VISIBLE" type="XPath">
                                                <a:tst expr="(text:contains(ecu:list('MCU.PMC.NonCriticalSPD.List'),substring-before(substring-after(node:name(.),'Mcu'),'NonCriticalFlag'))='true')"/>
                                            </a:a>
                                        </v:var>

                                        <v:var name="McuVDD_ADC1NonCriticalFlag" type="BOOLEAN">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        PMC_NCPSD_CTL[NCSPD_CTL2] field configuration. <br />
                                                        Non-critical supply presence detector control <br />
                                                        The non-critical SPD input on VDD_ADC1 able to set the non-critical output flag. <br />
                                                        0 - The NCSPD cannot set the non-critical flag. <br />
                                                        1 - An NCSPD event will set the non-critical flag. <br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="LABEL" value="VDD_ADC1 Set Non-Critical Flag"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:e28566ec-ee10-466f-a25c-e96970d65b80"/>
                                            <a:da name="DEFAULT" value="false"/>
                                            <a:a name="VISIBLE" type="XPath">
                                                <a:tst expr="(text:contains(ecu:list('MCU.PMC.NonCriticalSPD.List'),substring-before(substring-after(node:name(.),'Mcu'),'NonCriticalFlag'))='true')"/>
                                            </a:a>
                                        </v:var>

                                        <v:var name="McuVDD_TMUNonCriticalFlag" type="BOOLEAN">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        PMC_NCPSD_CTL[NCSPD_CTL3] field configuration. <br />
                                                        Non-critical supply presence detector control <br />
                                                        The non-critical SPD input on VDD_TMU able to set the non-critical output flag. <br />
                                                        0 - The NCSPD cannot set the non-critical flag. <br />
                                                        1 - An NCSPD event will set the non-critical flag. <br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="LABEL" value="VDD_TMU Set Non-Critical Flag"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:e28566ec-ee10-466f-a25c-43389fd09670"/>
                                            <a:da name="DEFAULT" value="false"/>
                                            <a:a name="VISIBLE" type="XPath">
                                                <a:tst expr="(text:contains(ecu:list('MCU.PMC.NonCriticalSPD.List'),substring-before(substring-after(node:name(.),'Mcu'),'NonCriticalFlag'))='true')"/>
                                            </a:a>
                                        </v:var>

                                        <v:var name="McuVDD_EFUSENonCriticalFlag" type="BOOLEAN">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        PMC_NCPSD_CTL[NCSPD_CTL4] field configuration. <br />
                                                        Non-critical supply presence detector control <br />
                                                        The non-critical SPD input on VDD_EFUSE able to set the non-critical output flag. <br />
                                                        0 - The NCSPD cannot set the non-critical flag. <br />
                                                        1 - An NCSPD event will set the non-critical flag. <br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="LABEL" value="VDD_EFUSE Set Non-Critical Flag"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:e28566ec-ee10-466f-a25c-a08f00f4da1a"/>
                                            <a:da name="DEFAULT" value="false"/>
                                            <a:a name="VISIBLE" type="XPath">
                                                <a:tst expr="(text:contains(ecu:list('MCU.PMC.NonCriticalSPD.List'),substring-before(substring-after(node:name(.),'Mcu'),'NonCriticalFlag'))='true')"/>
                                            </a:a>
                                        </v:var>

                                        <v:var name="McuVDD_HV_PLLNonCriticalFlag" type="BOOLEAN">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        PMC_NCPSD_CTL[NCSPD_CTL5] field configuration. <br />
                                                        Non-critical supply presence detector control <br />
                                                        The non-critical SPD input on VDD_HV_PLL able to set the non-critical output flag. <br />
                                                        0 - The NCSPD cannot set the non-critical flag. <br />
                                                        1 - An NCSPD event will set the non-critical flag. <br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="LABEL" value="VDD_HV_PLL Set Non-Critical Flag"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:e28566ec-ee10-466f-a25c-9d6ad4b5a177"/>
                                            <a:da name="DEFAULT" value="false"/>
                                            <a:a name="VISIBLE" type="XPath">
                                                <a:tst expr="(text:contains(ecu:list('MCU.PMC.NonCriticalSPD.List'),substring-before(substring-after(node:name(.),'Mcu'),'NonCriticalFlag'))='true')"/>
                                            </a:a>
                                        </v:var>

                                        <v:var name="McuVDD_LV_PLLNonCriticalFlag" type="BOOLEAN">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        PMC_NCPSD_CTL[NCSPD_CTL6] field configuration. <br />
                                                        Non-critical supply presence detector control <br />
                                                        The non-critical SPD input on VDD_LV_PLL able to set the non-critical output flag. <br />
                                                        0 - The NCSPD cannot set the non-critical flag. <br />
                                                        1 - An NCSPD event will set the non-critical flag. <br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="LABEL" value="VDD_LV_PLL Set Non-Critical Flag"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:e28566ec-ee10-466f-a25c-5ca148cba1cd"/>
                                            <a:da name="DEFAULT" value="false"/>
                                            <a:a name="VISIBLE" type="XPath">
                                                <a:tst expr="(text:contains(ecu:list('MCU.PMC.NonCriticalSPD.List'),substring-before(substring-after(node:name(.),'Mcu'),'NonCriticalFlag'))='true')"/>
                                            </a:a>
                                        </v:var>

                                        <v:var name="McuVDD_HV_PLL_DDR0NonCriticalFlag" type="BOOLEAN">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        PMC_NCPSD_CTL[NCSPD_CTL7] field configuration. <br />
                                                        Non-critical supply presence detector control <br />
                                                        The non-critical SPD input on VDD_HV_PLL_DDR0 able to set the non-critical output flag. <br />
                                                        0 - The NCSPD cannot set the non-critical flag. <br />
                                                        1 - An NCSPD event will set the non-critical flag. <br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="LABEL" value="VDD_HV_PLL_DDR0 Set Non-Critical Flag"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:e28566ec-ee10-466f-a25c-f9e3d93bdba5"/>
                                            <a:da name="DEFAULT" value="false"/>
                                            <a:a name="VISIBLE" type="XPath">
                                                <a:tst expr="(text:contains(ecu:list('MCU.PMC.NonCriticalSPD.List'),substring-before(substring-after(node:name(.),'Mcu'),'NonCriticalFlag'))='true')"/>
                                            </a:a>
                                        </v:var>

                                        <v:var name="McuVDD_LV_PLL_DDR0NonCriticalFlag" type="BOOLEAN">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        PMC_NCPSD_CTL[NCSPD_CTL8] field configuration. <br />
                                                        Non-critical supply presence detector control <br />
                                                        The non-critical SPD input on VDD_LV_PLL_DDR0 able to set the non-critical output flag. <br />
                                                        0 - The NCSPD cannot set the non-critical flag. <br />
                                                        1 - An NCSPD event will set the non-critical flag. <br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="LABEL" value="VDD_LV_PLL_DDR0 Set Non-Critical Flag"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:e28566ec-ee10-466f-a25c-7f7e6a01a295"/>
                                            <a:da name="DEFAULT" value="false"/>
                                            <a:a name="VISIBLE" type="XPath">
                                                <a:tst expr="(text:contains(ecu:list('MCU.PMC.NonCriticalSPD.List'),substring-before(substring-after(node:name(.),'Mcu'),'NonCriticalFlag'))='true')"/>
                                            </a:a>
                                        </v:var>

                                        <v:var name="McuVDD_HV_PLL_AURNonCriticalFlag" type="BOOLEAN">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        PMC_NCPSD_CTL[NCSPD_CTL9] field configuration. <br />
                                                        Non-critical supply presence detector control <br />
                                                        The non-critical SPD input on VDD_HV_PLL_AUR able to set the non-critical output flag. <br />
                                                        0 - The NCSPD cannot set the non-critical flag. <br />
                                                        1 - An NCSPD event will set the non-critical flag. <br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="LABEL" value="VDD_HV_PLL_AUR Set Non-Critical Flag"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:e28566ec-ee10-466f-a25c-5325d43cea2f"/>
                                            <a:da name="DEFAULT" value="false"/>
                                            <a:a name="VISIBLE" type="XPath">
                                                <a:tst expr="(text:contains(ecu:list('MCU.PMC.NonCriticalSPD.List'),substring-before(substring-after(node:name(.),'Mcu'),'NonCriticalFlag'))='true')"/>
                                            </a:a>
                                        </v:var>

                                        <v:var name="McuVDD_LV_PLL_AURNonCriticalFlag" type="BOOLEAN">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        PMC_NCPSD_CTL[NCSPD_CTL10] field configuration. <br />
                                                        Non-critical supply presence detector control <br />
                                                        The non-critical SPD input on VDD_LV_PLL_AUR able to set the non-critical output flag. <br />
                                                        0 - The NCSPD cannot set the non-critical flag. <br />
                                                        1 - An NCSPD event will set the non-critical flag. <br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="LABEL" value="VDD_LV_PLL_AUR Set Non-Critical Flag"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:e28566ec-ee10-466f-a25c-57ef7fd074fc"/>
                                            <a:da name="DEFAULT" value="false"/>
                                            <a:a name="VISIBLE" type="XPath">
                                                <a:tst expr="(text:contains(ecu:list('MCU.PMC.NonCriticalSPD.List'),substring-before(substring-after(node:name(.),'Mcu'),'NonCriticalFlag'))='true')"/>
                                            </a:a>
                                        </v:var>
                                        <!-- Start S32GXXX Specific NCSPDs -->
                                        <v:var name="McuVDD_IO_STBYNonCriticalFlag" type="BOOLEAN">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        PMC_NCPSD_CTL[NCSPD_CTL11] field configuration. <br />
                                                        Non-critical supply presence detector control <br />
                                                        The non-critical SPD input on VDD_IO_STBY able to set the non-critical output flag. <br />
                                                        0 - The NCSPD cannot set the non-critical flag. <br />
                                                        1 - An NCSPD event will set the non-critical flag. <br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="LABEL" value="VDD_IO_STBY Set Non-Critical Flag"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:03690334-029b-4fd2-9313-788af04d7e8d"/>
                                            <a:da name="DEFAULT" value="false"/>
                                            <a:a name="VISIBLE" type="XPath">
                                                <a:tst expr="(text:contains(ecu:list('MCU.PMC.NonCriticalSPD.List'),substring-before(substring-after(node:name(.),'Mcu'),'NonCriticalFlag'))='true')"/>
                                            </a:a>
                                        </v:var>
                                        <!-- Start S32GXXX Specific NCSPDs -->
                                        <v:var name="McuVDD_IO_ANonCriticalFlag" type="BOOLEAN">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        PMC_NCPSD_CTL[NCSPD_CTL17] field configuration. <br />
                                                        Non-critical supply presence detector control <br />
                                                        The non-critical SPD input on VDD_IO_A able to set the non-critical output flag. <br />
                                                        0 - The NCSPD cannot set the non-critical flag. <br />
                                                        1 - An NCSPD event will set the non-critical flag. <br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="LABEL" value="VDD_IO_A Set Non-Critical Flag"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:b40ff4d8-775f-4882-a2af-a4a3a7907e3a"/>
                                            <a:da name="DEFAULT" value="false"/>
                                            <a:a name="VISIBLE" type="XPath">
                                                <a:tst expr="(text:contains(ecu:list('MCU.PMC.NonCriticalSPD.List'),substring-before(substring-after(node:name(.),'Mcu'),'NonCriticalFlag'))='true')"/>
                                            </a:a>
                                        </v:var>
                                        <!-- Start S32GXXX Specific NCSPDs -->
                                        <v:var name="McuVDD_IO_BNonCriticalFlag" type="BOOLEAN">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        PMC_NCPSD_CTL[NCSPD_CTL18] field configuration. <br />
                                                        Non-critical supply presence detector control <br />
                                                        The non-critical SPD input on VDD_IO_B able to set the non-critical output flag. <br />
                                                        0 - The NCSPD cannot set the non-critical flag. <br />
                                                        1 - An NCSPD event will set the non-critical flag. <br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="LABEL" value="VDD_IO_B Set Non-Critical Flag"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:a4a00663-bde2-4590-a8fa-bd57fd778fcb"/>
                                            <a:da name="DEFAULT" value="false"/>
                                            <a:a name="VISIBLE" type="XPath">
                                                <a:tst expr="(text:contains(ecu:list('MCU.PMC.NonCriticalSPD.List'),substring-before(substring-after(node:name(.),'Mcu'),'NonCriticalFlag'))='true')"/>
                                            </a:a>
                                        </v:var>
                                        <!-- Start S32GXXX Specific NCSPDs -->
                                        <v:var name="McuVDD_IO_USBNonCriticalFlag" type="BOOLEAN">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        PMC_NCPSD_CTL[NCSPD_CTL21] field configuration. <br />
                                                        Non-critical supply presence detector control <br />
                                                        The non-critical SPD input on VDD_IO_USB able to set the non-critical output flag. <br />
                                                        0 - The NCSPD cannot set the non-critical flag. <br />
                                                        1 - An NCSPD event will set the non-critical flag. <br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="LABEL" value="VDD_IO_USB Set Non-Critical Flag"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:65921434-8269-47bf-85d5-48dc898139ff"/>
                                            <a:da name="DEFAULT" value="false"/>
                                            <a:a name="VISIBLE" type="XPath">
                                                <a:tst expr="(text:contains(ecu:list('MCU.PMC.NonCriticalSPD.List'),substring-before(substring-after(node:name(.),'Mcu'),'NonCriticalFlag'))='true')"/>
                                            </a:a>
                                        </v:var>
                                        <!-- Start S32R45 Specific NCSPDs -->
                                        <v:var name="McuVDD_HV_PLL_ACCNonCriticalFlag" type="BOOLEAN">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        PMC_NCPSD_CTL[NCSPD_CTL11] field configuration. <br />
                                                        Non-critical supply presence detector control <br />
                                                        The non-critical SPD input on VDD_HV_PLL_ACC able to set the non-critical output flag. <br />
                                                        0 - The NCSPD cannot set the non-critical flag. <br />
                                                        1 - An NCSPD event will set the non-critical flag. <br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="LABEL" value="VDD_HV_PLL_ACC Set Non-Critical Flag"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:e28566ec-ee10-466f-a25c-5e7f7fc374fc"/>
                                            <a:da name="DEFAULT" value="false"/>
                                            <a:a name="VISIBLE" type="XPath">
                                                <a:tst expr="(text:contains(ecu:list('MCU.PMC.NonCriticalSPD.List'),substring-before(substring-after(node:name(.),'Mcu'),'NonCriticalFlag'))='true')"/>
                                            </a:a>
                                        </v:var>
                                        <!-- Start S32R45 Specific NCSPDs -->
                                        <v:var name="McuVDD_LV_PLL_ACCNonCriticalFlag" type="BOOLEAN">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        PMC_NCPSD_CTL[NCSPD_CTL12] field configuration. <br />
                                                        Non-critical supply presence detector control <br />
                                                        The non-critical SPD input on VDD_LV_PLL_ACC able to set the non-critical output flag. <br />
                                                        0 - The NCSPD cannot set the non-critical flag. <br />
                                                        1 - An NCSPD event will set the non-critical flag. <br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="LABEL" value="VDD_LV_PLL_ACC Set Non-Critical Flag"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:e28566ec-ee10-466f-a25c-5e7f7fa523fc"/>
                                            <a:da name="DEFAULT" value="false"/>
                                            <a:a name="VISIBLE" type="XPath">
                                                <a:tst expr="(text:contains(ecu:list('MCU.PMC.NonCriticalSPD.List'),substring-before(substring-after(node:name(.),'Mcu'),'NonCriticalFlag'))='true')"/>
                                            </a:a>
                                        </v:var>
                                        <!-- Start S32R45 Specific NCSPDs -->
                                        <v:var name="McuVDD_IO_SDHCNonCriticalFlag" type="BOOLEAN">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        PMC_NCPSD_CTL[NCSPD_CTL23] field configuration for S32R45 derivative. <br />
                                                        PMC_NCPSD_CTL[NCSPD_CTL22] field configuration for S32GXXX derivative. <br />
                                                        Non-critical supply presence detector control <br />
                                                        The non-critical SPD input on VDD_IO_SDHC I/O segment able to set the non-critical output flag. <br />
                                                        0 - The NCSPD cannot set the non-critical flag. <br />
                                                        1 - An NCSPD event will set the non-critical flag. <br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="LABEL" value="QuadSPI_B IO Segment(VDD_IO_SDHC) Set Non-Critical Flag"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:e28566ec-ee10-466f-a25c-57ef19d074fc"/>
                                            <a:da name="DEFAULT" value="false"/>
                                            <a:a name="VISIBLE" type="XPath">
                                                <a:tst expr="(text:contains(ecu:list('MCU.PMC.NonCriticalSPD.List'),substring-before(substring-after(node:name(.),'Mcu'),'NonCriticalFlag'))='true')"/>
                                            </a:a>
                                        </v:var>
                                        <!-- Start S32R45 Specific NCSPDs -->
                                        <v:var name="McuVDD_IO_C_GPIO4NonCriticalFlag" type="BOOLEAN">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        PMC_NCPSD_CTL[NCSPD_CTL24] field configuration. <br />
                                                        Non-critical supply presence detector control <br />
                                                        The non-critical SPD input on GPIO_4 I/O segment supply SPD monitor (VDD_IO_C) able to set the non-critical output flag. <br />
                                                        0 - The NCSPD cannot set the non-critical flag. <br />
                                                        1 - An NCSPD event will set the non-critical flag. <br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="LABEL" value="GPIO_4 IO Segment(VDD_IO_C) Set Non-Critical Flag"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:e2fe66ec-ee10-466f-a25c-57ef19d074fc"/>
                                            <a:da name="DEFAULT" value="false"/>
                                            <a:a name="VISIBLE" type="XPath">
                                                <a:tst expr="(text:contains(ecu:list('MCU.PMC.NonCriticalSPD.List'),substring-before(substring-after(node:name(.),'Mcu'),'NonCriticalFlag'))='true')"/>
                                            </a:a>
                                        </v:var>
                                        <!-- Start S32R45 Specific NCSPDs -->
                                        <v:var name="McuVDD_IO_B_GPIO3NonCriticalFlag" type="BOOLEAN">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        PMC_NCPSD_CTL[NCSPD_CTL25] field configuration. <br />
                                                        Non-critical supply presence detector control <br />
                                                        The non-critical SPD input on GPIO_3 I/O segment supply SPD monitor (VDD_IO_B) able to set the non-critical output flag. <br />
                                                        0 - The NCSPD cannot set the non-critical flag. <br />
                                                        1 - An NCSPD event will set the non-critical flag. <br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="LABEL" value="GPIO_3 I/O segment(VDD_IO_B) Set Non-Critical Flag"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:e2fe66ec-1f10-466f-a25c-57ef19d074fc"/>
                                            <a:da name="DEFAULT" value="false"/>
                                            <a:a name="VISIBLE" type="XPath">
                                                <a:tst expr="(text:contains(ecu:list('MCU.PMC.NonCriticalSPD.List'),substring-before(substring-after(node:name(.),'Mcu'),'NonCriticalFlag'))='true')"/>
                                            </a:a>
                                        </v:var>
                                        <!-- Start S32R45 Specific NCSPDs -->
                                        <v:var name="McuVDD_IO_B_GPIO2NonCriticalFlag" type="BOOLEAN">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        PMC_NCPSD_CTL[NCSPD_CTL26] field configuration. <br />
                                                        Non-critical supply presence detector control <br />
                                                        The non-critical SPD input on GPIO_2 I/O segment supply SPD monitor (VDD_IO_B) able to set the non-critical output flag. <br />
                                                        0 - The NCSPD cannot set the non-critical flag. <br />
                                                        1 - An NCSPD event will set the non-critical flag. <br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="LABEL" value="GPIO_2 IO Segment(VDD_IO_B) Set Non-Critical Flag"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:e2fe66ec-1f10-41ff-a25c-57ef19d074fc"/>
                                            <a:da name="DEFAULT" value="false"/>
                                            <a:a name="VISIBLE" type="XPath">
                                                <a:tst expr="(text:contains(ecu:list('MCU.PMC.NonCriticalSPD.List'),substring-before(substring-after(node:name(.),'Mcu'),'NonCriticalFlag'))='true')"/>
                                            </a:a>
                                        </v:var>
                                        <!-- Start S32R45 Specific NCSPDs -->
                                        <v:var name="McuVDD_IO_A_GPIO1NonCriticalFlag" type="BOOLEAN">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        PMC_NCPSD_CTL[NCSPD_CTL27] field configuration. <br />
                                                        Non-critical supply presence detector control <br />
                                                        The non-critical SPD input on GPIO_1 I/O segment supply SPD monitor (VDD_IO_A) able to set the non-critical output flag. <br />
                                                        0 - The NCSPD cannot set the non-critical flag. <br />
                                                        1 - An NCSPD event will set the non-critical flag. <br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="LABEL" value="GPIO_1 IO Segment(VDD_IO_A) Set Non-Critical Flag"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:e2fe66ec-1f1f-41ff-a25c-57ef19d074fc"/>
                                            <a:da name="DEFAULT" value="false"/>
                                            <a:a name="VISIBLE" type="XPath">
                                                <a:tst expr="(text:contains(ecu:list('MCU.PMC.NonCriticalSPD.List'),substring-before(substring-after(node:name(.),'Mcu'),'NonCriticalFlag'))='true')"/>
                                            </a:a>
                                        </v:var>
                                        <!-- Start S32R45 Specific NCSPDs -->
                                        <v:var name="McuVDD_IO_GMAC1NonCriticalFlag" type="BOOLEAN">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        PMC_NCPSD_CTL[NCSPD_CTL28] field configuration. <br />
                                                        Non-critical supply presence detector control <br />
                                                        The non-critical SPD input on GMAC_1 I/O segment supply SPD monitor (VDD_IO_GMAC1) able to set the non-critical output flag. <br />
                                                        0 - The NCSPD cannot set the non-critical flag. <br />
                                                        1 - An NCSPD event will set the non-critical flag. <br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="LABEL" value="GMAC_1 IO Segment(VDD_IO_GMAC1) Set Non-Critical Flag"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:e2fb66ec-1f1f-41ff-a25c-57ef19d074fc"/>
                                            <a:da name="DEFAULT" value="false"/>
                                            <a:a name="VISIBLE" type="XPath">
                                                <a:tst expr="(text:contains(ecu:list('MCU.PMC.NonCriticalSPD.List'),substring-before(substring-after(node:name(.),'Mcu'),'NonCriticalFlag'))='true')"/>
                                            </a:a>
                                        </v:var>
                                        <!-- Start S32R45 Specific NCSPDs -->
                                        <v:var name="McuVDD_IO_GMAC0NonCriticalFlag" type="BOOLEAN">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        PMC_NCPSD_CTL[NCSPD_CTL29] field configuration. <br />
                                                        Non-critical supply presence detector control <br />
                                                        The non-critical SPD input on GMAC_0 I/O segment supply SPD monitor (VDD_IO_GMAC0) able to set the non-critical output flag. <br />
                                                        0 - The NCSPD cannot set the non-critical flag. <br />
                                                        1 - An NCSPD event will set the non-critical flag. <br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="LABEL" value="GMAC_0 IO Segment(VDD_IO_GMAC0) Set Non-Critical Flag"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:e2fb66ec-1f1f-41ff-a25c-57efd7d074fc"/>
                                            <a:da name="DEFAULT" value="false"/>
                                            <a:a name="VISIBLE" type="XPath">
                                                <a:tst expr="(text:contains(ecu:list('MCU.PMC.NonCriticalSPD.List'),substring-before(substring-after(node:name(.),'Mcu'),'NonCriticalFlag'))='true')"/>
                                            </a:a>
                                        </v:var>
                                        <!-- Start S32R45 Specific NCSPDs -->
                                        <v:var name="McuVDD_IO_CLKOUTNonCriticalFlag" type="BOOLEAN">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        PMC_NCPSD_CTL[NCSPD_CTL30] field configuration for S32R45. <br />
                                                        PMC_NCPSD_CTL[NCSPD_CTL28] field configuration for S32GXXX. <br />
                                                        Non-critical supply presence detector control <br />
                                                        The non-critical SPD input on CLKOUT I/O segment supply SPD monitor (VDD_IO_CLKOUT) able to set the non-critical output flag. <br />
                                                        0 - The NCSPD cannot set the non-critical flag. <br />
                                                        1 - An NCSPD event will set the non-critical flag. <br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="LABEL" value="CLKOUT IO Segment(VDD_IO_CLKOUT) Set Non-Critical Flag"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:e2fb66ec-1f1f-410a-a25c-57efd7d074fc"/>
                                            <a:da name="DEFAULT" value="false"/>
                                            <a:a name="VISIBLE" type="XPath">
                                                <a:tst expr="(text:contains(ecu:list('MCU.PMC.NonCriticalSPD.List'),substring-before(substring-after(node:name(.),'Mcu'),'NonCriticalFlag'))='true')"/>
                                            </a:a>
                                        </v:var>

                                        <v:var name="McuVDD_IO_QSPINonCriticalFlag" type="BOOLEAN">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        PMC_NCPSD_CTL[NCSPD_CTL31] field configuration for S32R45. <br />
                                                        PMC_NCPSD_CTL[NCSPD_CTL23] field configuration for S32GXXX. <br />
                                                        Non-critical supply presence detector control <br />
                                                        The non-critical SPD input on QuadSPI_A I/O segment supply SPD monitor (VDD_IO_QSPI) able to set the non-critical output flag. <br />
                                                        0 - The NCSPD cannot set the non-critical flag. <br />
                                                        1 - An NCSPD event will set the non-critical flag. <br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="LABEL" value="QuadSPI_A IO Segment(VDD_IO_QSPI) Set Non-Critical Flag"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:e2fb66ec-1f3d-41ff-a25c-57efd7d074fc"/>
                                            <a:da name="DEFAULT" value="false"/>
                                            <a:a name="VISIBLE" type="XPath">
                                                <a:tst expr="(text:contains(ecu:list('MCU.PMC.NonCriticalSPD.List'),substring-before(substring-after(node:name(.),'Mcu'),'NonCriticalFlag'))='true')"/>
                                            </a:a>
                                        </v:var>
                                        <!-- End S32R45 Specific NCSPDs -->
                                    </v:ctr>
                                </v:ctr>
                            </v:ctr>
                        </v:ctr>

                    </d:chc>

                    <d:chc name="Mcu_EcuParameterDefinition" type="AR-ELEMENT" value="ECU_PARAMETER_DEFINITION">
                        <d:ctr type="AR-ELEMENT">
                            <a:a name="UUID" value="ECUC:b71afc76-9e7f-11eb-a8b3-0242ac130003"/>
                            <a:a name="DEF" value="ASPath:/AR_PACKAGE_SCHEMA/ECU_PARAMETER_DEFINITION"/>
                            <d:lst name="MODULE_REF">
                                <d:ref type="MODULE_REF" value="ASPath:/TS_T40D11M40I0R0/Mcu"/>
                            </d:lst>
                        </d:ctr>
                    </d:chc>
                    <d:chc name="Mcu_ModuleDescription" type="AR-ELEMENT" value="BSW_MODULE_DESCRIPTION">
                        <d:ctr type="AR-ELEMENT">
                            <a:a name="DEF" value="ASPath:/AR_PACKAGE_SCHEMA/BSW_MODULE_DESCRIPTION"/>
                            <d:var name="MODULE_ID" type="INTEGER" >
                                <a:a name="EDITABLE" value="false"/>
                                <a:a name="IMPORTER_INFO" value="@DEF"/>
                            </d:var>
                            <d:ref type="RECOMMENDED_CONFIGURATION" >
                                <a:a name="EDITABLE" value="false"/>
                                <a:a name="IMPORTER_INFO" value="@DEF"/>
                            </d:ref>
                            <d:ref type="PRE_CONFIGURED_CONF" >
                                <a:a name="EDITABLE" value="false"/>
                                <a:a name="IMPORTER_INFO" value="@DEF"/>
                            </d:ref>
                            <d:ref type="VENDOR_SPECIFIC_MODULE_DEF" value="ASPath:/TS_T40D11M40I0R0/Mcu"/>
                        </d:ctr>
                    </d:chc>

                </d:lst>
            </d:ctr>
        </d:lst>
    </d:ctr>
</datamodel>
